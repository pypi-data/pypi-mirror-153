"""
This module contains various objects used to perform validation on function inputs and outputs.
"""

import pydantic
import inspect
import logging

from .royaltyping import *
from .exc import RoyalnetException

log = logging.getLogger(__name__)


class ValidationError(RoyalnetException, pydantic.ValidationError):
    """
    Base error for the :mod:`royalnet.validators` module.
    """


class InputValidationError(ValidationError):
    """
    A failure in the validation of the function arguments.
    """


class OutputValidationError(ValidationError):
    """
    A failure in the validation of the function return value.
    """


class ValidatingFunction:
    """
    A function wrapper which uses :mod:`pydantic` to optionally perform type checking on arguments and return value.
    """

    def __init__(self, f: Callable[..., Any], validate_input: bool = True, validate_output: bool = True):
        self.f: Callable[..., Any] = f
        """
        The function which is having its parameters and return value validated.
        """

        self.InputModel: Type[pydantic.BaseModel] = self._create_input_model() if validate_input else None
        """
        The :mod:`pydantic` model used to validate input parameters, or :data:`None` if they should not be validated.
        """

        self.OutputModel: Type[pydantic.BaseModel] = self._create_output_model() if validate_output else None
        """
        The :mod:`pydantic` model used to validate the return value, or :data:`None` if it shouldn't be validated.
        """

    def __repr__(self):
        if self.InputModel and self.OutputModel:
            validation = "validating input and output"
        elif self.InputModel:
            validation = "validating only input"
        elif self.OutputModel:
            validation = "validating only output"
        else:
            validation = "not validating anything"
        return f"<{self.__class__.__qualname__} {validation}>"

    @staticmethod
    def _parameter_to_field(param: inspect.Parameter, **kwargs) -> Tuple[type, pydantic.fields.FieldInfo]:
        """
        Convert a :class:`inspect.Parameter` to a type-field :class:`tuple`, which can be easily passed to
        :func:`pydantic.create_model`.

        If the parameter is already a :class:`pydantic.FieldInfo` (created by :func:`pydantic.Field`), it will be
        returned as the value, without creating a new model.

        :param param: The :class:`inspect.Parameter` to convert.
        :param kwargs: Additional kwargs to pass to the field.
        :return: A :class:`tuple`, where the first element is a :class:`type` and the second is a :class:`pydantic.Field`.
        """

        if isinstance(param.default, pydantic.fields.FieldInfo):
            log.debug(f"Parameter {param} is a pydantic.Field, leaving it untouched...")
            return (
                param.annotation,
                param.default
            )
        else:
            log.debug(f"Parameter {param} is not a pydantic.Field, converting it to one...")
            return (
                param.annotation,
                pydantic.Field(
                    default=param.default if param.default is not inspect.Parameter.empty else ...,
                    title=param.name,
                    **kwargs,
                ),
            )

    class ModelConfig(pydantic.BaseConfig):
        """
        Configuration for the :mod:`pydantic` models generated by this class.
        """

        arbitrary_types_allowed = True

    def _create_input_model(self, **extra_fields) -> Type[pydantic.BaseModel]:
        """
        Create a pydantic model based on the arguments of the :attr:`f` function.

        Function arguments starting with ``_`` are ignored.

        The model is created using the current :class:`.ModelConfig`.

        :param extra_fields: Extra fields to be added to the model.
        :return: The created pydantic model.
        """

        log.debug(f"Getting function signature of: {self.f!r}")
        signature: inspect.Signature = inspect.signature(self.f)

        log.debug(f"Converting parameter annotations of {self.f!r} to fields...")
        fields = {
            key: self._parameter_to_field(value)
            for key, value in signature.parameters.items()
            if not key.startswith("_")
        }

        log.debug(f"Creating input model with parsed fields {fields!r} and extra fields {extra_fields!r}...")
        return pydantic.create_model(
            f"{self.__class__.__name__}InputModel",
            __config__=self.ModelConfig,
            **fields,
            **extra_fields
        )

    def _create_output_model(self) -> Type[pydantic.BaseModel]:
        """
        Create a pydantic model based on the return value of the :attr:`f` function.

        The model is created using the current :class:`.ModelConfig`.

        :return: The created pydantic model.
        """

        log.debug(f"Getting function signature of: {self.f!r}")
        signature: inspect.Signature = inspect.signature(self.f)

        log.debug(f"Creating output model...")
        return pydantic.create_model(
            f"{self.__class__.__name__}OutputModel",
            __config__=self.ModelConfig,
            __root__=(signature.return_annotation, pydantic.Field(..., title="Returns"))
        )

    def _validate_input(self, **kwargs) -> pydantic.BaseModel:
        """
        Instantiate the :attr:`.InputModel` with the passed kwargs.

        :param kwargs: The keyword arguments that should be passed to the model.
        :return: The created model.
        :raises .InputValidationError: If the kwargs fail the validation.
        """
        log.debug(f"Validating input: {kwargs!r}")
        try:
            return self.InputModel(**kwargs)
        except pydantic.ValidationError as e:
            log.error(f"Input validation failed: {e!r}")
            raise InputValidationError(errors=e.raw_errors, model=e.model)

    def teleport_out(self, value: Any) -> pydantic.BaseModel:
        """
        Instantiate the :attr:`.OutputModel` with the passed value.

        :param value: The value that should be validated.
        :return: The created model.
        :raises .OutputValidationError: If the value fails the validation.
        """

        log.debug(f"Validating output: {value!r}")
        try:
            return self.OutputModel(__root__=value)
        except pydantic.ValidationError as e:
            log.error(f"Output validation failed: {e!r}")
            raise OutputValidationError(errors=e.raw_errors, model=e.model)

    @staticmethod
    def _split_kwargs(**kwargs) -> Tuple[Dict[str, Any], Dict[str, Any]]:
        """
        Split the passed kwargs in two different :class:`dict`:
        - One containing the arguments that **do not start with ``_``**;
        - Another containing the ones which do.

        :return: A tuple of :class:`dict`, where the second contains the ones starting with ``_``, and the first
                 contains the rest.
        """
        model_params = {}
        extra_params = {}
        for key, value in kwargs.items():
            if key.startswith("_"):
                log.debug(f"Found extra keyword argument: {key}")
                extra_params[key] = value
            else:
                log.debug(f"Found model keyword argument: {key}")
                model_params[key] = value
        return model_params, extra_params

    def _run(self, **kwargs) -> Any:
        """
        Run the :class:`.ValidatingFunction` synchronously.
        """

        if self.InputModel:
            log.debug("Validating input...")
            model_kwargs, extra_kwargs = self._split_kwargs(**kwargs)
            model_kwargs = self._validate_input(**kwargs).dict()
            kwargs = {**model_kwargs, **extra_kwargs}

        result = self.f(**kwargs)

        if self.OutputModel:
            # noinspection PyUnresolvedReferences
            result = self.teleport_out(result).__root__

        return result

    def _run_async(self, **kwargs) -> Awaitable[Any]:
        """
        Run the :class:`.ValidatingFunction` asynchronously.
        """

        if self.InputModel:
            log.debug("Validating input...")
            model_kwargs, extra_kwargs = self._split_kwargs(**kwargs)
            model_kwargs = self._validate_input(**kwargs).dict()
            kwargs = {**model_kwargs, **extra_kwargs}

        result = await self.f(**kwargs)

        if self.OutputModel:
            # noinspection PyUnresolvedReferences
            result = self.teleport_out(result).__root__

        return result

    def __call__(self, *args, **kwargs):
        if inspect.iscoroutinefunction(self.f):
            return self._run_async(**kwargs)
        else:
            return self._run(**kwargs)


__all__ = (
    "ValidationError",
    "InputValidationError",
    "OutputValidationError",
    "ValidatingFunction",
)
