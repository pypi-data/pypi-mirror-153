[tool.poetry]
name = "sain"
version = "0.0.2"
description = "Standard Rust core types implementations for Python."
authors = ["nxtlo <dhmony-99@hotmail.com>"]
license = "BSD-3-Clause license"
keywords = ["Rust", "config"]
readme = "README.md"
repository = "https://github.com/nxtlo/sain"
packages = [
    {include = "sain"},
    {include = "sain/**/*.py"}
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"

[tool.black]
line-length     = 120
target-version  = ["py38"]
include         = ".*pyi?$"

[tool.isort]
profile = "black"
force_single_line = true

# Configs based on tanjun :p

[tool.pyright]
include = ["noxfile.py", "sain"]

pythonVersion = "3.8"
typeCheckingMode = "strict"
reportMissingModuleSource = "error"
reportMissingTypeStubs = "error"

reportIncompatibleMethodOverride = "warning"    # This relies on ordering for key-word only arguments
                                                # which is more annoying than it's worth
reportUnknownMemberType = "warning"             # This messes with instance checking generic objects
reportUnknownArgumentType = "warning"           # Pretty much the same as reportUnknownMemberType
reportUnknownLambdaType = "warning"
reportImportCycles = "warning"                  # This isn't necessarily an issue if it's type checking only.
reportUnknownVariableType = "warning"           # Lotta false-positives, might fix/change later.

[tool.mypy]
# some good strict settings
strict = true
warn_unreachable = true

# more narrow type ignores
show_error_codes = true

# these are used by pyright
warn_unused_ignores = false
warn_redundant_casts = false

# compatibility with pyright
allow_redefinition = true
disable_error_code = ["return-value"]