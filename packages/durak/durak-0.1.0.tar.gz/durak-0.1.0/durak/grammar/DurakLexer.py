# Generated from DurakLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,390,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
        2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,
        10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
        16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,
        23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,
        29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,
        36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
        42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
        49,7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,0,1,0,1,0,5,0,118,8,0,
        10,0,12,0,121,9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,132,8,
        1,10,1,12,1,135,9,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,4,6,162,
        8,6,11,6,12,6,163,1,7,4,7,167,8,7,11,7,12,7,168,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,4,11,188,
        8,11,11,11,12,11,189,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,5,23,262,8,23,10,23,
        12,23,265,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,4,25,274,8,25,
        11,25,12,25,275,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
        1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,
        1,46,1,46,1,46,1,46,1,46,1,46,1,47,4,47,347,8,47,11,47,12,47,348,
        1,48,4,48,352,8,48,11,48,12,48,353,1,48,1,48,4,48,358,8,48,11,48,
        12,48,359,1,49,1,49,5,49,364,8,49,10,49,12,49,367,9,49,1,49,1,49,
        1,49,5,49,372,8,49,10,49,12,49,375,9,49,1,49,3,49,378,8,49,1,50,
        1,50,1,50,1,50,1,51,1,51,5,51,386,8,51,10,51,12,51,389,9,51,2,119,
        133,0,52,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,
        29,12,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,
        51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,
        73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,44,
        95,45,97,46,99,47,101,48,103,49,105,50,107,51,109,52,7,0,1,2,3,4,
        5,6,8,1,0,60,60,5,0,45,45,48,57,65,90,95,95,97,122,3,0,9,10,13,13,
        32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,1,0,34,34,1,0,39,39,397,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,
        2,23,1,0,0,0,2,25,1,0,0,0,2,27,1,0,0,0,2,29,1,0,0,0,2,31,1,0,0,0,
        3,33,1,0,0,0,3,35,1,0,0,0,3,37,1,0,0,0,3,39,1,0,0,0,3,41,1,0,0,0,
        3,43,1,0,0,0,3,45,1,0,0,0,3,47,1,0,0,0,3,49,1,0,0,0,3,51,1,0,0,0,
        4,53,1,0,0,0,4,55,1,0,0,0,5,57,1,0,0,0,5,59,1,0,0,0,6,61,1,0,0,0,
        6,63,1,0,0,0,6,65,1,0,0,0,6,67,1,0,0,0,6,69,1,0,0,0,6,71,1,0,0,0,
        6,73,1,0,0,0,6,75,1,0,0,0,6,77,1,0,0,0,6,79,1,0,0,0,6,81,1,0,0,0,
        6,83,1,0,0,0,6,85,1,0,0,0,6,87,1,0,0,0,6,89,1,0,0,0,6,91,1,0,0,0,
        6,93,1,0,0,0,6,95,1,0,0,0,6,97,1,0,0,0,6,99,1,0,0,0,6,101,1,0,0,
        0,6,103,1,0,0,0,6,105,1,0,0,0,6,107,1,0,0,0,6,109,1,0,0,0,7,111,
        1,0,0,0,9,126,1,0,0,0,11,141,1,0,0,0,13,145,1,0,0,0,15,150,1,0,0,
        0,17,156,1,0,0,0,19,161,1,0,0,0,21,166,1,0,0,0,23,173,1,0,0,0,25,
        177,1,0,0,0,27,182,1,0,0,0,29,187,1,0,0,0,31,191,1,0,0,0,33,195,
        1,0,0,0,35,200,1,0,0,0,37,207,1,0,0,0,39,212,1,0,0,0,41,222,1,0,
        0,0,43,227,1,0,0,0,45,237,1,0,0,0,47,246,1,0,0,0,49,250,1,0,0,0,
        51,255,1,0,0,0,53,259,1,0,0,0,55,268,1,0,0,0,57,273,1,0,0,0,59,279,
        1,0,0,0,61,283,1,0,0,0,63,285,1,0,0,0,65,287,1,0,0,0,67,289,1,0,
        0,0,69,291,1,0,0,0,71,293,1,0,0,0,73,295,1,0,0,0,75,299,1,0,0,0,
        77,301,1,0,0,0,79,304,1,0,0,0,81,307,1,0,0,0,83,310,1,0,0,0,85,313,
        1,0,0,0,87,316,1,0,0,0,89,319,1,0,0,0,91,323,1,0,0,0,93,327,1,0,
        0,0,95,330,1,0,0,0,97,334,1,0,0,0,99,339,1,0,0,0,101,346,1,0,0,0,
        103,351,1,0,0,0,105,377,1,0,0,0,107,379,1,0,0,0,109,383,1,0,0,0,
        111,112,5,60,0,0,112,113,5,33,0,0,113,114,5,45,0,0,114,115,5,45,
        0,0,115,119,1,0,0,0,116,118,9,0,0,0,117,116,1,0,0,0,118,121,1,0,
        0,0,119,120,1,0,0,0,119,117,1,0,0,0,120,122,1,0,0,0,121,119,1,0,
        0,0,122,123,5,45,0,0,123,124,5,45,0,0,124,125,5,62,0,0,125,8,1,0,
        0,0,126,127,5,60,0,0,127,128,5,33,0,0,128,129,5,62,0,0,129,133,1,
        0,0,0,130,132,9,0,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,134,1,
        0,0,0,133,131,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,
        60,0,0,137,138,5,33,0,0,138,139,5,47,0,0,139,140,5,62,0,0,140,10,
        1,0,0,0,141,142,5,60,0,0,142,143,5,47,0,0,143,144,5,62,0,0,144,12,
        1,0,0,0,145,146,5,60,0,0,146,147,5,33,0,0,147,148,1,0,0,0,148,149,
        6,3,0,0,149,14,1,0,0,0,150,151,5,60,0,0,151,152,5,36,0,0,152,153,
        1,0,0,0,153,154,6,4,1,0,154,155,6,4,1,0,155,16,1,0,0,0,156,157,5,
        60,0,0,157,158,1,0,0,0,158,159,6,5,2,0,159,18,1,0,0,0,160,162,8,
        0,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,
        0,0,0,164,20,1,0,0,0,165,167,7,1,0,0,166,165,1,0,0,0,167,168,1,0,
        0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,171,6,7,
        3,0,171,172,6,7,4,0,172,22,1,0,0,0,173,174,5,62,0,0,174,175,1,0,
        0,0,175,176,6,8,3,0,176,24,1,0,0,0,177,178,5,47,0,0,178,179,5,62,
        0,0,179,180,1,0,0,0,180,181,6,9,3,0,181,26,1,0,0,0,182,183,5,61,
        0,0,183,184,1,0,0,0,184,185,6,10,1,0,185,28,1,0,0,0,186,188,7,1,
        0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,
        0,0,190,30,1,0,0,0,191,192,7,2,0,0,192,193,1,0,0,0,193,194,6,12,
        5,0,194,32,1,0,0,0,195,196,5,105,0,0,196,197,5,102,0,0,197,198,1,
        0,0,0,198,199,6,13,1,0,199,34,1,0,0,0,200,201,5,101,0,0,201,202,
        5,108,0,0,202,203,5,105,0,0,203,204,5,102,0,0,204,205,1,0,0,0,205,
        206,6,14,1,0,206,36,1,0,0,0,207,208,5,101,0,0,208,209,5,108,0,0,
        209,210,5,115,0,0,210,211,5,101,0,0,211,38,1,0,0,0,212,213,5,102,
        0,0,213,214,5,111,0,0,214,215,5,114,0,0,215,216,5,101,0,0,216,217,
        5,97,0,0,217,218,5,99,0,0,218,219,5,104,0,0,219,220,1,0,0,0,220,
        221,6,16,6,0,221,40,1,0,0,0,222,223,5,105,0,0,223,224,5,110,0,0,
        224,225,1,0,0,0,225,226,6,17,1,0,226,42,1,0,0,0,227,228,5,105,0,
        0,228,229,5,110,0,0,229,230,5,99,0,0,230,231,5,108,0,0,231,232,5,
        117,0,0,232,233,5,100,0,0,233,234,5,101,0,0,234,235,1,0,0,0,235,
        236,6,18,1,0,236,44,1,0,0,0,237,238,5,105,0,0,238,239,5,110,0,0,
        239,240,5,115,0,0,240,241,5,101,0,0,241,242,5,114,0,0,242,243,5,
        116,0,0,243,244,1,0,0,0,244,245,6,19,7,0,245,46,1,0,0,0,246,247,
        5,62,0,0,247,248,1,0,0,0,248,249,6,20,3,0,249,48,1,0,0,0,250,251,
        5,47,0,0,251,252,5,62,0,0,252,253,1,0,0,0,253,254,6,21,3,0,254,50,
        1,0,0,0,255,256,7,2,0,0,256,257,1,0,0,0,257,258,6,22,5,0,258,52,
        1,0,0,0,259,263,7,3,0,0,260,262,7,4,0,0,261,260,1,0,0,0,262,265,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,
        1,0,0,0,266,267,6,23,3,0,267,54,1,0,0,0,268,269,7,2,0,0,269,270,
        1,0,0,0,270,271,6,24,5,0,271,56,1,0,0,0,272,274,7,1,0,0,273,272,
        1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,
        1,0,0,0,277,278,6,25,3,0,278,58,1,0,0,0,279,280,7,2,0,0,280,281,
        1,0,0,0,281,282,6,26,5,0,282,60,1,0,0,0,283,284,5,40,0,0,284,62,
        1,0,0,0,285,286,5,41,0,0,286,64,1,0,0,0,287,288,5,43,0,0,288,66,
        1,0,0,0,289,290,5,45,0,0,290,68,1,0,0,0,291,292,5,42,0,0,292,70,
        1,0,0,0,293,294,5,47,0,0,294,72,1,0,0,0,295,296,5,109,0,0,296,297,
        5,111,0,0,297,298,5,100,0,0,298,74,1,0,0,0,299,300,5,46,0,0,300,
        76,1,0,0,0,301,302,5,61,0,0,302,303,5,61,0,0,303,78,1,0,0,0,304,
        305,5,33,0,0,305,306,5,61,0,0,306,80,1,0,0,0,307,308,5,60,0,0,308,
        309,5,60,0,0,309,82,1,0,0,0,310,311,5,62,0,0,311,312,5,62,0,0,312,
        84,1,0,0,0,313,314,5,60,0,0,314,315,5,61,0,0,315,86,1,0,0,0,316,
        317,5,62,0,0,317,318,5,61,0,0,318,88,1,0,0,0,319,320,5,110,0,0,320,
        321,5,111,0,0,321,322,5,116,0,0,322,90,1,0,0,0,323,324,5,97,0,0,
        324,325,5,110,0,0,325,326,5,100,0,0,326,92,1,0,0,0,327,328,5,111,
        0,0,328,329,5,114,0,0,329,94,1,0,0,0,330,331,5,59,0,0,331,332,1,
        0,0,0,332,333,6,44,3,0,333,96,1,0,0,0,334,335,5,62,0,0,335,336,1,
        0,0,0,336,337,6,45,3,0,337,338,6,45,3,0,338,98,1,0,0,0,339,340,5,
        47,0,0,340,341,5,62,0,0,341,342,1,0,0,0,342,343,6,46,3,0,343,344,
        6,46,3,0,344,100,1,0,0,0,345,347,7,5,0,0,346,345,1,0,0,0,347,348,
        1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,102,1,0,0,0,350,352,
        7,5,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,1,0,0,0,353,354,
        1,0,0,0,354,355,1,0,0,0,355,357,5,46,0,0,356,358,7,5,0,0,357,356,
        1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,104,
        1,0,0,0,361,365,5,34,0,0,362,364,8,6,0,0,363,362,1,0,0,0,364,367,
        1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,
        1,0,0,0,368,378,5,34,0,0,369,373,5,39,0,0,370,372,8,7,0,0,371,370,
        1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,
        1,0,0,0,375,373,1,0,0,0,376,378,5,39,0,0,377,361,1,0,0,0,377,369,
        1,0,0,0,378,106,1,0,0,0,379,380,7,2,0,0,380,381,1,0,0,0,381,382,
        6,50,5,0,382,108,1,0,0,0,383,387,7,3,0,0,384,386,7,4,0,0,385,384,
        1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,110,
        1,0,0,0,389,387,1,0,0,0,21,0,1,2,3,4,5,6,119,133,163,168,189,263,
        275,348,353,359,365,373,377,387,8,5,3,0,5,6,0,5,1,0,4,0,0,5,2,0,
        6,0,0,5,4,0,5,5,0
    ]

class DurakLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ON_TAG = 1
    IN_TAG = 2
    IN_DIRECTIVE = 3
    IN_DIRECTIVE_FOREACH_IDENTIFIER = 4
    IN_DIRECTIVE_INSERT_IDENTIFIER = 5
    IN_EXPR = 6

    COMMENT = 1
    VERBATIM = 2
    CLOSING_TAG = 3
    DIRECTIVE_OPEN = 4
    INJECTION_OPEN = 5
    TAG_OPEN = 6
    TEXT = 7
    TAG_NAME = 8
    TAG_END = 9
    TAG_CLOSE = 10
    TAG_EQ = 11
    TAG_ATTRIBUTE_NAME = 12
    TAG_WS = 13
    DIRECTIVE_IF = 14
    DIRECTIVE_ELIF = 15
    DIRECTIVE_ELSE = 16
    DIRECTIVE_FOREACH = 17
    DIRECTIVE_IN = 18
    DIRECTIVE_INCLUDE = 19
    DIRECTIVE_INSERT = 20
    DIRECTIVE_END = 21
    DIRECTIVE_CLOSE = 22
    DIRECTIVE_WS = 23
    DIRECTIVE_FOREACH_IDENTIFIER = 24
    DIRECTIVE_FOREACH_WS = 25
    DIRECTIVE_INSERT_IDENTIFIER = 26
    DIRECTIVE_INSERT_WS = 27
    EXPR_LPAREN = 28
    EXPR_RPAREN = 29
    EXPR_PLUS = 30
    EXPR_MINUS = 31
    EXPR_STAR = 32
    EXPR_SLASH = 33
    EXPR_MOD = 34
    EXPR_DOT = 35
    EXPR_EQEQ = 36
    EXPR_NEQ = 37
    EXPR_LT = 38
    EXPR_GT = 39
    EXPR_LE = 40
    EXPR_GE = 41
    EXPR_NOT = 42
    EXPR_AND = 43
    EXPR_OR = 44
    EXPR_COLON = 45
    EXPR_TAG_END = 46
    EXPR_TAG_CLOSE = 47
    EXPR_INT_LITERAL = 48
    EXPR_FLOAT_LITERAL = 49
    EXPR_STRING_LITERAL = 50
    EXPR_WS = 51
    EXPR_IDENT = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "ON_TAG", "IN_TAG", "IN_DIRECTIVE", "IN_DIRECTIVE_FOREACH_IDENTIFIER", 
                  "IN_DIRECTIVE_INSERT_IDENTIFIER", "IN_EXPR" ]

    literalNames = [ "<INVALID>",
            "'</>'", "'<!'", "'<'", "'='", "'if'", "'elif'", "'else'", "'foreach'", 
            "'in'", "'include'", "'insert'", "'('", "')'", "'+'", "'-'", 
            "'*'", "'/'", "'mod'", "'.'", "'=='", "'!='", "'<<'", "'>>'", 
            "'<='", "'>='", "'not'", "'and'", "'or'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "VERBATIM", "CLOSING_TAG", "DIRECTIVE_OPEN", "INJECTION_OPEN", 
            "TAG_OPEN", "TEXT", "TAG_NAME", "TAG_END", "TAG_CLOSE", "TAG_EQ", 
            "TAG_ATTRIBUTE_NAME", "TAG_WS", "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
            "DIRECTIVE_ELSE", "DIRECTIVE_FOREACH", "DIRECTIVE_IN", "DIRECTIVE_INCLUDE", 
            "DIRECTIVE_INSERT", "DIRECTIVE_END", "DIRECTIVE_CLOSE", "DIRECTIVE_WS", 
            "DIRECTIVE_FOREACH_IDENTIFIER", "DIRECTIVE_FOREACH_WS", "DIRECTIVE_INSERT_IDENTIFIER", 
            "DIRECTIVE_INSERT_WS", "EXPR_LPAREN", "EXPR_RPAREN", "EXPR_PLUS", 
            "EXPR_MINUS", "EXPR_STAR", "EXPR_SLASH", "EXPR_MOD", "EXPR_DOT", 
            "EXPR_EQEQ", "EXPR_NEQ", "EXPR_LT", "EXPR_GT", "EXPR_LE", "EXPR_GE", 
            "EXPR_NOT", "EXPR_AND", "EXPR_OR", "EXPR_COLON", "EXPR_TAG_END", 
            "EXPR_TAG_CLOSE", "EXPR_INT_LITERAL", "EXPR_FLOAT_LITERAL", 
            "EXPR_STRING_LITERAL", "EXPR_WS", "EXPR_IDENT" ]

    ruleNames = [ "COMMENT", "VERBATIM", "CLOSING_TAG", "DIRECTIVE_OPEN", 
                  "INJECTION_OPEN", "TAG_OPEN", "TEXT", "TAG_NAME", "TAG_END", 
                  "TAG_CLOSE", "TAG_EQ", "TAG_ATTRIBUTE_NAME", "TAG_WS", 
                  "DIRECTIVE_IF", "DIRECTIVE_ELIF", "DIRECTIVE_ELSE", "DIRECTIVE_FOREACH", 
                  "DIRECTIVE_IN", "DIRECTIVE_INCLUDE", "DIRECTIVE_INSERT", 
                  "DIRECTIVE_END", "DIRECTIVE_CLOSE", "DIRECTIVE_WS", "DIRECTIVE_FOREACH_IDENTIFIER", 
                  "DIRECTIVE_FOREACH_WS", "DIRECTIVE_INSERT_IDENTIFIER", 
                  "DIRECTIVE_INSERT_WS", "EXPR_LPAREN", "EXPR_RPAREN", "EXPR_PLUS", 
                  "EXPR_MINUS", "EXPR_STAR", "EXPR_SLASH", "EXPR_MOD", "EXPR_DOT", 
                  "EXPR_EQEQ", "EXPR_NEQ", "EXPR_LT", "EXPR_GT", "EXPR_LE", 
                  "EXPR_GE", "EXPR_NOT", "EXPR_AND", "EXPR_OR", "EXPR_COLON", 
                  "EXPR_TAG_END", "EXPR_TAG_CLOSE", "EXPR_INT_LITERAL", 
                  "EXPR_FLOAT_LITERAL", "EXPR_STRING_LITERAL", "EXPR_WS", 
                  "EXPR_IDENT" ]

    grammarFileName = "DurakLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


