# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['dash_mdc_neptune', 'dash_mdc_neptune.themes']

package_data = \
{'': ['*'], 'dash_mdc_neptune.themes': ['static/*']}

install_requires = \
['dash>=1.15.0,<2.0.0', 'matplotlib', 'werkzeug>=2.0,<2.1']

setup_kwargs = {
    'name': 'dash-mdc-neptune',
    'version': '0.1.9',
    'description': 'Dash Material Design components for the Neptune platform.',
    'long_description': '[![CircleCI](https://circleci.com/gh/noosenergy/dash-mdc-neptune.svg?style=svg&circle-token=0134ed9704956581fc9555a112f6ee9276a1c80a)](https://circleci.com/gh/noosenergy/dash-mdc-neptune)\n\n# Dash Material Design Components\n\n`dash-mdc-neptune` allows to build consistently styled dashboards with complex and reactive layouts, following Google\'s [Material Design](https://material.io/) principles.\n\nThe library leverages [MUI React](https://mui.com/) components for use with [Plotly Dash](https://dash.plotly.com/).\n\nThis project has been initially boostrapped thanks to the [Dash plugin cookiecutter](https://github.com/plotly/dash-component-boilerplate).\n\n## Quickstart\n\n### Installation\n\nThe python package is available from the [PyPi repository](https://pypi.org/project/dash-mdc-neptune),\n\n```sh\npip install dash-mdc-neptune\n```\n\n### Usage as a library\n\nOnce installed, start using the Python components exactly like you would use other [Dash component libraries](https://dash.plotly.com/layout),\n\n```python\nimport dash\n\nimport dash_mdc_neptune as mdc\n\n\n# Compose a dashboard layout\ntext = mdc.Typography(text="Content...", component="p", variant="body2")\n\nsection_1 = mdc.Section(\n    id="section-1",\n    orientation="columns",\n    children=[text, text_2],\n    cards=[{"title": "Card 1a", "size": 3}, {"title": "Card 1b"}]\n)\n\nsection_2 = mdc.Section(\n    id="section-2",\n    size=3,\n    children=[text, text_2],\n    orientation="rows",\n    cards=[{"title": "Card 2a", "size": 4}, {"title": "Card 2b"}]\n)\n\npage = mdc.Page(orientation="columns", children=[section_1, section_2])\nnavbar = mdc.NavBar(title="Custom dash")\n\nlayout = mdc.Dashboard(children=[navbar, page])\n\n# Instantiate a Dash app\napp = dash.Dash(__name__)\napp.layout = layout\n\nif __name__ == "__main__":\n    app.run_server()\n```\n\n### Usage in notebooks\n\nAs pre-requisite, install the Jupyter Lab extension [JupyterDash](https://medium.com/plotly/introducing-jupyterdash-811f1f57c02e),\n\n```shell\n~$ pip install jupyter-dash\n```\n\nThen, copy the Dash snippet above into a Jupyter notebook cell and replace the `Dash` class with the `JupyterDash` class:\n\n```python\nimport jupyter_dash\n\n# Instantiate a Dash app\napp = jupyter_dash.JupyterDash(__name__)\napp.layout = layout\n\napp.run_server(mode=\'jupyterlab\', host="0.0.0.0", port=8001)\n```\n\n## Local development\n\n### Structure for a Dash component project\n\n```markdown\n* project/\n  * python-package/             # The python package, output folder for the bundles.\n    * src/                      # The javascript source directory for the components.\n      * components/             # Where to put the react component classes.\n      * index.js                # The index for the components exported by the bundle.\n    * package.json              # JS package build commands.\n    * webpack.config.js         # The webpack configs used to generate the bundles.\n    * pyproject.toml            # Python package build commands.\n```\n\n### Install dependencies\n\nThe project is shipped with off-the-shelf scripts to manage node packages as well as a set of utilities for local development. If the `yarn` node package manager is installed globally, install all javascript dependencies,\n\n```shell\n~$ yarn install\n```\n\n> :warning: the Dash Neptune components has only been tested against Node.js v16.\n\nAnd thanks to `poetry` python package manager, create a virtual environnement,\n\n```shell\n~$ poetry install\n```\n\n### Write a new React component\n\nCompose your new Dash components in `src/components` and make sure the React components are exported in your package entrypoint `src/index.js`.\n\n```javascript\nimport NeptuneComponent from \'./components/NeptuneComponent.jsx\';\n\nexport {NeptuneComponent};\n```\n\n> :warning: the Dash Neptune components are currently using MUI v.4, with the aim to transitionning to MUI v.5 shortly.\n\nThe corresponding Python component API is auto-discovered from the React component declared `Props`, while the component Python docstring are automatically generated from the `Props` React docstrings.\n\n```javascript\n/** Used to auto-generate the Python component and docstrings */\nexport default class NeptuneComponent extends Component {\n  render() {\n    const {text} = this.props;\n\n    return <div>\n             <p>{text}</p>\n           </div>;\n  }\n}\n\nBox.defaultProps = {\n  text: \'Sample value\',\n};\n\nBox.propTypes = {\n  /** Used to auto-generate the Python component and docstrings */\n  text: PropTypes.string,\n};\n```\n\n> :heavy_exclamation_mark: Be careful to use the correct formatting for your docstrings for them to be properly recognized.\n\n### Create a production build\n\nOnce your components have been included into your package entrypoint, run:\n\n* `yarn build:js`, to generate the JavaScript bundle `dash_mdc_neptune.js`\n* `yarn build:py`, to generate the Python class files for the components.\n* `yarn build`, to generate everything: the JavaScript bundles and the Python class files.\n\nIn addition to buikld scripts, the project `package.json` offers linter, formatter and hot-reloader:\n\n* `yarn format`, to auto-format the React component code.\n* `yarn lint`, to check bundle compliance with ECMA standards.\n* `yarn watch`, to watch the library source directory and rebuild the JavaScript bundle.\n\n### Further reading\n\nIncluded below, few resources on how to extend the Dash component library:\n\n* [basics on React](https://dash.plotly.com/react-for-python-developers)\n* [background on Dash components](https://dash.plotly.com/plugins)\n* [community-maintained component libraries](https://plotly.com/dash-community-components)\n',
    'author': 'Noos Energy',
    'author_email': 'contact@noos.energy',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/noosenergy/dash-mdc-neptune',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
