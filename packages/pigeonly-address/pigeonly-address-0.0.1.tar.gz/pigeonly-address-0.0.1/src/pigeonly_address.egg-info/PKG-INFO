Metadata-Version: 2.1
Name: pigeonly-address
Version: 0.0.1
Summary: Address Standardization
Author-email: Peter Flynn <peterflynn@pigeon.ly>
License: MIT License
        
        Copyright (c) 2022 Pigeonly
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://gitlab.pigeon.ly/pflynn/pigeonly-address
Keywords: address
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

# Pigeonly Address

For standardizing addresses.

For more information on USPS API keys and terms, see [here](https://www.usps.com/business/web-tools-apis/)
### Installation

`pip install pigeonly-address`

#### Example Usage

```python

from pigeonly_address import AddressService, StandardizeAddressError

# Example usage
try:
    address = {
        "name": "aj patel",
        "line_one": "5 reynolds",
        "line_two": "#3",
        "city": "New bedford",
        "governing_district": "MA",
        "postal_code": "02744",
        "country": "USA"
    }
    standardized_addr = AddressService("USPS_API_KEY").standardize_address(**address)
    print(standardized_addr)
    # Example success
    # {   
    #     "name": "AJ PATEL",
    #     "line_one": "5 REYNOLDS ST",
    #     "line_two": "APT 3",
    #     "city": "NEW BEDFORD",
    #     "governing_district": "MA",
    #     "postal_code": "02740",
    #     "country": "US",
    #     "meta": None
    # }
    # ------------------------------------------
    # A `meta` field is also returned.
    # Usually meta is None.
    # But sometimes, like if an address is correct,
    # but the address apt # is not verified,
    # a message returns => meta["message"]
    meta = standardized_addr.pop("meta")
    if meta and meta.get("message"):
        print(meta["message"])
    

except StandardizeAddressError as e:
    # Example str(e) == "Address Not Found"
    print(e)
```

# USPS Docs

For US Addresses, it uses the USPS API when possible.

- [USPS Address Docs](https://www.usps.com/business/web-tools-apis/address-information-api.htm#)
- [USPS Docs HOME](https://www.usps.com/business/web-tools-apis/documentation-updates.htm)
