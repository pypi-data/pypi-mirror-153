# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pyvjoystick',
 'pyvjoystick.vigem',
 'pyvjoystick.vigem.client',
 'pyvjoystick.vigem.client.x64',
 'pyvjoystick.vigem.client.x86',
 'pyvjoystick.vjoy']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'pyvjoystick',
    'version': '1.1.2.1',
    'description': 'Python bindings for vJoy',
    'long_description': '# pyvjoystick\n\npyvjoystick is a set of python binding for different virtual devices. Currently [vJoy](https://sourceforge.net/projects/vjoystick/) and [ViGEm](https://github.com/ViGEm) are supported.\n\n<a href=\'https://sourceforge.net/projects/vjoystick/\'>vJoy</a>(on github from <a href=\'https://github.com/jshafer817/vJoy\'>jshafer817</a> and <a href=\'https://github.com/njz3/vJoy/\'>njz3</a>). The implementation of vjoy bindings are inspired on <a href="https://github.com/tidzo/pyvjoy">pyvjoy</a>\'s package.\n\n\n<a href=\'https://github.com/ViGEm\'>ViGEm</a> bindings are inspired on <a href="https://github.com/yannbouteiller/vgamepad">vgamepad</a>\'s package.\n\n## Requirements\n\nTo be able to use vJoy device install vJoy from <a href=\'https://sourceforge.net/projects/vjoystick/\'>sourceforge</a> or <a href=\'https://github.com/njz3/vJoy/\'>github</a>. It is recommended to also install the vJoy Monitor and Configure vJoy programs. These should be an option during installation.\n\nTo be able to use ViGem device install [release](https://github.com/ViGEm/ViGEmBus). This package ships with a ViGemClient binaries.\n\n\n### Installation\n\nSimple! This package is installable by pip\n\n`pip install pyvjoystick`\n\n\n## Usage\n\n### vJoy example\n\nWith this library you can easily set Axis and Button values on any vJoy device. Low-level bindings are provided in `pyvjoy._sdk`.\n\n```python\nfrom pyvjoystick import vjoy\n\n# Pythonic API, item-at-a-time\nj = vjoy.VJoyDevice(1)\n\n# turn button number 15 on\nj.set_button(15, 1)\n\n# Notice the args are (buttonID,state) whereas vJoy\'s native API is the other way around.\n\n\n# turn button 15 off again\nj.set_button(15, 0)\n\n# Set X axis to fully left\nj.set_axis(vjoy.HID_USAGE.X, 0x1)\n\n# Set X axis to fully right\nj.set_axis(vjoy.HID_USAGE.X, 0x8000)\n\n# Also implemented:\n\nj.reset()\nj.reset_buttons()\nj.reset_povs()\n\n\n# The \'efficient\' method as described in vJoy\'s docs - set multiple values at once\n\nprint(j._data)\n# >> > <pyvjoystick.vjoy._sdk._JOYSTICK_POSITION_V2 at 0x.... >\n\n\nj._data.lButtons = 19  # buttons number 1,2 and 5 (1+2+16)\nj._data.wAxisX = 0x2000\nj._data.wAxisY = 0x7500\n\n# send data to vJoy device\nj.update()\n\n\n# Lower-level API just wraps the functions in the DLL as thinly as possible, with some attempt to raise exceptions instead of return codes.\n```\n\n### XBox360 gamepad\n\nThe following python script creates a virtual XBox360 gamepad:\n\n```python\nfrom pyvjoystick import vigem as vg\n\ngamepad = vg.VX360Gamepad()\n```\n\nAs soon as the ```VX360Gamepad``` object is created, the virtual gamepad is connected to your system via the ViGEmBus driver, and will remain connected until the object is destroyed.\n\nButtons can be pressed and released through ```press_button``` and ```release_button```:\n\n```python\ngamepad.press_button(button=vg.XUSB_BUTTON.XUSB_GAMEPAD_A)  # press the A button\ngamepad.press_button(button=vg.XUSB_BUTTON.XUSB_GAMEPAD_DPAD_LEFT)  # press the left hat button\n\ngamepad.update()  # send the updated state to the computer\n\n# (...) A and left hat are pressed...\n\ngamepad.release_button(button=vg.XUSB_BUTTON.XUSB_GAMEPAD_A)  # release the A button\n\ngamepad.update()  # send the updated state to the computer\n\n# (...) left hat is still pressed...\n```\n\nAll available buttons are defined in ```XUSB_BUTTON```\n\nTo control the triggers (1 axis each) and the joysticks (2 axis each), two options are provided by the API.\n\nIt is possible to input raw integer values directly:\n```python\ngamepad.left_trigger(value=100)  # value between 0 and 255\ngamepad.right_trigger(value=255)  # value between 0 and 255\ngamepad.left_joystick(x_value=-10000, y_value=0)  # values between -32768 and 32767\ngamepad.right_joystick(x_value=-32768, y_value=15000)  # values between -32768 and 32767\n\ngamepad.update()\n```\n\nOr to input float values:\n```python\ngamepad.left_trigger_float(value_float=0.5)  # value between 0.0 and 1.0\ngamepad.right_trigger_float(value_float=1.0)  # value between 0.0 and 1.0\ngamepad.left_joystick_float(x_value_float=-0.5, y_value_float=0.0)  # values between -1.0 and 1.0\ngamepad.right_joystick_float(x_value_float=-1.0, y_value_float=0.8)  # values between -1.0 and 1.0\n\ngamepad.update()\n```\n\nReset to default state:\n```python\ngamepad.reset()\n\ngamepad.update()\n```\n\n### DualShock4 gamepad\n\nUsing a virtual DS4 gamepad is similar to X360:\n```python\nfrom pyvjoystick import vigem as vg\n\ngamepad = vg.VDS4Gamepad()\n```\n\nPress and release buttons:\n```python\ngamepad.press_button(button=vg.DS4_BUTTONS.DS4_BUTTON_TRIANGLE)\ngamepad.update()\n\n# (...)\n\ngamepad.release_button(button=vg.DS4_BUTTONS.DS4_BUTTON_TRIANGLE)\ngamepad.update()\n```\n\nAvailable buttons are defined in ```DS4_BUTTONS```\n\nPress and release special buttons:\n```python\ngamepad.press_special_button(special_button=vg.DS4_SPECIAL_BUTTONS.DS4_SPECIAL_BUTTON_PS)\ngamepad.update()\n\n# (...)\n\ngamepad.release_special_button(special_button=vg.DS4_SPECIAL_BUTTONS.DS4_SPECIAL_BUTTON_PS)\ngamepad.update()\n```\n\nSpecial buttons are defined in ```DS4_SPECIAL_BUTTONS```\n\nTriggers and joysticks (integer values):\n```python\ngamepad.left_trigger(value=100)  # value between 0 and 255\ngamepad.right_trigger(value=255)  # value between 0 and 255\ngamepad.left_joystick(x_value=0, y_value=128)  # value between 0 and 255\ngamepad.right_joystick(x_value=0, y_value=255)  # value between 0 and 255\n\ngamepad.update()\n```\n\nTriggers and joysticks (float values):\n```python\ngamepad.left_trigger_float(value_float=0.5)  # value between 0.0 and 1.0\ngamepad.right_trigger_float(value_float=1.0)  # value between 0.0 and 1.0\ngamepad.left_joystick_float(x_value_float=-0.5, y_value_float=0.0)  # values between -1.0 and 1.0\ngamepad.right_joystick_float(x_value_float=-1.0, y_value_float=0.8)  # values between -1.0 and 1.0\n\ngamepad.update()\n```\n\n* **Note:** The Y axis on joysticks is inverted for consistency with the X360 API.\n\nDirectional pad (hat):\n```python\ngamepad.directional_pad(direction=vg.DS4_DPAD_DIRECTIONS.DS4_BUTTON_DPAD_NORTHWEST)\ngamepad.update()\n```\n\nDirections for the directional pad are defined in ```DS4_DPAD_DIRECTIONS```\n\nReset to default state:\n```python\ngamepad.reset()\n\ngamepad.update()\n```',
    'author': 'fsadannn',
    'author_email': 'fsadannn@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/fsadannn/pyvjoystick',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.8,<4',
}


setup(**setup_kwargs)
