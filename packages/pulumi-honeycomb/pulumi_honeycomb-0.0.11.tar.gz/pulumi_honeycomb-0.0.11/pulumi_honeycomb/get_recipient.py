# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRecipientResult',
    'AwaitableGetRecipientResult',
    'get_recipient',
    'get_recipient_output',
]

@pulumi.output_type
class GetRecipientResult:
    """
    A collection of values returned by GetRecipient.
    """
    def __init__(__self__, dataset=None, id=None, target=None, type=None):
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetRecipientResult(GetRecipientResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecipientResult(
            dataset=self.dataset,
            id=self.id,
            target=self.target,
            type=self.type)


def get_recipient(dataset: Optional[str] = None,
                  target: Optional[str] = None,
                  type: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecipientResult:
    """
    ## # Data Source: _get_recipient

    Search the triggers or burn alerts of a dataset for a recipient. The ID of the existing recipient can be used when adding recipients to new triggers or burn alerts.


    :param str dataset: The dataset this recipient is associated with.
    :param str target: Target of the trigger or burn alert, this has another meaning depending on the type of recipient (see the table below).
    :param str type: The type of recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`.
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['target'] = target
    __args__['type'] = type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getRecipient:GetRecipient', __args__, opts=opts, typ=GetRecipientResult).value

    return AwaitableGetRecipientResult(
        dataset=__ret__.dataset,
        id=__ret__.id,
        target=__ret__.target,
        type=__ret__.type)


@_utilities.lift_output_func(get_recipient)
def get_recipient_output(dataset: Optional[pulumi.Input[str]] = None,
                         target: Optional[pulumi.Input[Optional[str]]] = None,
                         type: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRecipientResult]:
    """
    ## # Data Source: _get_recipient

    Search the triggers or burn alerts of a dataset for a recipient. The ID of the existing recipient can be used when adding recipients to new triggers or burn alerts.


    :param str dataset: The dataset this recipient is associated with.
    :param str target: Target of the trigger or burn alert, this has another meaning depending on the type of recipient (see the table below).
    :param str type: The type of recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`.
    """
    ...
