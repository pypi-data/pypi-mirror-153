dist: xenial
language: python

services:
  - docker

jobs:
  include:
    - stage: conventional_commit_check
      language: node_js
      node_js: 16
      install: skip
      before_script:
        - npm install -g @commitlint/cli @commitlint/config-conventional
      script:
        - commitlint --from=HEAD~1
      if: type = pull_request
    - stage: build
      install: skip
      script:
        - pip install -r requirements.txt
      if: (branch = master) OR (branch = develop) OR (type = pull_request)
      cache:
        directories:
          - .cache/
          - .venv/
    - stage: unit_test
      before_script:
        - pip install pytest
        - pip install mock
        - pip install requests
      script:
        - pytest test/unit_test.py
      if: (branch = master) OR (branch = develop) OR (type = pull_request)
      cache:
        directories:
          - .cache/
          - .venv/
    - stage: integration_test
      before_script:
        - pip install pytest
        - pip install requests
      script:
        - docker-compose up -d
        - pytest test/integration_test.py
        - docker-compose down
      if: (branch = master) OR (branch = develop) OR (type = pull_request)
      cache:
        directories:
          - .cache/
          - .venv/
    - stage: artifact_deploy
      install: skip
      before_script:
        - pip install python-semantic-release==7.28.1
      script:
        - if [[ $TRAVIS_BRANCH == "master" ]]; then semantic-release publish; fi
        - if [[ $TRAVIS_BRANCH == "develop" ]]; then semantic-release publish -D branch=develop; fi
      if: (branch = master and type != pull_request) OR (branch = develop and type != pull_request)
    - stage: docker_deploy
      install: skip
      before_script:
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        - pip install python-semantic-release==7.28.1
        - version=$(semantic-release print-version)
      script:
        - if [[ $version != "" ]]; then docker build -t draganagrbic/devops_agent_service_project_2022:latest .; fi
        - if [[ $version != "" ]]; then docker push draganagrbic/devops_agent_service_project_2022:latest; fi
        - if [[ $version != "" ]]; then docker tag draganagrbic/devops_agent_service_project_2022:latest draganagrbic/devops_agent_service_project_2022:$version; fi
        - if [[ $version != "" ]]; then docker push draganagrbic/devops_agent_service_project_2022:$version; fi
      if: (branch = master and type != pull_request) OR (branch = develop and type != pull_request)
    - stage: terraform_apply_develop
      env:
        - HEROKU_EMAIL=$HEROKU_EMAIL_TEST
        - HEROKU_API_KEY=$HEROKU_API_KEY_TEST
        - tf_version=1.2.2 tf_init_cli_options="-input=false" tf_validation_cli_options="" tf_plan_cli_options="-lock=false -input=false" tf_apply_cli_options="-auto-approve -input=false"

      install: skip
      before_script:
        - wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        - unzip terraform_"$tf_version"_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - rm terraform_"$tf_version"_linux_amd64.zip
        - cd deployment/terraform
      script:
        - terraform init $tf_init_cli_options -backend-config="conn_str=$DATABASE_URL_TEST"
        - terraform destroy -auto-approve -var agent_app_name="devops-agent-service-test"
        - terraform apply $tf_apply_cli_options -var agent_app_name="devops-agent-service-test"
      if: type = push and branch = develop
    - stage: terraform_apply_master
      env:
        - HEROKU_EMAIL=$HEROKU_EMAIL_PROD
        - HEROKU_API_KEY=$HEROKU_API_KEY_PROD
        - tf_version=1.2.2 tf_init_cli_options="-input=false" tf_validation_cli_options="" tf_plan_cli_options="-lock=false -input=false" tf_apply_cli_options="-auto-approve -input=false"

      install: skip
      before_script:
        - wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        - unzip terraform_"$tf_version"_linux_amd64.zip
        - sudo mv terraform /usr/local/bin/
        - rm terraform_"$tf_version"_linux_amd64.zip
        - cd deployment/terraform
      script:
        - terraform init $tf_init_cli_options -backend-config="conn_str=$DATABASE_URL_PROD"
        - terraform destroy -auto-approve -var agent_app_name="devops-agent-service-prod"
        - terraform apply $tf_apply_cli_options -var agent_app_name="devops-agent-service-prod"
      if: type = push and branch = master