"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from onshape_client.oas.exceptions import ApiAttributeError


def lazy_import():
    from onshape_client.oas.model.bt_assembly_instance947_all_of import BTAssemblyInstance947AllOf
    from onshape_client.oas.model.bt_element_library_purpose3353 import BTElementLibraryPurpose3353
    from onshape_client.oas.model.bt_parameter_spec_reference2789 import BTParameterSpecReference2789
    from onshape_client.oas.model.bt_parameter_spec_reference_cad_import1792 import BTParameterSpecReferenceCADImport1792
    from onshape_client.oas.model.bt_parameter_spec_reference_image1722 import BTParameterSpecReferenceImage1722
    from onshape_client.oas.model.bt_parameter_spec_reference_json1816 import BTParameterSpecReferenceJSON1816
    from onshape_client.oas.model.bt_parameter_spec_reference_table1520 import BTParameterSpecReferenceTable1520
    from onshape_client.oas.model.bt_parameter_visibility_condition177 import BTParameterVisibilityCondition177
    from onshape_client.oas.model.btm_parameter1 import BTMParameter1
    globals()['BTAssemblyInstance947AllOf'] = BTAssemblyInstance947AllOf
    globals()['BTElementLibraryPurpose3353'] = BTElementLibraryPurpose3353
    globals()['BTMParameter1'] = BTMParameter1
    globals()['BTParameterSpecReference2789'] = BTParameterSpecReference2789
    globals()['BTParameterSpecReferenceCADImport1792'] = BTParameterSpecReferenceCADImport1792
    globals()['BTParameterSpecReferenceImage1722'] = BTParameterSpecReferenceImage1722
    globals()['BTParameterSpecReferenceJSON1816'] = BTParameterSpecReferenceJSON1816
    globals()['BTParameterSpecReferenceTable1520'] = BTParameterSpecReferenceTable1520
    globals()['BTParameterVisibilityCondition177'] = BTParameterVisibilityCondition177


class BTParameterSpecReferenceBlob1367(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('ui_hints',): {
            'OPPOSITE_DIRECTION': "OPPOSITE_DIRECTION",
            'ALWAYS_HIDDEN': "ALWAYS_HIDDEN",
            'SHOW_CREATE_SELECTION': "SHOW_CREATE_SELECTION",
            'CONTROL_VISIBILITY': "CONTROL_VISIBILITY",
            'NO_PREVIEW_PROVIDED': "NO_PREVIEW_PROVIDED",
            'REMEMBER_PREVIOUS_VALUE': "REMEMBER_PREVIOUS_VALUE",
            'DISPLAY_SHORT': "DISPLAY_SHORT",
            'ALLOW_FEATURE_SELECTION': "ALLOW_FEATURE_SELECTION",
            'MATE_CONNECTOR_AXIS_TYPE': "MATE_CONNECTOR_AXIS_TYPE",
            'PRIMARY_AXIS': "PRIMARY_AXIS",
            'SHOW_EXPRESSION': "SHOW_EXPRESSION",
            'OPPOSITE_DIRECTION_CIRCULAR': "OPPOSITE_DIRECTION_CIRCULAR",
            'SHOW_LABEL': "SHOW_LABEL",
            'HORIZONTAL_ENUM': "HORIZONTAL_ENUM",
            'UNCONFIGURABLE': "UNCONFIGURABLE",
            'MATCH_LAST_ARRAY_ITEM': "MATCH_LAST_ARRAY_ITEM",
            'COLLAPSE_ARRAY_ITEMS': "COLLAPSE_ARRAY_ITEMS",
            'INITIAL_FOCUS_ON_EDIT': "INITIAL_FOCUS_ON_EDIT",
            'INITIAL_FOCUS': "INITIAL_FOCUS",
            'DISPLAY_CURRENT_VALUE_ONLY': "DISPLAY_CURRENT_VALUE_ONLY",
            'READ_ONLY': "READ_ONLY",
            'PREVENT_CREATING_NEW_MATE_CONNECTORS': "PREVENT_CREATING_NEW_MATE_CONNECTORS",
            'FIRST_IN_ROW': "FIRST_IN_ROW",
            'ALLOW_QUERY_ORDER': "ALLOW_QUERY_ORDER",
            'PREVENT_ARRAY_REORDER': "PREVENT_ARRAY_REORDER",
            'VARIABLE_NAME': "VARIABLE_NAME",
            'FOCUS_INNER_QUERY': "FOCUS_INNER_QUERY",
            'UNKNOWN': "UNKNOWN",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'bt_type': (str,),  # noqa: E501
            'additional_localized_strings': (int,),  # noqa: E501
            'column_name': (str,),  # noqa: E501
            'default_value': (BTMParameter1,),  # noqa: E501
            'icon_uri': (str,),  # noqa: E501
            'localizable_name': (str,),  # noqa: E501
            'localized_name': (str,),  # noqa: E501
            'parameter_description': (str,),  # noqa: E501
            'parameter_id': (str,),  # noqa: E501
            'parameter_name': (str,),  # noqa: E501
            'strings_to_localize': ([str],),  # noqa: E501
            'ui_hint': (str,),  # noqa: E501
            'ui_hints': ([str],),  # noqa: E501
            'visibility_condition': (BTParameterVisibilityCondition177,),  # noqa: E501
            'default_purpose': (BTElementLibraryPurpose3353,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'BTParameterSpecReferenceCADImport-1792': BTParameterSpecReferenceCADImport1792,
            'BTParameterSpecReferenceImage-1722': BTParameterSpecReferenceImage1722,
            'BTParameterSpecReferenceJSON-1816': BTParameterSpecReferenceJSON1816,
            'BTParameterSpecReferenceTable-1520': BTParameterSpecReferenceTable1520,
        }
        if not val:
            return None
        return {'bt_type': val}

    attribute_map = {
        'bt_type': 'btType',  # noqa: E501
        'additional_localized_strings': 'additionalLocalizedStrings',  # noqa: E501
        'column_name': 'columnName',  # noqa: E501
        'default_value': 'defaultValue',  # noqa: E501
        'icon_uri': 'iconUri',  # noqa: E501
        'localizable_name': 'localizableName',  # noqa: E501
        'localized_name': 'localizedName',  # noqa: E501
        'parameter_description': 'parameterDescription',  # noqa: E501
        'parameter_id': 'parameterId',  # noqa: E501
        'parameter_name': 'parameterName',  # noqa: E501
        'strings_to_localize': 'stringsToLocalize',  # noqa: E501
        'ui_hint': 'uiHint',  # noqa: E501
        'ui_hints': 'uiHints',  # noqa: E501
        'visibility_condition': 'visibilityCondition',  # noqa: E501
        'default_purpose': 'defaultPurpose',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """BTParameterSpecReferenceBlob1367 - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bt_type (str): [optional]  # noqa: E501
            additional_localized_strings (int): [optional]  # noqa: E501
            column_name (str): [optional]  # noqa: E501
            default_value (BTMParameter1): [optional]  # noqa: E501
            icon_uri (str): [optional]  # noqa: E501
            localizable_name (str): [optional]  # noqa: E501
            localized_name (str): [optional]  # noqa: E501
            parameter_description (str): [optional]  # noqa: E501
            parameter_id (str): [optional]  # noqa: E501
            parameter_name (str): [optional]  # noqa: E501
            strings_to_localize ([str]): [optional]  # noqa: E501
            ui_hint (str): [optional]  # noqa: E501
            ui_hints ([str]): [optional]  # noqa: E501
            visibility_condition (BTParameterVisibilityCondition177): [optional]  # noqa: E501
            default_purpose (BTElementLibraryPurpose3353): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """BTParameterSpecReferenceBlob1367 - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bt_type (str): [optional]  # noqa: E501
            additional_localized_strings (int): [optional]  # noqa: E501
            column_name (str): [optional]  # noqa: E501
            default_value (BTMParameter1): [optional]  # noqa: E501
            icon_uri (str): [optional]  # noqa: E501
            localizable_name (str): [optional]  # noqa: E501
            localized_name (str): [optional]  # noqa: E501
            parameter_description (str): [optional]  # noqa: E501
            parameter_id (str): [optional]  # noqa: E501
            parameter_name (str): [optional]  # noqa: E501
            strings_to_localize ([str]): [optional]  # noqa: E501
            ui_hint (str): [optional]  # noqa: E501
            ui_hints ([str]): [optional]  # noqa: E501
            visibility_condition (BTParameterVisibilityCondition177): [optional]  # noqa: E501
            default_purpose (BTElementLibraryPurpose3353): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              BTAssemblyInstance947AllOf,
              BTParameterSpecReference2789,
          ],
          'oneOf': [
          ],
        }
