"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from onshape_client.oas.exceptions import ApiAttributeError


def lazy_import():
    from onshape_client.oas.model.bt_active_sheet_metal_filter2944 import BTActiveSheetMetalFilter2944
    from onshape_client.oas.model.bt_allow_edge_point_filter2371 import BTAllowEdgePointFilter2371
    from onshape_client.oas.model.bt_allow_flattened_geometry_filter2140 import BTAllowFlattenedGeometryFilter2140
    from onshape_client.oas.model.bt_allow_mesh_geometry_filter1026 import BTAllowMeshGeometryFilter1026
    from onshape_client.oas.model.bt_and_filter110 import BTAndFilter110
    from onshape_client.oas.model.bt_body_type_filter112 import BTBodyTypeFilter112
    from onshape_client.oas.model.bt_closed_curve_filter1206 import BTClosedCurveFilter1206
    from onshape_client.oas.model.bt_construction_object_filter113 import BTConstructionObjectFilter113
    from onshape_client.oas.model.bt_edge_topology_filter122 import BTEdgeTopologyFilter122
    from onshape_client.oas.model.bt_entity_type_filter124 import BTEntityTypeFilter124
    from onshape_client.oas.model.bt_feature_filter127 import BTFeatureFilter127
    from onshape_client.oas.model.bt_feature_type_filter962 import BTFeatureTypeFilter962
    from onshape_client.oas.model.bt_flat_sheet_metal_filter3018 import BTFlatSheetMetalFilter3018
    from onshape_client.oas.model.bt_geometry_filter130 import BTGeometryFilter130
    from onshape_client.oas.model.bt_image_filter853 import BTImageFilter853
    from onshape_client.oas.model.bt_mate_connector_filter163 import BTMateConnectorFilter163
    from onshape_client.oas.model.bt_mate_filter162 import BTMateFilter162
    from onshape_client.oas.model.bt_modifiable_entity_only_filter1593 import BTModifiableEntityOnlyFilter1593
    from onshape_client.oas.model.bt_not_filter165 import BTNotFilter165
    from onshape_client.oas.model.bt_occurrence_filter166 import BTOccurrenceFilter166
    from onshape_client.oas.model.bt_plane_orientation_filter1700 import BTPlaneOrientationFilter1700
    from onshape_client.oas.model.bt_query_filter183 import BTQueryFilter183
    from onshape_client.oas.model.bt_sketch_object_filter184 import BTSketchObjectFilter184
    from onshape_client.oas.model.bt_spline_handle_filter2971 import BTSplineHandleFilter2971
    from onshape_client.oas.model.bt_text_object_filter1515 import BTTextObjectFilter1515
    from onshape_client.oas.model.bt_text_stroke_filter461 import BTTextStrokeFilter461
    from onshape_client.oas.model.btor_filter167 import BTOrFilter167
    from onshape_client.oas.model.btsm_definition_entity_type_filter1651 import BTSMDefinitionEntityTypeFilter1651
    from onshape_client.oas.model.btsm_definition_entity_type_filter1651_all_of import BTSMDefinitionEntityTypeFilter1651AllOf
    globals()['BTActiveSheetMetalFilter2944'] = BTActiveSheetMetalFilter2944
    globals()['BTAllowEdgePointFilter2371'] = BTAllowEdgePointFilter2371
    globals()['BTAllowFlattenedGeometryFilter2140'] = BTAllowFlattenedGeometryFilter2140
    globals()['BTAllowMeshGeometryFilter1026'] = BTAllowMeshGeometryFilter1026
    globals()['BTAndFilter110'] = BTAndFilter110
    globals()['BTBodyTypeFilter112'] = BTBodyTypeFilter112
    globals()['BTClosedCurveFilter1206'] = BTClosedCurveFilter1206
    globals()['BTConstructionObjectFilter113'] = BTConstructionObjectFilter113
    globals()['BTEdgeTopologyFilter122'] = BTEdgeTopologyFilter122
    globals()['BTEntityTypeFilter124'] = BTEntityTypeFilter124
    globals()['BTFeatureFilter127'] = BTFeatureFilter127
    globals()['BTFeatureTypeFilter962'] = BTFeatureTypeFilter962
    globals()['BTFlatSheetMetalFilter3018'] = BTFlatSheetMetalFilter3018
    globals()['BTGeometryFilter130'] = BTGeometryFilter130
    globals()['BTImageFilter853'] = BTImageFilter853
    globals()['BTMateConnectorFilter163'] = BTMateConnectorFilter163
    globals()['BTMateFilter162'] = BTMateFilter162
    globals()['BTModifiableEntityOnlyFilter1593'] = BTModifiableEntityOnlyFilter1593
    globals()['BTNotFilter165'] = BTNotFilter165
    globals()['BTOccurrenceFilter166'] = BTOccurrenceFilter166
    globals()['BTOrFilter167'] = BTOrFilter167
    globals()['BTPlaneOrientationFilter1700'] = BTPlaneOrientationFilter1700
    globals()['BTQueryFilter183'] = BTQueryFilter183
    globals()['BTSMDefinitionEntityTypeFilter1651'] = BTSMDefinitionEntityTypeFilter1651
    globals()['BTSMDefinitionEntityTypeFilter1651AllOf'] = BTSMDefinitionEntityTypeFilter1651AllOf
    globals()['BTSketchObjectFilter184'] = BTSketchObjectFilter184
    globals()['BTSplineHandleFilter2971'] = BTSplineHandleFilter2971
    globals()['BTTextObjectFilter1515'] = BTTextObjectFilter1515
    globals()['BTTextStrokeFilter461'] = BTTextStrokeFilter461


class BTSMDefinitionEntityTypeFilter1651(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('sm_definition_entity_type',): {
            'VERTEX': "VERTEX",
            'EDGE': "EDGE",
            'FACE': "FACE",
            'BODY': "BODY",
            'DEGENERATE_EDGE': "DEGENERATE_EDGE",
            'UNKNOWN': "UNKNOWN",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'bt_type': (str,),  # noqa: E501
            'sm_definition_entity_type': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'BTActiveSheetMetalFilter-2944': BTActiveSheetMetalFilter2944,
            'BTAllowEdgePointFilter-2371': BTAllowEdgePointFilter2371,
            'BTAllowFlattenedGeometryFilter-2140': BTAllowFlattenedGeometryFilter2140,
            'BTAllowMeshGeometryFilter-1026': BTAllowMeshGeometryFilter1026,
            'BTAndFilter-110': BTAndFilter110,
            'BTBodyTypeFilter-112': BTBodyTypeFilter112,
            'BTClosedCurveFilter-1206': BTClosedCurveFilter1206,
            'BTConstructionObjectFilter-113': BTConstructionObjectFilter113,
            'BTEdgeTopologyFilter-122': BTEdgeTopologyFilter122,
            'BTEntityTypeFilter-124': BTEntityTypeFilter124,
            'BTFeatureFilter-127': BTFeatureFilter127,
            'BTFeatureTypeFilter-962': BTFeatureTypeFilter962,
            'BTFlatSheetMetalFilter-3018': BTFlatSheetMetalFilter3018,
            'BTGeometryFilter-130': BTGeometryFilter130,
            'BTImageFilter-853': BTImageFilter853,
            'BTMateConnectorFilter-163': BTMateConnectorFilter163,
            'BTMateFilter-162': BTMateFilter162,
            'BTModifiableEntityOnlyFilter-1593': BTModifiableEntityOnlyFilter1593,
            'BTNotFilter-165': BTNotFilter165,
            'BTOccurrenceFilter-166': BTOccurrenceFilter166,
            'BTOrFilter-167': BTOrFilter167,
            'BTPlaneOrientationFilter-1700': BTPlaneOrientationFilter1700,
            'BTSMDefinitionEntityTypeFilter-1651': BTSMDefinitionEntityTypeFilter1651,
            'BTSketchObjectFilter-184': BTSketchObjectFilter184,
            'BTSplineHandleFilter-2971': BTSplineHandleFilter2971,
            'BTTextObjectFilter-1515': BTTextObjectFilter1515,
            'BTTextStrokeFilter-461': BTTextStrokeFilter461,
        }
        if not val:
            return None
        return {'bt_type': val}

    attribute_map = {
        'bt_type': 'btType',  # noqa: E501
        'sm_definition_entity_type': 'smDefinitionEntityType',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """BTSMDefinitionEntityTypeFilter1651 - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bt_type (str): [optional]  # noqa: E501
            sm_definition_entity_type (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """BTSMDefinitionEntityTypeFilter1651 - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bt_type (str): [optional]  # noqa: E501
            sm_definition_entity_type (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              BTQueryFilter183,
              BTSMDefinitionEntityTypeFilter1651AllOf,
          ],
          'oneOf': [
          ],
        }
