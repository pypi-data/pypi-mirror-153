"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from onshape_client.oas.exceptions import ApiAttributeError



class BTTranslateFormatParams(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'allow_faulty_parts': (bool,),  # noqa: E501
            'angular_tolerance': (float,),  # noqa: E501
            'blob_element_id': (str,),  # noqa: E501
            'blob_microversion_id': (str,),  # noqa: E501
            'cloud_object_id': (str,),  # noqa: E501
            'cloud_storage_account_id': (str,),  # noqa: E501
            'color_method': (str,),  # noqa: E501
            'configuration': (str,),  # noqa: E501
            'connection_id': (str,),  # noqa: E501
            'create_composite': (bool,),  # noqa: E501
            'current_sheet_only': (bool,),  # noqa: E501
            'destination_name': (str,),  # noqa: E501
            'distance_tolerance': (float,),  # noqa: E501
            'element_id': (str,),  # noqa: E501
            'email_link': (bool,),  # noqa: E501
            'email_message': (str,),  # noqa: E501
            'email_subject': (str,),  # noqa: E501
            'email_to': ([str],),  # noqa: E501
            'extract_assembly_hierarchy': (bool,),  # noqa: E501
            'flatten': (bool,),  # noqa: E501
            'flatten_assemblies': (bool,),  # noqa: E501
            'foreign_id': (str,),  # noqa: E501
            'format_name': (str,),  # noqa: E501
            'from_user_id': (str,),  # noqa: E501
            'gety_axis_is_up': (bool,),  # noqa: E501
            'grouping': (bool,),  # noqa: E501
            'image_height': (int,),  # noqa: E501
            'image_width': (int,),  # noqa: E501
            'import_in_background': (bool,),  # noqa: E501
            'import_within_document': (bool,),  # noqa: E501
            'include_export_ids': (bool,),  # noqa: E501
            'join_adjacent_surfaces': (bool,),  # noqa: E501
            'link_document_id': (str,),  # noqa: E501
            'link_document_workspace_id': (str,),  # noqa: E501
            'maximum_chord_length': (float,),  # noqa: E501
            'notify_user': (bool,),  # noqa: E501
            'one_part_per_doc': (bool,),  # noqa: E501
            'original_foreign_id': (str,),  # noqa: E501
            'parent_id': (str,),  # noqa: E501
            'part_ids': (str,),  # noqa: E501
            'password': (str,),  # noqa: E501
            'password_required': (bool,),  # noqa: E501
            'processed_foreign_id': (str,),  # noqa: E501
            'project_id': (str,),  # noqa: E501
            'selectable_pdf_text': (bool,),  # noqa: E501
            'send_copy_to_me': (bool,),  # noqa: E501
            'sheet_indices': ([int],),  # noqa: E501
            'show_overridden_dimensions': (bool,),  # noqa: E501
            'source_name': (str,),  # noqa: E501
            'specify_units': (bool,),  # noqa: E501
            'splines_as_polylines': (bool,),  # noqa: E501
            'split_assemblies_into_multiple_documents': (bool,),  # noqa: E501
            'step_version_string': (str,),  # noqa: E501
            'store_in_document': (bool,),  # noqa: E501
            'text_as_geometry': (bool,),  # noqa: E501
            'trigger_auto_download': (bool,),  # noqa: E501
            'unit': (str,),  # noqa: E501
            'upload_id': (str,),  # noqa: E501
            'valid_for_days': (int,),  # noqa: E501
            'version_string': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'allow_faulty_parts': 'allowFaultyParts',  # noqa: E501
        'angular_tolerance': 'angularTolerance',  # noqa: E501
        'blob_element_id': 'blobElementId',  # noqa: E501
        'blob_microversion_id': 'blobMicroversionId',  # noqa: E501
        'cloud_object_id': 'cloudObjectId',  # noqa: E501
        'cloud_storage_account_id': 'cloudStorageAccountId',  # noqa: E501
        'color_method': 'colorMethod',  # noqa: E501
        'configuration': 'configuration',  # noqa: E501
        'connection_id': 'connectionId',  # noqa: E501
        'create_composite': 'createComposite',  # noqa: E501
        'current_sheet_only': 'currentSheetOnly',  # noqa: E501
        'destination_name': 'destinationName',  # noqa: E501
        'distance_tolerance': 'distanceTolerance',  # noqa: E501
        'element_id': 'elementId',  # noqa: E501
        'email_link': 'emailLink',  # noqa: E501
        'email_message': 'emailMessage',  # noqa: E501
        'email_subject': 'emailSubject',  # noqa: E501
        'email_to': 'emailTo',  # noqa: E501
        'extract_assembly_hierarchy': 'extractAssemblyHierarchy',  # noqa: E501
        'flatten': 'flatten',  # noqa: E501
        'flatten_assemblies': 'flattenAssemblies',  # noqa: E501
        'foreign_id': 'foreignId',  # noqa: E501
        'format_name': 'formatName',  # noqa: E501
        'from_user_id': 'fromUserId',  # noqa: E501
        'gety_axis_is_up': 'getyAxisIsUp',  # noqa: E501
        'grouping': 'grouping',  # noqa: E501
        'image_height': 'imageHeight',  # noqa: E501
        'image_width': 'imageWidth',  # noqa: E501
        'import_in_background': 'importInBackground',  # noqa: E501
        'import_within_document': 'importWithinDocument',  # noqa: E501
        'include_export_ids': 'includeExportIds',  # noqa: E501
        'join_adjacent_surfaces': 'joinAdjacentSurfaces',  # noqa: E501
        'link_document_id': 'linkDocumentId',  # noqa: E501
        'link_document_workspace_id': 'linkDocumentWorkspaceId',  # noqa: E501
        'maximum_chord_length': 'maximumChordLength',  # noqa: E501
        'notify_user': 'notifyUser',  # noqa: E501
        'one_part_per_doc': 'onePartPerDoc',  # noqa: E501
        'original_foreign_id': 'originalForeignId',  # noqa: E501
        'parent_id': 'parentId',  # noqa: E501
        'part_ids': 'partIds',  # noqa: E501
        'password': 'password',  # noqa: E501
        'password_required': 'passwordRequired',  # noqa: E501
        'processed_foreign_id': 'processedForeignId',  # noqa: E501
        'project_id': 'projectId',  # noqa: E501
        'selectable_pdf_text': 'selectablePdfText',  # noqa: E501
        'send_copy_to_me': 'sendCopyToMe',  # noqa: E501
        'sheet_indices': 'sheetIndices',  # noqa: E501
        'show_overridden_dimensions': 'showOverriddenDimensions',  # noqa: E501
        'source_name': 'sourceName',  # noqa: E501
        'specify_units': 'specifyUnits',  # noqa: E501
        'splines_as_polylines': 'splinesAsPolylines',  # noqa: E501
        'split_assemblies_into_multiple_documents': 'splitAssembliesIntoMultipleDocuments',  # noqa: E501
        'step_version_string': 'stepVersionString',  # noqa: E501
        'store_in_document': 'storeInDocument',  # noqa: E501
        'text_as_geometry': 'textAsGeometry',  # noqa: E501
        'trigger_auto_download': 'triggerAutoDownload',  # noqa: E501
        'unit': 'unit',  # noqa: E501
        'upload_id': 'uploadId',  # noqa: E501
        'valid_for_days': 'validForDays',  # noqa: E501
        'version_string': 'versionString',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """BTTranslateFormatParams - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            allow_faulty_parts (bool): [optional]  # noqa: E501
            angular_tolerance (float): [optional]  # noqa: E501
            blob_element_id (str): [optional]  # noqa: E501
            blob_microversion_id (str): [optional]  # noqa: E501
            cloud_object_id (str): [optional]  # noqa: E501
            cloud_storage_account_id (str): [optional]  # noqa: E501
            color_method (str): [optional]  # noqa: E501
            configuration (str): [optional]  # noqa: E501
            connection_id (str): [optional]  # noqa: E501
            create_composite (bool): [optional]  # noqa: E501
            current_sheet_only (bool): [optional]  # noqa: E501
            destination_name (str): [optional]  # noqa: E501
            distance_tolerance (float): [optional]  # noqa: E501
            element_id (str): [optional]  # noqa: E501
            email_link (bool): [optional]  # noqa: E501
            email_message (str): [optional]  # noqa: E501
            email_subject (str): [optional]  # noqa: E501
            email_to ([str]): [optional]  # noqa: E501
            extract_assembly_hierarchy (bool): [optional]  # noqa: E501
            flatten (bool): [optional]  # noqa: E501
            flatten_assemblies (bool): [optional]  # noqa: E501
            foreign_id (str): [optional]  # noqa: E501
            format_name (str): [optional]  # noqa: E501
            from_user_id (str): [optional]  # noqa: E501
            gety_axis_is_up (bool): [optional]  # noqa: E501
            grouping (bool): [optional]  # noqa: E501
            image_height (int): [optional]  # noqa: E501
            image_width (int): [optional]  # noqa: E501
            import_in_background (bool): [optional]  # noqa: E501
            import_within_document (bool): [optional]  # noqa: E501
            include_export_ids (bool): [optional]  # noqa: E501
            join_adjacent_surfaces (bool): [optional]  # noqa: E501
            link_document_id (str): [optional]  # noqa: E501
            link_document_workspace_id (str): [optional]  # noqa: E501
            maximum_chord_length (float): [optional]  # noqa: E501
            notify_user (bool): [optional]  # noqa: E501
            one_part_per_doc (bool): [optional]  # noqa: E501
            original_foreign_id (str): [optional]  # noqa: E501
            parent_id (str): [optional]  # noqa: E501
            part_ids (str): [optional]  # noqa: E501
            password (str): [optional]  # noqa: E501
            password_required (bool): [optional]  # noqa: E501
            processed_foreign_id (str): [optional]  # noqa: E501
            project_id (str): [optional]  # noqa: E501
            selectable_pdf_text (bool): [optional]  # noqa: E501
            send_copy_to_me (bool): [optional]  # noqa: E501
            sheet_indices ([int]): [optional]  # noqa: E501
            show_overridden_dimensions (bool): [optional]  # noqa: E501
            source_name (str): [optional]  # noqa: E501
            specify_units (bool): [optional]  # noqa: E501
            splines_as_polylines (bool): [optional]  # noqa: E501
            split_assemblies_into_multiple_documents (bool): [optional]  # noqa: E501
            step_version_string (str): [optional]  # noqa: E501
            store_in_document (bool): [optional]  # noqa: E501
            text_as_geometry (bool): [optional]  # noqa: E501
            trigger_auto_download (bool): [optional]  # noqa: E501
            unit (str): [optional]  # noqa: E501
            upload_id (str): [optional]  # noqa: E501
            valid_for_days (int): [optional]  # noqa: E501
            version_string (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """BTTranslateFormatParams - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            allow_faulty_parts (bool): [optional]  # noqa: E501
            angular_tolerance (float): [optional]  # noqa: E501
            blob_element_id (str): [optional]  # noqa: E501
            blob_microversion_id (str): [optional]  # noqa: E501
            cloud_object_id (str): [optional]  # noqa: E501
            cloud_storage_account_id (str): [optional]  # noqa: E501
            color_method (str): [optional]  # noqa: E501
            configuration (str): [optional]  # noqa: E501
            connection_id (str): [optional]  # noqa: E501
            create_composite (bool): [optional]  # noqa: E501
            current_sheet_only (bool): [optional]  # noqa: E501
            destination_name (str): [optional]  # noqa: E501
            distance_tolerance (float): [optional]  # noqa: E501
            element_id (str): [optional]  # noqa: E501
            email_link (bool): [optional]  # noqa: E501
            email_message (str): [optional]  # noqa: E501
            email_subject (str): [optional]  # noqa: E501
            email_to ([str]): [optional]  # noqa: E501
            extract_assembly_hierarchy (bool): [optional]  # noqa: E501
            flatten (bool): [optional]  # noqa: E501
            flatten_assemblies (bool): [optional]  # noqa: E501
            foreign_id (str): [optional]  # noqa: E501
            format_name (str): [optional]  # noqa: E501
            from_user_id (str): [optional]  # noqa: E501
            gety_axis_is_up (bool): [optional]  # noqa: E501
            grouping (bool): [optional]  # noqa: E501
            image_height (int): [optional]  # noqa: E501
            image_width (int): [optional]  # noqa: E501
            import_in_background (bool): [optional]  # noqa: E501
            import_within_document (bool): [optional]  # noqa: E501
            include_export_ids (bool): [optional]  # noqa: E501
            join_adjacent_surfaces (bool): [optional]  # noqa: E501
            link_document_id (str): [optional]  # noqa: E501
            link_document_workspace_id (str): [optional]  # noqa: E501
            maximum_chord_length (float): [optional]  # noqa: E501
            notify_user (bool): [optional]  # noqa: E501
            one_part_per_doc (bool): [optional]  # noqa: E501
            original_foreign_id (str): [optional]  # noqa: E501
            parent_id (str): [optional]  # noqa: E501
            part_ids (str): [optional]  # noqa: E501
            password (str): [optional]  # noqa: E501
            password_required (bool): [optional]  # noqa: E501
            processed_foreign_id (str): [optional]  # noqa: E501
            project_id (str): [optional]  # noqa: E501
            selectable_pdf_text (bool): [optional]  # noqa: E501
            send_copy_to_me (bool): [optional]  # noqa: E501
            sheet_indices ([int]): [optional]  # noqa: E501
            show_overridden_dimensions (bool): [optional]  # noqa: E501
            source_name (str): [optional]  # noqa: E501
            specify_units (bool): [optional]  # noqa: E501
            splines_as_polylines (bool): [optional]  # noqa: E501
            split_assemblies_into_multiple_documents (bool): [optional]  # noqa: E501
            step_version_string (str): [optional]  # noqa: E501
            store_in_document (bool): [optional]  # noqa: E501
            text_as_geometry (bool): [optional]  # noqa: E501
            trigger_auto_download (bool): [optional]  # noqa: E501
            unit (str): [optional]  # noqa: E501
            upload_id (str): [optional]  # noqa: E501
            valid_for_days (int): [optional]  # noqa: E501
            version_string (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
