"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.api_client import ApiClient, Endpoint as _Endpoint
from onshape_client.oas.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from onshape_client.oas.model.bt_app_element_commit_transaction_params import BTAppElementCommitTransactionParams
from onshape_client.oas.model.bt_app_element_content_info import BTAppElementContentInfo
from onshape_client.oas.model.bt_app_element_history_info import BTAppElementHistoryInfo
from onshape_client.oas.model.bt_app_element_ids_info import BTAppElementIdsInfo
from onshape_client.oas.model.bt_app_element_modify_info import BTAppElementModifyInfo
from onshape_client.oas.model.bt_app_element_params import BTAppElementParams
from onshape_client.oas.model.bt_app_element_reference_info import BTAppElementReferenceInfo
from onshape_client.oas.model.bt_app_element_reference_params import BTAppElementReferenceParams
from onshape_client.oas.model.bt_app_element_reference_resolve_info import BTAppElementReferenceResolveInfo
from onshape_client.oas.model.bt_app_element_references_resolve_info import BTAppElementReferencesResolveInfo
from onshape_client.oas.model.bt_app_element_start_transaction_params import BTAppElementStartTransactionParams
from onshape_client.oas.model.bt_app_element_transactions_info import BTAppElementTransactionsInfo
from onshape_client.oas.model.bt_app_element_update_params import BTAppElementUpdateParams
from onshape_client.oas.model.bt_diff_json_response2725 import BTDiffJsonResponse2725
from onshape_client.oas.model.bt_get_json_paths1697 import BTGetJsonPaths1697
from onshape_client.oas.model.bt_get_json_paths_response1544 import BTGetJsonPathsResponse1544
from onshape_client.oas.model.bt_get_json_response2137 import BTGetJsonResponse2137


class AppElementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.abort_transaction_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}',
                'operation_id': 'abort_transaction',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wid',
                    'tid',
                    'return_error',
                ],
                'required': [
                    'did',
                    'eid',
                    'wid',
                    'tid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wid':
                        (str,),
                    'tid':
                        (str,),
                    'return_error':
                        (bool,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wid': 'wid',
                    'tid': 'tid',
                    'return_error': 'returnError',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wid': 'path',
                    'tid': 'path',
                    'return_error': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.commit_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/transactions',
                'operation_id': 'commit_transactions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_app_element_commit_transaction_params',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wid',
                    'bt_app_element_commit_transaction_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_app_element_commit_transaction_params':
                        (BTAppElementCommitTransactionParams,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_app_element_commit_transaction_params': 'body',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.compare_app_element_json_endpoint = _Endpoint(
            settings={
                'response_type': (BTDiffJsonResponse2725,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/compare',
                'operation_id': 'compare_app_element_json',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'workspace_id',
                    'version_id',
                    'microversion_id',
                    'link_document_id',
                    'json_difference_format',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'workspace_id':
                        (str,),
                    'version_id':
                        (str,),
                    'microversion_id':
                        (str,),
                    'link_document_id':
                        (str,),
                    'json_difference_format':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'workspace_id': 'workspaceId',
                    'version_id': 'versionId',
                    'microversion_id': 'microversionId',
                    'link_document_id': 'linkDocumentId',
                    'json_difference_format': 'jsonDifferenceFormat',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'workspace_id': 'query',
                    'version_id': 'query',
                    'microversion_id': 'query',
                    'link_document_id': 'query',
                    'json_difference_format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_element_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}',
                'operation_id': 'create_element',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_app_element_params',
                ],
                'required': [
                    'did',
                    'wid',
                    'bt_app_element_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_app_element_params':
                        (BTAppElementParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_app_element_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.create_reference_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementReferenceInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references',
                'operation_id': 'create_reference',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'bt_app_element_reference_params',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'bt_app_element_reference_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'bt_app_element_reference_params':
                        (BTAppElementReferenceParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'bt_app_element_reference_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.delete_app_element_content_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements/{sid}',
                'operation_id': 'delete_app_element_content',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'sid',
                    'transaction_id',
                    'parent_change_id',
                    'description',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'sid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'sid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'parent_change_id':
                        (str,),
                    'description':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'sid': 'sid',
                    'transaction_id': 'transactionId',
                    'parent_change_id': 'parentChangeId',
                    'description': 'description',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'sid': 'path',
                    'transaction_id': 'query',
                    'parent_change_id': 'query',
                    'description': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_blob_subelement_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
                'operation_id': 'delete_blob_subelement',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                    'transaction_id',
                    'change_id',
                ],
                'required': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'eid':
                        (str,),
                    'bid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'eid': 'eid',
                    'bid': 'bid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'eid': 'path',
                    'bid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_reference_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementReferenceInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
                'operation_id': 'delete_reference',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                    'transaction_id',
                    'parent_change_id',
                    'description',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'rid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'parent_change_id':
                        (str,),
                    'description':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'rid': 'rid',
                    'transaction_id': 'transactionId',
                    'parent_change_id': 'parentChangeId',
                    'description': 'description',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'rid': 'path',
                    'transaction_id': 'query',
                    'parent_change_id': 'query',
                    'description': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.download_blob_subelement_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{vm}/{vmid}/e/{eid}/blob/{bid}',
                'operation_id': 'download_blob_subelement',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'vm',
                    'vmid',
                    'eid',
                    'bid',
                    'content_disposition',
                    'if_none_match',
                    'transaction_id',
                    'change_id',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'vm',
                    'vmid',
                    'eid',
                    'bid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'vm':
                        (str,),
                    'vmid':
                        (str,),
                    'eid':
                        (str,),
                    'bid':
                        (str,),
                    'content_disposition':
                        (str,),
                    'if_none_match':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'vm': 'vm',
                    'vmid': 'vmid',
                    'eid': 'eid',
                    'bid': 'bid',
                    'content_disposition': 'contentDisposition',
                    'if_none_match': 'If-None-Match',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'vm': 'path',
                    'vmid': 'path',
                    'eid': 'path',
                    'bid': 'path',
                    'content_disposition': 'query',
                    'if_none_match': 'header',
                    'transaction_id': 'query',
                    'change_id': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.download_blob_subelement_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
                'operation_id': 'download_blob_subelement_workspace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                    'content_disposition',
                    'if_none_match',
                    'transaction_id',
                    'change_id',
                ],
                'required': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'eid':
                        (str,),
                    'bid':
                        (str,),
                    'content_disposition':
                        (str,),
                    'if_none_match':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'eid': 'eid',
                    'bid': 'bid',
                    'content_disposition': 'contentDisposition',
                    'if_none_match': 'If-None-Match',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'eid': 'path',
                    'bid': 'path',
                    'content_disposition': 'query',
                    'if_none_match': 'header',
                    'transaction_id': 'query',
                    'change_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_app_element_history_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementHistoryInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/history',
                'operation_id': 'get_app_element_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_blob_subelement_ids_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementIdsInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/blob',
                'operation_id': 'get_blob_subelement_ids',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'change_id',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementTransactionsInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/transactions',
                'operation_id': 'get_element_transactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wid',
                ],
                'required': [
                    'did',
                    'eid',
                    'wid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wid':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_json_endpoint = _Endpoint(
            settings={
                'response_type': (BTGetJsonResponse2137,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/json',
                'operation_id': 'get_json',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'change_id',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_json_paths_endpoint = _Endpoint(
            settings={
                'response_type': (BTGetJsonPathsResponse1544,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/jsonpaths',
                'operation_id': 'get_json_paths',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'change_id',
                    'bt_get_json_paths1697',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                    'bt_get_json_paths1697':
                        (BTGetJsonPaths1697,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                    'bt_get_json_paths1697': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.get_sub_element_content_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementContentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content',
                'operation_id': 'get_sub_element_content',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'change_id',
                    'base_change_id',
                    'subelement_id',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                    'base_change_id':
                        (str,),
                    'subelement_id':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                    'base_change_id': 'baseChangeId',
                    'subelement_id': 'subelementId',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                    'base_change_id': 'query',
                    'subelement_id': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_subelement_ids_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementIdsInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/ids',
                'operation_id': 'get_subelement_ids',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'change_id',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'change_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'change_id': 'changeId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'change_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.resolve_reference_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementReferenceResolveInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
                'operation_id': 'resolve_reference',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                    'transaction_id',
                    'parent_change_id',
                    'include_internal',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'rid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'parent_change_id':
                        (str,),
                    'include_internal':
                        (bool,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'rid': 'rid',
                    'transaction_id': 'transactionId',
                    'parent_change_id': 'parentChangeId',
                    'include_internal': 'includeInternal',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'rid': 'path',
                    'transaction_id': 'query',
                    'parent_change_id': 'query',
                    'include_internal': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.resolve_references_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementReferencesResolveInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/resolvereferences',
                'operation_id': 'resolve_references',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'transaction_id',
                    'parent_change_id',
                    'include_internal',
                    'link_document_id',
                    'reference_ids',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'parent_change_id':
                        (str,),
                    'include_internal':
                        (bool,),
                    'link_document_id':
                        (str,),
                    'reference_ids':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'transaction_id': 'transactionId',
                    'parent_change_id': 'parentChangeId',
                    'include_internal': 'includeInternal',
                    'link_document_id': 'linkDocumentId',
                    'reference_ids': 'referenceIds',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'transaction_id': 'query',
                    'parent_change_id': 'query',
                    'include_internal': 'query',
                    'link_document_id': 'query',
                    'reference_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.start_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/transactions',
                'operation_id': 'start_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wid',
                    'bt_app_element_start_transaction_params',
                ],
                'required': [
                    'did',
                    'eid',
                    'wid',
                    'bt_app_element_start_transaction_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wid':
                        (str,),
                    'bt_app_element_start_transaction_params':
                        (BTAppElementStartTransactionParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wid': 'path',
                    'bt_app_element_start_transaction_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.update_app_element_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content',
                'operation_id': 'update_app_element',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'bt_app_element_update_params',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'bt_app_element_update_params':
                        (BTAppElementUpdateParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'bt_app_element_update_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.update_reference_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementReferenceInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
                'operation_id': 'update_reference',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                    'bt_app_element_reference_params',
                ],
                'required': [
                    'did',
                    'eid',
                    'wvm',
                    'wvmid',
                    'rid',
                    'bt_app_element_reference_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'rid':
                        (str,),
                    'bt_app_element_reference_params':
                        (BTAppElementReferenceParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'rid': 'rid',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'rid': 'path',
                    'bt_app_element_reference_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.upload_blob_subelement_endpoint = _Endpoint(
            settings={
                'response_type': (BTAppElementModifyInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
                'operation_id': 'upload_blob_subelement',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                    'transaction_id',
                    'parent_change_id',
                    'description',
                    'file',
                    'file_content_length',
                ],
                'required': [
                    'did',
                    'wid',
                    'eid',
                    'bid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'eid':
                        (str,),
                    'bid':
                        (str,),
                    'transaction_id':
                        (str,),
                    'parent_change_id':
                        (str,),
                    'description':
                        (str,),
                    'file':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'file_content_length':
                        (int,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'eid': 'eid',
                    'bid': 'bid',
                    'transaction_id': 'transactionId',
                    'parent_change_id': 'parentChangeId',
                    'description': 'description',
                    'file': 'file',
                    'file_content_length': 'fileContentLength',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'eid': 'path',
                    'bid': 'path',
                    'transaction_id': 'form',
                    'parent_change_id': 'form',
                    'description': 'form',
                    'file': 'form',
                    'file_content_length': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def abort_transaction(
        self,
        did,
        eid,
        wid,
        tid,
        **kwargs
    ):
        """Abort Transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.abort_transaction(did, eid, wid, tid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wid (str):
            tid (str):

        Keyword Args:
            return_error (bool): [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wid'] = \
            wid
        kwargs['tid'] = \
            tid
        return self.abort_transaction_endpoint.call_with_http_info(**kwargs)

    def commit_transactions(
        self,
        did,
        wid,
        bt_app_element_commit_transaction_params,
        **kwargs
    ):
        """Commit Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.commit_transactions(did, wid, bt_app_element_commit_transaction_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            bt_app_element_commit_transaction_params (BTAppElementCommitTransactionParams):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['bt_app_element_commit_transaction_params'] = \
            bt_app_element_commit_transaction_params
        return self.commit_transactions_endpoint.call_with_http_info(**kwargs)

    def compare_app_element_json(
        self,
        did,
        wvm,
        wvmid,
        eid,
        **kwargs
    ):
        """Compare Json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compare_app_element_json(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):

        Keyword Args:
            workspace_id (str): [optional]
            version_id (str): [optional]
            microversion_id (str): [optional]
            link_document_id (str): [optional]
            json_difference_format (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTDiffJsonResponse2725
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        return self.compare_app_element_json_endpoint.call_with_http_info(**kwargs)

    def create_element(
        self,
        did,
        wid,
        bt_app_element_params,
        **kwargs
    ):
        """Create App Element  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element(did, wid, bt_app_element_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            bt_app_element_params (BTAppElementParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['bt_app_element_params'] = \
            bt_app_element_params
        return self.create_element_endpoint.call_with_http_info(**kwargs)

    def create_reference(
        self,
        did,
        eid,
        wvm,
        wvmid,
        bt_app_element_reference_params,
        **kwargs
    ):
        """Create Reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reference(did, eid, wvm, wvmid, bt_app_element_reference_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):
            bt_app_element_reference_params (BTAppElementReferenceParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementReferenceInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['bt_app_element_reference_params'] = \
            bt_app_element_reference_params
        return self.create_reference_endpoint.call_with_http_info(**kwargs)

    def delete_app_element_content(
        self,
        did,
        eid,
        wvm,
        wvmid,
        sid,
        **kwargs
    ):
        """Delete a Subelement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_app_element_content(did, eid, wvm, wvmid, sid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):
            sid (str):

        Keyword Args:
            transaction_id (str): [optional]
            parent_change_id (str): [optional]
            description (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['sid'] = \
            sid
        return self.delete_app_element_content_endpoint.call_with_http_info(**kwargs)

    def delete_blob_subelement(
        self,
        did,
        wid,
        eid,
        bid,
        **kwargs
    ):
        """Delete Blob Subelement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_blob_subelement(did, wid, eid, bid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            eid (str):
            bid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['eid'] = \
            eid
        kwargs['bid'] = \
            bid
        return self.delete_blob_subelement_endpoint.call_with_http_info(**kwargs)

    def delete_reference(
        self,
        did,
        eid,
        wvm,
        wvmid,
        rid,
        **kwargs
    ):
        """Delete Reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reference(did, eid, wvm, wvmid, rid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):
            rid (str):

        Keyword Args:
            transaction_id (str): [optional]
            parent_change_id (str): [optional]
            description (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementReferenceInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['rid'] = \
            rid
        return self.delete_reference_endpoint.call_with_http_info(**kwargs)

    def download_blob_subelement(
        self,
        did,
        vm,
        vmid,
        eid,
        bid,
        **kwargs
    ):
        """Download Blob Subelement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_blob_subelement(did, vm, vmid, eid, bid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            vm (str):
            vmid (str):
            eid (str):
            bid (str):

        Keyword Args:
            content_disposition (str): [optional]
            if_none_match (str): [optional]
            transaction_id (str): [optional]
            change_id (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['vm'] = \
            vm
        kwargs['vmid'] = \
            vmid
        kwargs['eid'] = \
            eid
        kwargs['bid'] = \
            bid
        return self.download_blob_subelement_endpoint.call_with_http_info(**kwargs)

    def download_blob_subelement_workspace(
        self,
        did,
        wid,
        eid,
        bid,
        **kwargs
    ):
        """download_blob_subelement_workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_blob_subelement_workspace(did, wid, eid, bid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            eid (str):
            bid (str):

        Keyword Args:
            content_disposition (str): [optional]
            if_none_match (str): [optional]
            transaction_id (str): [optional]
            change_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['eid'] = \
            eid
        kwargs['bid'] = \
            bid
        return self.download_blob_subelement_workspace_endpoint.call_with_http_info(**kwargs)

    def get_app_element_history(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_element_history(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementHistoryInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_app_element_history_endpoint.call_with_http_info(**kwargs)

    def get_blob_subelement_ids(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get Blob Subelement IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_blob_subelement_ids(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementIdsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_blob_subelement_ids_endpoint.call_with_http_info(**kwargs)

    def get_element_transactions(
        self,
        did,
        eid,
        wid,
        **kwargs
    ):
        """List App Element Transactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_transactions(did, eid, wid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementTransactionsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wid'] = \
            wid
        return self.get_element_transactions_endpoint.call_with_http_info(**kwargs)

    def get_json(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get Json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTGetJsonResponse2137
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_json_endpoint.call_with_http_info(**kwargs)

    def get_json_paths(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get Json Paths  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_paths(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            bt_get_json_paths1697 (BTGetJsonPaths1697): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTGetJsonPathsResponse1544
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_json_paths_endpoint.call_with_http_info(**kwargs)

    def get_sub_element_content(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get Subelement Content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sub_element_content(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            base_change_id (str): [optional]
            subelement_id (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementContentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_sub_element_content_endpoint.call_with_http_info(**kwargs)

    def get_subelement_ids(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get Subelement IDs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subelement_ids(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            change_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementIdsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_subelement_ids_endpoint.call_with_http_info(**kwargs)

    def resolve_reference(
        self,
        did,
        eid,
        wvm,
        wvmid,
        rid,
        **kwargs
    ):
        """Resolve Reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resolve_reference(did, eid, wvm, wvmid, rid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):
            rid (str):

        Keyword Args:
            transaction_id (str): [optional]
            parent_change_id (str): [optional]
            include_internal (bool): [optional] if omitted the server will use the default value of False
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementReferenceResolveInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['rid'] = \
            rid
        return self.resolve_reference_endpoint.call_with_http_info(**kwargs)

    def resolve_references(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Resolve references.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resolve_references(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            transaction_id (str): [optional]
            parent_change_id (str): [optional]
            include_internal (bool): [optional] if omitted the server will use the default value of False
            link_document_id (str): [optional]
            reference_ids (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementReferencesResolveInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.resolve_references_endpoint.call_with_http_info(**kwargs)

    def start_transaction(
        self,
        did,
        eid,
        wid,
        bt_app_element_start_transaction_params,
        **kwargs
    ):
        """Start App Element Transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_transaction(did, eid, wid, bt_app_element_start_transaction_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wid (str):
            bt_app_element_start_transaction_params (BTAppElementStartTransactionParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wid'] = \
            wid
        kwargs['bt_app_element_start_transaction_params'] = \
            bt_app_element_start_transaction_params
        return self.start_transaction_endpoint.call_with_http_info(**kwargs)

    def update_app_element(
        self,
        did,
        eid,
        wvm,
        wvmid,
        **kwargs
    ):
        """Update App Element  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_app_element(did, eid, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            bt_app_element_update_params (BTAppElementUpdateParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.update_app_element_endpoint.call_with_http_info(**kwargs)

    def update_reference(
        self,
        did,
        eid,
        wvm,
        wvmid,
        rid,
        bt_app_element_reference_params,
        **kwargs
    ):
        """Update Reference  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_reference(did, eid, wvm, wvmid, rid, bt_app_element_reference_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):
            wvm (str):
            wvmid (str):
            rid (str):
            bt_app_element_reference_params (BTAppElementReferenceParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementReferenceInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['rid'] = \
            rid
        kwargs['bt_app_element_reference_params'] = \
            bt_app_element_reference_params
        return self.update_reference_endpoint.call_with_http_info(**kwargs)

    def upload_blob_subelement(
        self,
        did,
        wid,
        eid,
        bid,
        **kwargs
    ):
        """Upload Blob Subelement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_blob_subelement(did, wid, eid, bid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            eid (str):
            bid (str):

        Keyword Args:
            transaction_id (str): [optional]
            parent_change_id (str): [optional]
            description (str): [optional]
            file ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): File to upload.. [optional]
            file_content_length (int): [optional] if omitted the server will use the default value of -1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAppElementModifyInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['eid'] = \
            eid
        kwargs['bid'] = \
            bid
        return self.upload_blob_subelement_endpoint.call_with_http_info(**kwargs)

