"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.api_client import ApiClient, Endpoint as _Endpoint
from onshape_client.oas.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from onshape_client.oas.model.bt_acl_info import BTAclInfo
from onshape_client.oas.model.btb_export_model_params import BTBExportModelParams
from onshape_client.oas.model.bt_copy_document_info import BTCopyDocumentInfo
from onshape_client.oas.model.bt_copy_document_params import BTCopyDocumentParams
from onshape_client.oas.model.bt_document_element_info import BTDocumentElementInfo
from onshape_client.oas.model.bt_document_history_info import BTDocumentHistoryInfo
from onshape_client.oas.model.bt_document_info import BTDocumentInfo
from onshape_client.oas.model.bt_document_merge_info import BTDocumentMergeInfo
from onshape_client.oas.model.bt_document_params import BTDocumentParams
from onshape_client.oas.model.bt_document_search_params import BTDocumentSearchParams
from onshape_client.oas.model.bt_global_tree_node_list_response import BTGlobalTreeNodeListResponse
from onshape_client.oas.model.bt_insertables_list_response import BTInsertablesListResponse
from onshape_client.oas.model.bt_link_to_latest_document_info import BTLinkToLatestDocumentInfo
from onshape_client.oas.model.bt_link_to_latest_document_params import BTLinkToLatestDocumentParams
from onshape_client.oas.model.bt_microversion_info import BTMicroversionInfo
from onshape_client.oas.model.bt_move_element_info import BTMoveElementInfo
from onshape_client.oas.model.bt_move_element_params import BTMoveElementParams
from onshape_client.oas.model.bt_restore_from_history_info import BTRestoreFromHistoryInfo
from onshape_client.oas.model.bt_revert_unchanged_params import BTRevertUnchangedParams
from onshape_client.oas.model.bt_share_params import BTShareParams
from onshape_client.oas.model.bt_sync_app_element_params import BTSyncAppElementParams
from onshape_client.oas.model.bt_unchanged_element_info import BTUnchangedElementInfo
from onshape_client.oas.model.bt_version_info import BTVersionInfo
from onshape_client.oas.model.bt_version_or_workspace_info import BTVersionOrWorkspaceInfo
from onshape_client.oas.model.bt_version_or_workspace_params import BTVersionOrWorkspaceParams
from onshape_client.oas.model.bt_workspace_info import BTWorkspaceInfo


class DocumentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.copy_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (BTCopyDocumentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/workspaces/{wid}/copy',
                'operation_id': 'copy_workspace',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_copy_document_params',
                ],
                'required': [
                    'did',
                    'wid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_copy_document_params':
                        (BTCopyDocumentParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_copy_document_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.create_document_endpoint = _Endpoint(
            settings={
                'response_type': (BTDocumentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents',
                'operation_id': 'create_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bt_document_params',
                ],
                'required': [
                    'bt_document_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bt_document_params':
                        (BTDocumentParams,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bt_document_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.create_version_endpoint = _Endpoint(
            settings={
                'response_type': (BTVersionInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/versions',
                'operation_id': 'create_version',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'bt_version_or_workspace_params',
                ],
                'required': [
                    'did',
                    'bt_version_or_workspace_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'bt_version_or_workspace_params':
                        (BTVersionOrWorkspaceParams,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                    'bt_version_or_workspace_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.create_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (BTWorkspaceInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/workspaces',
                'operation_id': 'create_workspace',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'bt_version_or_workspace_params',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'bt_version_or_workspace_params':
                        (BTVersionOrWorkspaceParams,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                    'bt_version_or_workspace_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.delete_document_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}',
                'operation_id': 'delete_document',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'forever',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'forever':
                        (bool,),
                },
                'attribute_map': {
                    'did': 'did',
                    'forever': 'forever',
                },
                'location_map': {
                    'did': 'path',
                    'forever': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_workspace_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/workspaces/{wid}',
                'operation_id': 'delete_workspace',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                ],
                'required': [
                    'did',
                    'wid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.download_external_data_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/externaldata/{fid}',
                'operation_id': 'download_external_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'fid',
                    'if_none_match',
                ],
                'required': [
                    'did',
                    'fid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'fid':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'fid': 'fid',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'did': 'path',
                    'fid': 'path',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.export2_json_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/{wv}/{wvid}/e/{eid}/export',
                'operation_id': 'export2_json',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wv',
                    'wvid',
                    'eid',
                    'btb_export_model_params',
                ],
                'required': [
                    'did',
                    'wv',
                    'wvid',
                    'eid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wv':
                        (str,),
                    'wvid':
                        (str,),
                    'eid':
                        (str,),
                    'btb_export_model_params':
                        (BTBExportModelParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wv': 'wv',
                    'wvid': 'wvid',
                    'eid': 'eid',
                },
                'location_map': {
                    'did': 'path',
                    'wv': 'path',
                    'wvid': 'path',
                    'eid': 'path',
                    'btb_export_model_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.get_current_microversion_endpoint = _Endpoint(
            settings={
                'response_type': (BTMicroversionInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/{wv}/{wvid}/currentmicroversion',
                'operation_id': 'get_current_microversion',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wv',
                    'wvid',
                ],
                'required': [
                    'did',
                    'wv',
                    'wvid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wv':
                        (str,),
                    'wvid':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wv': 'wv',
                    'wvid': 'wvid',
                },
                'location_map': {
                    'did': 'path',
                    'wv': 'path',
                    'wvid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_endpoint = _Endpoint(
            settings={
                'response_type': (BTDocumentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}',
                'operation_id': 'get_document',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_acl_endpoint = _Endpoint(
            settings={
                'response_type': (BTAclInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/acl',
                'operation_id': 'get_document_acl',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_history_endpoint = _Endpoint(
            settings={
                'response_type': ([BTDocumentHistoryInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/{wm}/{wmid}/documenthistory',
                'operation_id': 'get_document_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wm',
                    'wmid',
                ],
                'required': [
                    'did',
                    'wm',
                    'wmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wm':
                        (str,),
                    'wmid':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wm': 'wm',
                    'wmid': 'wmid',
                },
                'location_map': {
                    'did': 'path',
                    'wm': 'path',
                    'wmid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_permission_set_endpoint = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/permissionset',
                'operation_id': 'get_document_permission_set',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_scope_prototype_endpoint = _Endpoint(
            settings={
                'response_type': (BTDocumentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/scope',
                'operation_id': 'get_document_scope_prototype',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'scoped_elements',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'scoped_elements':
                        ([str],),
                },
                'attribute_map': {
                    'did': 'did',
                    'scoped_elements': 'scopedElements',
                },
                'location_map': {
                    'did': 'path',
                    'scoped_elements': 'query',
                },
                'collection_format_map': {
                    'scoped_elements': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_versions_endpoint = _Endpoint(
            settings={
                'response_type': ([BTVersionInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/versions',
                'operation_id': 'get_document_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'offset',
                    'limit',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'offset',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 20,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'did': 'did',
                    'offset': 'offset',
                    'limit': 'limit',
                },
                'location_map': {
                    'did': 'path',
                    'offset': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_workspaces_endpoint = _Endpoint(
            settings={
                'response_type': ([BTWorkspaceInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/workspaces',
                'operation_id': 'get_document_workspaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                ],
                'required': [
                    'did',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_documents_endpoint = _Endpoint(
            settings={
                'response_type': (BTGlobalTreeNodeListResponse,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents',
                'operation_id': 'get_documents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                    'filter',
                    'owner',
                    'owner_type',
                    'sort_column',
                    'sort_order',
                    'offset',
                    'limit',
                    'label',
                    'project',
                    'parent_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'offset',
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                    ('limit',): {

                        'inclusive_maximum': 20,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                    'filter':
                        (int,),
                    'owner':
                        (str,),
                    'owner_type':
                        (int,),
                    'sort_column':
                        (str,),
                    'sort_order':
                        (str,),
                    'offset':
                        (int,),
                    'limit':
                        (int,),
                    'label':
                        (str,),
                    'project':
                        (str,),
                    'parent_id':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                    'filter': 'filter',
                    'owner': 'owner',
                    'owner_type': 'ownerType',
                    'sort_column': 'sortColumn',
                    'sort_order': 'sortOrder',
                    'offset': 'offset',
                    'limit': 'limit',
                    'label': 'label',
                    'project': 'project',
                    'parent_id': 'parentId',
                },
                'location_map': {
                    'q': 'query',
                    'filter': 'query',
                    'owner': 'query',
                    'owner_type': 'query',
                    'sort_column': 'query',
                    'sort_order': 'query',
                    'offset': 'query',
                    'limit': 'query',
                    'label': 'query',
                    'project': 'query',
                    'parent_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_elements_in_document_endpoint = _Endpoint(
            settings={
                'response_type': ([BTDocumentElementInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/{wvm}/{wvmid}/elements',
                'operation_id': 'get_elements_in_document',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'element_type',
                    'element_id',
                    'with_thumbnails',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'element_type':
                        (str,),
                    'element_id':
                        (str,),
                    'with_thumbnails':
                        (bool,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'element_type': 'elementType',
                    'element_id': 'elementId',
                    'with_thumbnails': 'withThumbnails',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'element_type': 'query',
                    'element_id': 'query',
                    'with_thumbnails': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_insertables_endpoint = _Endpoint(
            settings={
                'response_type': (BTInsertablesListResponse,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/{wv}/{wvid}/insertables',
                'operation_id': 'get_insertables',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wv',
                    'wvid',
                    'element_id',
                    'configuration',
                    'beta_capability_ids',
                    'include_parts',
                    'include_surfaces',
                    'include_sketches',
                    'include_reference_features',
                    'include_assemblies',
                    'include_feature_studios',
                    'include_blobs',
                    'allowed_blob_mime_types',
                    'exclude_newer_fs_versions',
                    'max_feature_script_version',
                    'include_part_studios',
                    'include_features',
                    'include_meshes',
                    'include_wires',
                    'include_flattened_bodies',
                    'include_applications',
                    'allowed_application_mime_types',
                    'include_composite_parts',
                    'include_fs_tables',
                    'include_fs_computed_part_property_functions',
                    'include_variables',
                    'include_variable_studios',
                ],
                'required': [
                    'did',
                    'wv',
                    'wvid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'beta_capability_ids',
                ]
            },
            root_map={
                'validations': {
                    ('beta_capability_ids',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wv':
                        (str,),
                    'wvid':
                        (str,),
                    'element_id':
                        (str,),
                    'configuration':
                        (str,),
                    'beta_capability_ids':
                        ([str],),
                    'include_parts':
                        (bool,),
                    'include_surfaces':
                        (bool,),
                    'include_sketches':
                        (bool,),
                    'include_reference_features':
                        (bool,),
                    'include_assemblies':
                        (bool,),
                    'include_feature_studios':
                        (bool,),
                    'include_blobs':
                        (bool,),
                    'allowed_blob_mime_types':
                        (str,),
                    'exclude_newer_fs_versions':
                        (bool,),
                    'max_feature_script_version':
                        (int,),
                    'include_part_studios':
                        (bool,),
                    'include_features':
                        (bool,),
                    'include_meshes':
                        (bool,),
                    'include_wires':
                        (bool,),
                    'include_flattened_bodies':
                        (bool,),
                    'include_applications':
                        (bool,),
                    'allowed_application_mime_types':
                        (str,),
                    'include_composite_parts':
                        (bool,),
                    'include_fs_tables':
                        (bool,),
                    'include_fs_computed_part_property_functions':
                        (bool,),
                    'include_variables':
                        (bool,),
                    'include_variable_studios':
                        (bool,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wv': 'wv',
                    'wvid': 'wvid',
                    'element_id': 'elementId',
                    'configuration': 'configuration',
                    'beta_capability_ids': 'betaCapabilityIds',
                    'include_parts': 'includeParts',
                    'include_surfaces': 'includeSurfaces',
                    'include_sketches': 'includeSketches',
                    'include_reference_features': 'includeReferenceFeatures',
                    'include_assemblies': 'includeAssemblies',
                    'include_feature_studios': 'includeFeatureStudios',
                    'include_blobs': 'includeBlobs',
                    'allowed_blob_mime_types': 'allowedBlobMimeTypes',
                    'exclude_newer_fs_versions': 'excludeNewerFSVersions',
                    'max_feature_script_version': 'maxFeatureScriptVersion',
                    'include_part_studios': 'includePartStudios',
                    'include_features': 'includeFeatures',
                    'include_meshes': 'includeMeshes',
                    'include_wires': 'includeWires',
                    'include_flattened_bodies': 'includeFlattenedBodies',
                    'include_applications': 'includeApplications',
                    'allowed_application_mime_types': 'allowedApplicationMimeTypes',
                    'include_composite_parts': 'includeCompositeParts',
                    'include_fs_tables': 'includeFSTables',
                    'include_fs_computed_part_property_functions': 'includeFSComputedPartPropertyFunctions',
                    'include_variables': 'includeVariables',
                    'include_variable_studios': 'includeVariableStudios',
                },
                'location_map': {
                    'did': 'path',
                    'wv': 'path',
                    'wvid': 'path',
                    'element_id': 'query',
                    'configuration': 'query',
                    'beta_capability_ids': 'query',
                    'include_parts': 'query',
                    'include_surfaces': 'query',
                    'include_sketches': 'query',
                    'include_reference_features': 'query',
                    'include_assemblies': 'query',
                    'include_feature_studios': 'query',
                    'include_blobs': 'query',
                    'allowed_blob_mime_types': 'query',
                    'exclude_newer_fs_versions': 'query',
                    'max_feature_script_version': 'query',
                    'include_part_studios': 'query',
                    'include_features': 'query',
                    'include_meshes': 'query',
                    'include_wires': 'query',
                    'include_flattened_bodies': 'query',
                    'include_applications': 'query',
                    'allowed_application_mime_types': 'query',
                    'include_composite_parts': 'query',
                    'include_fs_tables': 'query',
                    'include_fs_computed_part_property_functions': 'query',
                    'include_variables': 'query',
                    'include_variable_studios': 'query',
                },
                'collection_format_map': {
                    'beta_capability_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_version_endpoint = _Endpoint(
            settings={
                'response_type': (BTVersionInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/versions/{vid}',
                'operation_id': 'get_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'vid',
                    'parents',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'vid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'vid':
                        (str,),
                    'parents':
                        (bool,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'vid': 'vid',
                    'parents': 'parents',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'vid': 'path',
                    'parents': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.merge_into_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (BTDocumentMergeInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/workspaces/{wid}/merge',
                'operation_id': 'merge_into_workspace',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_version_or_workspace_info',
                ],
                'required': [
                    'did',
                    'wid',
                    'bt_version_or_workspace_info',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_version_or_workspace_info':
                        (BTVersionOrWorkspaceInfo,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_version_or_workspace_info': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.move_elements_to_document_endpoint = _Endpoint(
            settings={
                'response_type': (BTMoveElementInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/w/{wid}/moveelement',
                'operation_id': 'move_elements_to_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_move_element_params',
                ],
                'required': [
                    'did',
                    'wid',
                    'bt_move_element_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_move_element_params':
                        (BTMoveElementParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_move_element_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.restore_from_history_endpoint = _Endpoint(
            settings={
                'response_type': (BTRestoreFromHistoryInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/w/{wid}/restore/{vm}/{vmid}',
                'operation_id': 'restore_from_history',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'vm',
                    'vmid',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wid',
                    'vm',
                    'vmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'vm':
                        (str,),
                    'vmid':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'vm': 'vm',
                    'vmid': 'vmid',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'vm': 'path',
                    'vmid': 'path',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.revert_unchanged_to_revisions_endpoint = _Endpoint(
            settings={
                'response_type': ([BTUnchangedElementInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/w/{wid}/revertunchangedtorevisions',
                'operation_id': 'revert_unchanged_to_revisions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_revert_unchanged_params',
                ],
                'required': [
                    'did',
                    'wid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_revert_unchanged_params':
                        (BTRevertUnchangedParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_revert_unchanged_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.search_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/search',
                'operation_id': 'search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bt_document_search_params',
                ],
                'required': [
                    'bt_document_search_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bt_document_search_params':
                        (BTDocumentSearchParams,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bt_document_search_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.share_document_endpoint = _Endpoint(
            settings={
                'response_type': (BTAclInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/share',
                'operation_id': 'share_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'bt_share_params',
                ],
                'required': [
                    'did',
                    'bt_share_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'bt_share_params':
                        (BTShareParams,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                    'bt_share_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.sync_application_elements_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/w/{wid}/syncAppElements',
                'operation_id': 'sync_application_elements',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'bt_sync_app_element_params',
                ],
                'required': [
                    'did',
                    'wid',
                    'bt_sync_app_element_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'bt_sync_app_element_params':
                        (BTSyncAppElementParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'bt_sync_app_element_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.un_share_document_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}/share/{eid}',
                'operation_id': 'un_share_document',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'eid',
                    'entry_type',
                ],
                'required': [
                    'did',
                    'eid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'entry_type',
                ]
            },
            root_map={
                'validations': {
                    ('entry_type',): {

                        'inclusive_maximum': 4,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'eid':
                        (str,),
                    'entry_type':
                        (int,),
                },
                'attribute_map': {
                    'did': 'did',
                    'eid': 'eid',
                    'entry_type': 'entryType',
                },
                'location_map': {
                    'did': 'path',
                    'eid': 'path',
                    'entry_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_document_attributes_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/{did}',
                'operation_id': 'update_document_attributes',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'bt_document_params',
                ],
                'required': [
                    'did',
                    'bt_document_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'bt_document_params':
                        (BTDocumentParams,),
                },
                'attribute_map': {
                    'did': 'did',
                },
                'location_map': {
                    'did': 'path',
                    'bt_document_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.update_external_references_to_latest_documents_endpoint = _Endpoint(
            settings={
                'response_type': (BTLinkToLatestDocumentInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/documents/d/{did}/w/{wid}/e/{eid}/latestdocumentreferences',
                'operation_id': 'update_external_references_to_latest_documents',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wid',
                    'eid',
                    'bt_link_to_latest_document_params',
                ],
                'required': [
                    'did',
                    'wid',
                    'eid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wid':
                        (str,),
                    'eid':
                        (str,),
                    'bt_link_to_latest_document_params':
                        (BTLinkToLatestDocumentParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wid': 'wid',
                    'eid': 'eid',
                },
                'location_map': {
                    'did': 'path',
                    'wid': 'path',
                    'eid': 'path',
                    'bt_link_to_latest_document_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )

    def copy_workspace(
        self,
        did,
        wid,
        **kwargs
    ):
        """Copy Workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.copy_workspace(did, wid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):

        Keyword Args:
            bt_copy_document_params (BTCopyDocumentParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTCopyDocumentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        return self.copy_workspace_endpoint.call_with_http_info(**kwargs)

    def create_document(
        self,
        bt_document_params,
        **kwargs
    ):
        """Create document.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document(bt_document_params, async_req=True)
        >>> result = thread.get()

        Args:
            bt_document_params (BTDocumentParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTDocumentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['bt_document_params'] = \
            bt_document_params
        return self.create_document_endpoint.call_with_http_info(**kwargs)

    def create_version(
        self,
        did,
        bt_version_or_workspace_params,
        **kwargs
    ):
        """Create Version.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_version(did, bt_version_or_workspace_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            bt_version_or_workspace_params (BTVersionOrWorkspaceParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTVersionInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['bt_version_or_workspace_params'] = \
            bt_version_or_workspace_params
        return self.create_version_endpoint.call_with_http_info(**kwargs)

    def create_workspace(
        self,
        did,
        **kwargs
    ):
        """Create Workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workspace(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            bt_version_or_workspace_params (BTVersionOrWorkspaceParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTWorkspaceInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.create_workspace_endpoint.call_with_http_info(**kwargs)

    def delete_document(
        self,
        did,
        **kwargs
    ):
        """Delete Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            forever (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.delete_document_endpoint.call_with_http_info(**kwargs)

    def delete_workspace(
        self,
        did,
        wid,
        **kwargs
    ):
        """Delete Workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workspace(did, wid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        return self.delete_workspace_endpoint.call_with_http_info(**kwargs)

    def download_external_data(
        self,
        did,
        fid,
        **kwargs
    ):
        """Download External Data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_external_data(did, fid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            fid (str):

        Keyword Args:
            if_none_match (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['fid'] = \
            fid
        return self.download_external_data_endpoint.call_with_http_info(**kwargs)

    def export2_json(
        self,
        did,
        wv,
        wvid,
        eid,
        **kwargs
    ):
        """export2_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export2_json(did, wv, wvid, eid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wv (str):
            wvid (str):
            eid (str):

        Keyword Args:
            btb_export_model_params (BTBExportModelParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wv'] = \
            wv
        kwargs['wvid'] = \
            wvid
        kwargs['eid'] = \
            eid
        return self.export2_json_endpoint.call_with_http_info(**kwargs)

    def get_current_microversion(
        self,
        did,
        wv,
        wvid,
        **kwargs
    ):
        """Get Current Document Microversion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_current_microversion(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wv (str):
            wvid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTMicroversionInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wv'] = \
            wv
        kwargs['wvid'] = \
            wvid
        return self.get_current_microversion_endpoint.call_with_http_info(**kwargs)

    def get_document(
        self,
        did,
        **kwargs
    ):
        """Get Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTDocumentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_endpoint.call_with_http_info(**kwargs)

    def get_document_acl(
        self,
        did,
        **kwargs
    ):
        """Get Access Control List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_acl(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAclInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_acl_endpoint.call_with_http_info(**kwargs)

    def get_document_history(
        self,
        did,
        wm,
        wmid,
        **kwargs
    ):
        """get_document_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_history(did, wm, wmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wm (str):
            wmid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTDocumentHistoryInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wm'] = \
            wm
        kwargs['wmid'] = \
            wmid
        return self.get_document_history_endpoint.call_with_http_info(**kwargs)

    def get_document_permission_set(
        self,
        did,
        **kwargs
    ):
        """Get Document Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_permission_set(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [str]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_permission_set_endpoint.call_with_http_info(**kwargs)

    def get_document_scope_prototype(
        self,
        did,
        **kwargs
    ):
        """Get Scoped Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_scope_prototype(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            scoped_elements ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTDocumentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_scope_prototype_endpoint.call_with_http_info(**kwargs)

    def get_document_versions(
        self,
        did,
        **kwargs
    ):
        """Get Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_versions(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            offset (int): [optional] if omitted the server will use the default value of 0
            limit (int): [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTVersionInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_versions_endpoint.call_with_http_info(**kwargs)

    def get_document_workspaces(
        self,
        did,
        **kwargs
    ):
        """Get Workspaces  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_workspaces(did, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTWorkspaceInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        return self.get_document_workspaces_endpoint.call_with_http_info(**kwargs)

    def get_documents(
        self,
        **kwargs
    ):
        """Get Documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            q (str): [optional] if omitted the server will use the default value of ""
            filter (int): [optional]
            owner (str): [optional] if omitted the server will use the default value of ""
            owner_type (int): [optional] if omitted the server will use the default value of 1
            sort_column (str): [optional] if omitted the server will use the default value of "createdAt"
            sort_order (str): [optional] if omitted the server will use the default value of "desc"
            offset (int): [optional] if omitted the server will use the default value of 0
            limit (int): [optional] if omitted the server will use the default value of 20
            label (str): [optional]
            project (str): [optional]
            parent_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTGlobalTreeNodeListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_documents_endpoint.call_with_http_info(**kwargs)

    def get_elements_in_document(
        self,
        did,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get a list of elements in the workspace, version, or microversion of the document.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_elements_in_document(did, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):

        Keyword Args:
            element_type (str): [optional] if omitted the server will use the default value of ""
            element_id (str): [optional] if omitted the server will use the default value of ""
            with_thumbnails (bool): [optional] if omitted the server will use the default value of False
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTDocumentElementInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_elements_in_document_endpoint.call_with_http_info(**kwargs)

    def get_insertables(
        self,
        did,
        wv,
        wvid,
        **kwargs
    ):
        """get_insertables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_insertables(did, wv, wvid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wv (str):
            wvid (str):

        Keyword Args:
            element_id (str): [optional]
            configuration (str): [optional]
            beta_capability_ids ([str]): [optional]
            include_parts (bool): [optional] if omitted the server will use the default value of False
            include_surfaces (bool): [optional] if omitted the server will use the default value of False
            include_sketches (bool): [optional] if omitted the server will use the default value of False
            include_reference_features (bool): [optional] if omitted the server will use the default value of False
            include_assemblies (bool): [optional] if omitted the server will use the default value of False
            include_feature_studios (bool): [optional] if omitted the server will use the default value of False
            include_blobs (bool): [optional] if omitted the server will use the default value of False
            allowed_blob_mime_types (str): [optional] if omitted the server will use the default value of ""
            exclude_newer_fs_versions (bool): [optional] if omitted the server will use the default value of False
            max_feature_script_version (int): [optional]
            include_part_studios (bool): [optional] if omitted the server will use the default value of False
            include_features (bool): [optional] if omitted the server will use the default value of False
            include_meshes (bool): [optional] if omitted the server will use the default value of False
            include_wires (bool): [optional] if omitted the server will use the default value of False
            include_flattened_bodies (bool): [optional] if omitted the server will use the default value of False
            include_applications (bool): [optional] if omitted the server will use the default value of False
            allowed_application_mime_types (str): [optional] if omitted the server will use the default value of ""
            include_composite_parts (bool): [optional] if omitted the server will use the default value of False
            include_fs_tables (bool): [optional] if omitted the server will use the default value of False
            include_fs_computed_part_property_functions (bool): [optional] if omitted the server will use the default value of False
            include_variables (bool): [optional] if omitted the server will use the default value of False
            include_variable_studios (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTInsertablesListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wv'] = \
            wv
        kwargs['wvid'] = \
            wvid
        return self.get_insertables_endpoint.call_with_http_info(**kwargs)

    def get_version(
        self,
        did,
        vid,
        **kwargs
    ):
        """Get Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version(did, vid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            vid (str):

        Keyword Args:
            parents (bool): [optional] if omitted the server will use the default value of False
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTVersionInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['vid'] = \
            vid
        return self.get_version_endpoint.call_with_http_info(**kwargs)

    def merge_into_workspace(
        self,
        did,
        wid,
        bt_version_or_workspace_info,
        **kwargs
    ):
        """Merge into workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_into_workspace(did, wid, bt_version_or_workspace_info, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            bt_version_or_workspace_info (BTVersionOrWorkspaceInfo):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTDocumentMergeInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['bt_version_or_workspace_info'] = \
            bt_version_or_workspace_info
        return self.merge_into_workspace_endpoint.call_with_http_info(**kwargs)

    def move_elements_to_document(
        self,
        did,
        wid,
        bt_move_element_params,
        **kwargs
    ):
        """Move Elements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.move_elements_to_document(did, wid, bt_move_element_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            bt_move_element_params (BTMoveElementParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTMoveElementInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['bt_move_element_params'] = \
            bt_move_element_params
        return self.move_elements_to_document_endpoint.call_with_http_info(**kwargs)

    def restore_from_history(
        self,
        did,
        wid,
        vm,
        vmid,
        **kwargs
    ):
        """Restore version or microversion to workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_from_history(did, wid, vm, vmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            vm (str):
            vmid (str):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTRestoreFromHistoryInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['vm'] = \
            vm
        kwargs['vmid'] = \
            vmid
        return self.restore_from_history_endpoint.call_with_http_info(**kwargs)

    def revert_unchanged_to_revisions(
        self,
        did,
        wid,
        **kwargs
    ):
        """revert_unchanged_to_revisions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revert_unchanged_to_revisions(did, wid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):

        Keyword Args:
            bt_revert_unchanged_params (BTRevertUnchangedParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTUnchangedElementInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        return self.revert_unchanged_to_revisions_endpoint.call_with_http_info(**kwargs)

    def search(
        self,
        bt_document_search_params,
        **kwargs
    ):
        """search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(bt_document_search_params, async_req=True)
        >>> result = thread.get()

        Args:
            bt_document_search_params (BTDocumentSearchParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['bt_document_search_params'] = \
            bt_document_search_params
        return self.search_endpoint.call_with_http_info(**kwargs)

    def share_document(
        self,
        did,
        bt_share_params,
        **kwargs
    ):
        """Share Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.share_document(did, bt_share_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            bt_share_params (BTShareParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTAclInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['bt_share_params'] = \
            bt_share_params
        return self.share_document_endpoint.call_with_http_info(**kwargs)

    def sync_application_elements(
        self,
        did,
        wid,
        bt_sync_app_element_params,
        **kwargs
    ):
        """sync_application_elements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sync_application_elements(did, wid, bt_sync_app_element_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            bt_sync_app_element_params (BTSyncAppElementParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['bt_sync_app_element_params'] = \
            bt_sync_app_element_params
        return self.sync_application_elements_endpoint.call_with_http_info(**kwargs)

    def un_share_document(
        self,
        did,
        eid,
        **kwargs
    ):
        """Unshare Document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.un_share_document(did, eid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            eid (str):

        Keyword Args:
            entry_type (int): [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['eid'] = \
            eid
        return self.un_share_document_endpoint.call_with_http_info(**kwargs)

    def update_document_attributes(
        self,
        did,
        bt_document_params,
        **kwargs
    ):
        """Update Document Attributes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_document_attributes(did, bt_document_params, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            bt_document_params (BTDocumentParams):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['bt_document_params'] = \
            bt_document_params
        return self.update_document_attributes_endpoint.call_with_http_info(**kwargs)

    def update_external_references_to_latest_documents(
        self,
        did,
        wid,
        eid,
        **kwargs
    ):
        """Update External References to Latest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_external_references_to_latest_documents(did, wid, eid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wid (str):
            eid (str):

        Keyword Args:
            bt_link_to_latest_document_params (BTLinkToLatestDocumentParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTLinkToLatestDocumentInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wid'] = \
            wid
        kwargs['eid'] = \
            eid
        return self.update_external_references_to_latest_documents_endpoint.call_with_http_info(**kwargs)

