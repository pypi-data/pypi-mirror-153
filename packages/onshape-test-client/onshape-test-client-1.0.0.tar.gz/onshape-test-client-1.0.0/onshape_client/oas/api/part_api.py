"""
    Onshape REST API

    The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn't used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here's [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.  # noqa: E501

    The version of the OpenAPI document: 1.143.3263-a9e651bcae07
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onshape_client.oas.api_client import ApiClient, Endpoint as _Endpoint
from onshape_client.oas.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from onshape_client.oas.model.bt_bounding_box_info import BTBoundingBoxInfo
from onshape_client.oas.model.bt_export_model_bodies_response734 import BTExportModelBodiesResponse734
from onshape_client.oas.model.bt_export_tessellated_edges_response327 import BTExportTessellatedEdgesResponse327
from onshape_client.oas.model.bt_mass_properties_bulk_info import BTMassPropertiesBulkInfo
from onshape_client.oas.model.bt_part_metadata_info import BTPartMetadataInfo
from onshape_client.oas.model.bt_shaded_views_info import BTShadedViewsInfo
from onshape_client.oas.model.bt_table_response1546 import BTTableResponse1546
from onshape_client.oas.model.bt_workspace_part_params import BTWorkspacePartParams


class PartApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.export_part_gltf_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/gltf',
                'operation_id': 'export_part_gltf',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                    'link_document_id',
                    'configuration',
                    'rollback_bar_index',
                    'element_microversion_id',
                    'angle_tolerance',
                    'chord_tolerance',
                    'precomputed_level_of_detail',
                    'output_separate_face_nodes',
                    'face_id',
                    'output_face_appearances',
                    'max_facet_width',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'iden':
                        (str,),
                    'partid':
                        (str,),
                    'pid':
                        (str,),
                    'link_document_id':
                        (str,),
                    'configuration':
                        (str,),
                    'rollback_bar_index':
                        (int,),
                    'element_microversion_id':
                        (str,),
                    'angle_tolerance':
                        (float,),
                    'chord_tolerance':
                        (float,),
                    'precomputed_level_of_detail':
                        (str,),
                    'output_separate_face_nodes':
                        (bool,),
                    'face_id':
                        ([str],),
                    'output_face_appearances':
                        (bool,),
                    'max_facet_width':
                        (float,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'iden': 'iden',
                    'partid': 'partid',
                    'pid': 'pid',
                    'link_document_id': 'linkDocumentId',
                    'configuration': 'configuration',
                    'rollback_bar_index': 'rollbackBarIndex',
                    'element_microversion_id': 'elementMicroversionId',
                    'angle_tolerance': 'angleTolerance',
                    'chord_tolerance': 'chordTolerance',
                    'precomputed_level_of_detail': 'precomputedLevelOfDetail',
                    'output_separate_face_nodes': 'outputSeparateFaceNodes',
                    'face_id': 'faceId',
                    'output_face_appearances': 'outputFaceAppearances',
                    'max_facet_width': 'maxFacetWidth',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'iden': 'path',
                    'partid': 'path',
                    'pid': 'path',
                    'link_document_id': 'query',
                    'configuration': 'query',
                    'rollback_bar_index': 'query',
                    'element_microversion_id': 'query',
                    'angle_tolerance': 'query',
                    'chord_tolerance': 'query',
                    'precomputed_level_of_detail': 'query',
                    'output_separate_face_nodes': 'query',
                    'face_id': 'query',
                    'output_face_appearances': 'query',
                    'max_facet_width': 'query',
                },
                'collection_format_map': {
                    'face_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'model/vnd.onshape.v1+gltf-binary;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.export_ps_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/parasolid',
                'operation_id': 'export_ps',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'version',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'version':
                        (str,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'version': 'version',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'version': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.export_stl_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/stl',
                'operation_id': 'export_stl',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'mode',
                    'grouping',
                    'scale',
                    'units',
                    'angle_tolerance',
                    'chord_tolerance',
                    'max_facet_width',
                    'min_facet_width',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'mode':
                        (str,),
                    'grouping':
                        (bool,),
                    'scale':
                        (float,),
                    'units':
                        (str,),
                    'angle_tolerance':
                        (float,),
                    'chord_tolerance':
                        (float,),
                    'max_facet_width':
                        (float,),
                    'min_facet_width':
                        (float,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'mode': 'mode',
                    'grouping': 'grouping',
                    'scale': 'scale',
                    'units': 'units',
                    'angle_tolerance': 'angleTolerance',
                    'chord_tolerance': 'chordTolerance',
                    'max_facet_width': 'maxFacetWidth',
                    'min_facet_width': 'minFacetWidth',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'mode': 'query',
                    'grouping': 'query',
                    'scale': 'query',
                    'units': 'query',
                    'angle_tolerance': 'query',
                    'chord_tolerance': 'query',
                    'max_facet_width': 'query',
                    'min_facet_width': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v1+octet-stream;charset=UTF-8;qs=0.1'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bend_table_endpoint = _Endpoint(
            settings={
                'response_type': (BTTableResponse1546,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/sheetmetal/bendtable',
                'operation_id': 'get_bend_table',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_body_details_endpoint = _Endpoint(
            settings={
                'response_type': (BTExportModelBodiesResponse734,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/bodydetails',
                'operation_id': 'get_body_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_bounding_boxes_endpoint = _Endpoint(
            settings={
                'response_type': (BTBoundingBoxInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/boundingboxes',
                'operation_id': 'get_bounding_boxes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'include_hidden',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'include_hidden':
                        (bool,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'include_hidden': 'includeHidden',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'include_hidden': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_edges_endpoint = _Endpoint(
            settings={
                'response_type': (BTExportTessellatedEdgesResponse327,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatededges',
                'operation_id': 'get_edges',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                    'link_document_id',
                    'configuration',
                    'rollback_bar_index',
                    'element_microversion_id',
                    'angle_tolerance',
                    'chord_tolerance',
                    'precomputed_level_of_detail',
                    'edge_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'iden':
                        (str,),
                    'partid':
                        (str,),
                    'pid':
                        (str,),
                    'link_document_id':
                        (str,),
                    'configuration':
                        (str,),
                    'rollback_bar_index':
                        (int,),
                    'element_microversion_id':
                        (str,),
                    'angle_tolerance':
                        (float,),
                    'chord_tolerance':
                        (float,),
                    'precomputed_level_of_detail':
                        (str,),
                    'edge_id':
                        ([str],),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'iden': 'iden',
                    'partid': 'partid',
                    'pid': 'pid',
                    'link_document_id': 'linkDocumentId',
                    'configuration': 'configuration',
                    'rollback_bar_index': 'rollbackBarIndex',
                    'element_microversion_id': 'elementMicroversionId',
                    'angle_tolerance': 'angleTolerance',
                    'chord_tolerance': 'chordTolerance',
                    'precomputed_level_of_detail': 'precomputedLevelOfDetail',
                    'edge_id': 'edgeId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'iden': 'path',
                    'partid': 'path',
                    'pid': 'path',
                    'link_document_id': 'query',
                    'configuration': 'query',
                    'rollback_bar_index': 'query',
                    'element_microversion_id': 'query',
                    'angle_tolerance': 'query',
                    'chord_tolerance': 'query',
                    'precomputed_level_of_detail': 'query',
                    'edge_id': 'query',
                },
                'collection_format_map': {
                    'edge_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_mass_properties_endpoint = _Endpoint(
            settings={
                'response_type': (BTMassPropertiesBulkInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/massproperties',
                'operation_id': 'get_mass_properties',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                    'link_document_id',
                    'configuration',
                    'rollback_bar_index',
                    'element_microversion_id',
                    'infer_metadata_owner',
                    'use_mass_property_overrides',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'iden':
                        (str,),
                    'partid':
                        (str,),
                    'pid':
                        (str,),
                    'link_document_id':
                        (str,),
                    'configuration':
                        (str,),
                    'rollback_bar_index':
                        (int,),
                    'element_microversion_id':
                        (str,),
                    'infer_metadata_owner':
                        (bool,),
                    'use_mass_property_overrides':
                        (bool,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'iden': 'iden',
                    'partid': 'partid',
                    'pid': 'pid',
                    'link_document_id': 'linkDocumentId',
                    'configuration': 'configuration',
                    'rollback_bar_index': 'rollbackBarIndex',
                    'element_microversion_id': 'elementMicroversionId',
                    'infer_metadata_owner': 'inferMetadataOwner',
                    'use_mass_property_overrides': 'useMassPropertyOverrides',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'iden': 'path',
                    'partid': 'path',
                    'pid': 'path',
                    'link_document_id': 'query',
                    'configuration': 'query',
                    'rollback_bar_index': 'query',
                    'element_microversion_id': 'query',
                    'infer_metadata_owner': 'query',
                    'use_mass_property_overrides': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_part_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (BTPartMetadataInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/metadata',
                'operation_id': 'get_part_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                    'link_document_id',
                    'configuration',
                    'rollback_bar_index',
                    'element_microversion_id',
                    'infer_metadata_owner',
                    'include_property_defaults',
                    'friendly_user_ids',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'iden',
                    'partid',
                    'pid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'iden':
                        (str,),
                    'partid':
                        (str,),
                    'pid':
                        (str,),
                    'link_document_id':
                        (str,),
                    'configuration':
                        (str,),
                    'rollback_bar_index':
                        (int,),
                    'element_microversion_id':
                        (str,),
                    'infer_metadata_owner':
                        (bool,),
                    'include_property_defaults':
                        (bool,),
                    'friendly_user_ids':
                        (bool,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'iden': 'iden',
                    'partid': 'partid',
                    'pid': 'pid',
                    'link_document_id': 'linkDocumentId',
                    'configuration': 'configuration',
                    'rollback_bar_index': 'rollbackBarIndex',
                    'element_microversion_id': 'elementMicroversionId',
                    'infer_metadata_owner': 'inferMetadataOwner',
                    'include_property_defaults': 'includePropertyDefaults',
                    'friendly_user_ids': 'friendlyUserIds',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'iden': 'path',
                    'partid': 'path',
                    'pid': 'path',
                    'link_document_id': 'query',
                    'configuration': 'query',
                    'rollback_bar_index': 'query',
                    'element_microversion_id': 'query',
                    'infer_metadata_owner': 'query',
                    'include_property_defaults': 'query',
                    'friendly_user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_part_shaded_views_endpoint = _Endpoint(
            settings={
                'response_type': (BTShadedViewsInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/shadedviews',
                'operation_id': 'get_part_shaded_views',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'view_matrix',
                    'output_height',
                    'output_width',
                    'pixel_size',
                    'edges',
                    'use_anti_aliasing',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'view_matrix':
                        (str,),
                    'output_height':
                        (int,),
                    'output_width':
                        (int,),
                    'pixel_size':
                        (float,),
                    'edges':
                        (str,),
                    'use_anti_aliasing':
                        (bool,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                    'view_matrix': 'viewMatrix',
                    'output_height': 'outputHeight',
                    'output_width': 'outputWidth',
                    'pixel_size': 'pixelSize',
                    'edges': 'edges',
                    'use_anti_aliasing': 'useAntiAliasing',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'view_matrix': 'query',
                    'output_height': 'query',
                    'output_width': 'query',
                    'pixel_size': 'query',
                    'edges': 'query',
                    'use_anti_aliasing': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_parts_wmv_endpoint = _Endpoint(
            settings={
                'response_type': ([BTPartMetadataInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}',
                'operation_id': 'get_parts_wmv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'element_id',
                    'with_thumbnails',
                    'include_property_defaults',
                    'include_flat_parts',
                    'link_document_id',
                    'configuration',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'element_id':
                        (str,),
                    'with_thumbnails':
                        (bool,),
                    'include_property_defaults':
                        (bool,),
                    'include_flat_parts':
                        (bool,),
                    'link_document_id':
                        (str,),
                    'configuration':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'element_id': 'elementId',
                    'with_thumbnails': 'withThumbnails',
                    'include_property_defaults': 'includePropertyDefaults',
                    'include_flat_parts': 'includeFlatParts',
                    'link_document_id': 'linkDocumentId',
                    'configuration': 'configuration',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'element_id': 'query',
                    'with_thumbnails': 'query',
                    'include_property_defaults': 'query',
                    'include_flat_parts': 'query',
                    'link_document_id': 'query',
                    'configuration': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_parts_wmve_endpoint = _Endpoint(
            settings={
                'response_type': ([BTPartMetadataInfo],),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}',
                'operation_id': 'get_parts_wmve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'with_thumbnails',
                    'include_property_defaults',
                    'include_flat_parts',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'with_thumbnails':
                        (bool,),
                    'include_property_defaults':
                        (bool,),
                    'include_flat_parts':
                        (bool,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'with_thumbnails': 'withThumbnails',
                    'include_property_defaults': 'includePropertyDefaults',
                    'include_flat_parts': 'includeFlatParts',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'with_thumbnails': 'query',
                    'include_property_defaults': 'query',
                    'include_flat_parts': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_standard_content_part_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (BTPartMetadataInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/partid/{partid}/metadata',
                'operation_id': 'get_standard_content_part_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'vid',
                    'eid',
                    'otype',
                    'oid',
                    'partid',
                    'include_property_defaults',
                    'configuration',
                    'link_document_id',
                ],
                'required': [
                    'did',
                    'vid',
                    'eid',
                    'otype',
                    'oid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'vid':
                        (str,),
                    'eid':
                        (str,),
                    'otype':
                        (str,),
                    'oid':
                        (str,),
                    'partid':
                        (str,),
                    'include_property_defaults':
                        (bool,),
                    'configuration':
                        (str,),
                    'link_document_id':
                        (str,),
                },
                'attribute_map': {
                    'did': 'did',
                    'vid': 'vid',
                    'eid': 'eid',
                    'otype': 'otype',
                    'oid': 'oid',
                    'partid': 'partid',
                    'include_property_defaults': 'includePropertyDefaults',
                    'configuration': 'configuration',
                    'link_document_id': 'linkDocumentId',
                },
                'location_map': {
                    'did': 'path',
                    'vid': 'path',
                    'eid': 'path',
                    'otype': 'path',
                    'oid': 'path',
                    'partid': 'path',
                    'include_property_defaults': 'query',
                    'configuration': 'query',
                    'link_document_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_part_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (BTPartMetadataInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/metadata',
                'operation_id': 'update_part_metadata',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                    'bt_workspace_part_params',
                ],
                'required': [
                    'did',
                    'wvm',
                    'wvmid',
                    'eid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'wvm':
                        (str,),
                    'wvmid':
                        (str,),
                    'eid':
                        (str,),
                    'partid':
                        (str,),
                    'bt_workspace_part_params':
                        (BTWorkspacePartParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'wvm': 'wvm',
                    'wvmid': 'wvmid',
                    'eid': 'eid',
                    'partid': 'partid',
                },
                'location_map': {
                    'did': 'path',
                    'wvm': 'path',
                    'wvmid': 'path',
                    'eid': 'path',
                    'partid': 'path',
                    'bt_workspace_part_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )
        self.update_standard_content_part_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (BTPartMetadataInfo,),
                'auth': [
                    'BasicAuth',
                    'OAuth2'
                ],
                'endpoint_path': '/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{otype}/{oid}/partid/{partid}/metadata',
                'operation_id': 'update_standard_content_part_metadata',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'did',
                    'vid',
                    'eid',
                    'otype',
                    'oid',
                    'partid',
                    'link_document_id',
                    'include_property_defaults',
                    'bt_workspace_part_params',
                ],
                'required': [
                    'did',
                    'vid',
                    'eid',
                    'otype',
                    'oid',
                    'partid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'did':
                        (str,),
                    'vid':
                        (str,),
                    'eid':
                        (str,),
                    'otype':
                        (str,),
                    'oid':
                        (str,),
                    'partid':
                        (str,),
                    'link_document_id':
                        (str,),
                    'include_property_defaults':
                        (bool,),
                    'bt_workspace_part_params':
                        (BTWorkspacePartParams,),
                },
                'attribute_map': {
                    'did': 'did',
                    'vid': 'vid',
                    'eid': 'eid',
                    'otype': 'otype',
                    'oid': 'oid',
                    'partid': 'partid',
                    'link_document_id': 'linkDocumentId',
                    'include_property_defaults': 'includePropertyDefaults',
                },
                'location_map': {
                    'did': 'path',
                    'vid': 'path',
                    'eid': 'path',
                    'otype': 'path',
                    'oid': 'path',
                    'partid': 'path',
                    'link_document_id': 'query',
                    'include_property_defaults': 'query',
                    'bt_workspace_part_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ],
                'content_type': [
                    'application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2'
                ]
            },
            api_client=api_client
        )

    def export_part_gltf(
        self,
        did,
        wvm,
        wvmid,
        eid,
        iden,
        partid,
        pid,
        **kwargs
    ):
        """Export glTF for part  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_part_gltf(did, wvm, wvmid, eid, iden, partid, pid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            iden (str):
            partid (str):
            pid (str):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            configuration (str): [optional] if omitted the server will use the default value of ""
            rollback_bar_index (int): [optional] if omitted the server will use the default value of -1
            element_microversion_id (str): [optional]
            angle_tolerance (float): [optional]
            chord_tolerance (float): [optional]
            precomputed_level_of_detail (str): [optional]
            output_separate_face_nodes (bool): [optional] if omitted the server will use the default value of False
            face_id ([str]): [optional]
            output_face_appearances (bool): [optional] if omitted the server will use the default value of False
            max_facet_width (float): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['iden'] = \
            iden
        kwargs['partid'] = \
            partid
        kwargs['pid'] = \
            pid
        return self.export_part_gltf_endpoint.call_with_http_info(**kwargs)

    def export_ps(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """Export Part to Parasolid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_ps(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            version (str): [optional] if omitted the server will use the default value of "0"
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.export_ps_endpoint.call_with_http_info(**kwargs)

    def export_stl(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """export_stl  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_stl(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            mode (str): [optional] if omitted the server will use the default value of "text"
            grouping (bool): [optional] if omitted the server will use the default value of True
            scale (float): [optional] if omitted the server will use the default value of 1.0
            units (str): [optional] if omitted the server will use the default value of "inch"
            angle_tolerance (float): [optional]
            chord_tolerance (float): [optional]
            max_facet_width (float): [optional]
            min_facet_width (float): [optional]
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.export_stl_endpoint.call_with_http_info(**kwargs)

    def get_bend_table(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """Get Sheet Metal Bend Table.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bend_table(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTTableResponse1546
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.get_bend_table_endpoint.call_with_http_info(**kwargs)

    def get_body_details(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """get_body_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_body_details(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTExportModelBodiesResponse734
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.get_body_details_endpoint.call_with_http_info(**kwargs)

    def get_bounding_boxes(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """get_bounding_boxes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_bounding_boxes(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            include_hidden (bool): [optional] if omitted the server will use the default value of False
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTBoundingBoxInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.get_bounding_boxes_endpoint.call_with_http_info(**kwargs)

    def get_edges(
        self,
        did,
        wvm,
        wvmid,
        eid,
        iden,
        partid,
        pid,
        **kwargs
    ):
        """Tessellated Edges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_edges(did, wvm, wvmid, eid, iden, partid, pid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            iden (str):
            partid (str):
            pid (str):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            configuration (str): [optional] if omitted the server will use the default value of ""
            rollback_bar_index (int): [optional] if omitted the server will use the default value of -1
            element_microversion_id (str): [optional]
            angle_tolerance (float): [optional]
            chord_tolerance (float): [optional]
            precomputed_level_of_detail (str): [optional]
            edge_id ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTExportTessellatedEdgesResponse327
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['iden'] = \
            iden
        kwargs['partid'] = \
            partid
        kwargs['pid'] = \
            pid
        return self.get_edges_endpoint.call_with_http_info(**kwargs)

    def get_mass_properties(
        self,
        did,
        wvm,
        wvmid,
        eid,
        iden,
        partid,
        pid,
        **kwargs
    ):
        """Mass properties of a part.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mass_properties(did, wvm, wvmid, eid, iden, partid, pid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            iden (str):
            partid (str):
            pid (str):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            configuration (str): [optional] if omitted the server will use the default value of ""
            rollback_bar_index (int): [optional] if omitted the server will use the default value of -1
            element_microversion_id (str): [optional]
            infer_metadata_owner (bool): [optional] if omitted the server will use the default value of True
            use_mass_property_overrides (bool): If true, use the user mass property overrides when calculated mass properties. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTMassPropertiesBulkInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['iden'] = \
            iden
        kwargs['partid'] = \
            partid
        kwargs['pid'] = \
            pid
        return self.get_mass_properties_endpoint.call_with_http_info(**kwargs)

    def get_part_metadata(
        self,
        did,
        wvm,
        wvmid,
        eid,
        iden,
        partid,
        pid,
        **kwargs
    ):
        """get_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_part_metadata(did, wvm, wvmid, eid, iden, partid, pid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            iden (str):
            partid (str):
            pid (str):

        Keyword Args:
            link_document_id (str): [optional] if omitted the server will use the default value of ""
            configuration (str): [optional] if omitted the server will use the default value of ""
            rollback_bar_index (int): [optional] if omitted the server will use the default value of -1
            element_microversion_id (str): [optional]
            infer_metadata_owner (bool): [optional] if omitted the server will use the default value of False
            include_property_defaults (bool): [optional] if omitted the server will use the default value of False
            friendly_user_ids (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTPartMetadataInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['iden'] = \
            iden
        kwargs['partid'] = \
            partid
        kwargs['pid'] = \
            pid
        return self.get_part_metadata_endpoint.call_with_http_info(**kwargs)

    def get_part_shaded_views(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """get_part_shaded_views  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_part_shaded_views(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            view_matrix (str): [optional] if omitted the server will use the default value of "front"
            output_height (int): [optional] if omitted the server will use the default value of 500
            output_width (int): [optional] if omitted the server will use the default value of 500
            pixel_size (float): [optional] if omitted the server will use the default value of 0.003
            edges (str): [optional] if omitted the server will use the default value of "show"
            use_anti_aliasing (bool): [optional] if omitted the server will use the default value of False
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTShadedViewsInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.get_part_shaded_views_endpoint.call_with_http_info(**kwargs)

    def get_parts_wmv(
        self,
        did,
        wvm,
        wvmid,
        **kwargs
    ):
        """Get list of parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parts_wmv(did, wvm, wvmid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str): Document ID.
            wvm (str): One of w or v or m corresponding to whether a workspace or version or microversion was entered.
            wvmid (str): Workspace (w), Version (v) or Microversion (m) ID.

        Keyword Args:
            element_id (str): Element ID. [optional]
            with_thumbnails (bool): Whether or not to include thumbnails (not supported for microversion). [optional] if omitted the server will use the default value of False
            include_property_defaults (bool): If true, include metadata schema property defaults in response. [optional] if omitted the server will use the default value of False
            include_flat_parts (bool): [optional]
            link_document_id (str): Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.. [optional]
            configuration (str): Configuration string.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTPartMetadataInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        return self.get_parts_wmv_endpoint.call_with_http_info(**kwargs)

    def get_parts_wmve(
        self,
        did,
        wvm,
        wvmid,
        eid,
        **kwargs
    ):
        """Get parts from an element.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parts_wmve(did, wvm, wvmid, eid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str): Document ID.
            wvm (str): One of w or v or m corresponding to whether a workspace or version or microversion was entered.
            wvmid (str): Workspace (w), Version (v) or Microversion (m) ID.
            eid (str): Element ID.

        Keyword Args:
            with_thumbnails (bool): Whether or not to include thumbnails (not supported for microversion). [optional] if omitted the server will use the default value of False
            include_property_defaults (bool): If true, include metadata schema property defaults in response. [optional] if omitted the server will use the default value of False
            include_flat_parts (bool): [optional]
            configuration (str): Configuration string.. [optional]
            link_document_id (str): Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BTPartMetadataInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        return self.get_parts_wmve_endpoint.call_with_http_info(**kwargs)

    def get_standard_content_part_metadata(
        self,
        did,
        vid,
        eid,
        otype,
        oid,
        partid,
        **kwargs
    ):
        """get_standard_content_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_standard_content_part_metadata(did, vid, eid, otype, oid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            vid (str):
            eid (str):
            otype (str):
            oid (str):
            partid (str):

        Keyword Args:
            include_property_defaults (bool): [optional] if omitted the server will use the default value of False
            configuration (str): [optional]
            link_document_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTPartMetadataInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['vid'] = \
            vid
        kwargs['eid'] = \
            eid
        kwargs['otype'] = \
            otype
        kwargs['oid'] = \
            oid
        kwargs['partid'] = \
            partid
        return self.get_standard_content_part_metadata_endpoint.call_with_http_info(**kwargs)

    def update_part_metadata(
        self,
        did,
        wvm,
        wvmid,
        eid,
        partid,
        **kwargs
    ):
        """update_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_part_metadata(did, wvm, wvmid, eid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            wvm (str):
            wvmid (str):
            eid (str):
            partid (str):

        Keyword Args:
            bt_workspace_part_params (BTWorkspacePartParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTPartMetadataInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['wvm'] = \
            wvm
        kwargs['wvmid'] = \
            wvmid
        kwargs['eid'] = \
            eid
        kwargs['partid'] = \
            partid
        return self.update_part_metadata_endpoint.call_with_http_info(**kwargs)

    def update_standard_content_part_metadata(
        self,
        did,
        vid,
        eid,
        otype,
        oid,
        partid,
        **kwargs
    ):
        """update_standard_content_part_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_standard_content_part_metadata(did, vid, eid, otype, oid, partid, async_req=True)
        >>> result = thread.get()

        Args:
            did (str):
            vid (str):
            eid (str):
            otype (str):
            oid (str):
            partid (str):

        Keyword Args:
            link_document_id (str): [optional]
            include_property_defaults (bool): [optional] if omitted the server will use the default value of False
            bt_workspace_part_params (BTWorkspacePartParams): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BTPartMetadataInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['did'] = \
            did
        kwargs['vid'] = \
            vid
        kwargs['eid'] = \
            eid
        kwargs['otype'] = \
            otype
        kwargs['oid'] = \
            oid
        kwargs['partid'] = \
            partid
        return self.update_standard_content_part_metadata_endpoint.call_with_http_info(**kwargs)

