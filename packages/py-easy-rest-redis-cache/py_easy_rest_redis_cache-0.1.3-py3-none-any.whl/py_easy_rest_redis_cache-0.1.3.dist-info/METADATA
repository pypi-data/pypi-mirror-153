Metadata-Version: 2.1
Name: py-easy-rest-redis-cache
Version: 0.1.3
Summary: Redis cache to use with Py Easy REST
Author: Jean Pinzon
Author-email: jean.pinzon1@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: aioredis (==1.3.1)
Provides-Extra: tests
Requires-Dist: pytest (==7.1.2) ; extra == 'tests'
Requires-Dist: pytest-asyncio (==0.14.0) ; extra == 'tests'
Requires-Dist: pytest-cov (==2.10.1) ; extra == 'tests'
Requires-Dist: flake8 (==3.8.4) ; extra == 'tests'
Requires-Dist: aiounittest (==1.4.0) ; extra == 'tests'
Requires-Dist: twine (==3.3.0) ; extra == 'tests'
Requires-Dist: build (==0.3.1.post1) ; extra == 'tests'

![Lint](https://github.com/JeanPinzon/py-easy-rest-redis-cache/actions/workflows/python-lint.yml/badge.svg)
![Build and Test](https://github.com/JeanPinzon/py-easy-rest-redis-cache/actions/workflows/python-test.yml/badge.svg)
![Upload Package](https://github.com/JeanPinzon/py-easy-rest-redis-cache/actions/workflows/python-publish.yml/badge.svg)
[![PyPI version](https://badge.fury.io/py/py-easy-rest-redis-cache.svg)](https://badge.fury.io/py/py-easy-rest-redis-cache)

# py-easy-rest-redis-cache

Cache lib to use with [py-easy-rest](https://github.com/JeanPinzon/py-easy-rest)


## Getting Started

### How to install

`pip install py-easy-rest py-easy-rest-redis-cache`


### Integrating with your [py-easy-rest](https://github.com/JeanPinzon/py-easy-rest) app


```python
#main.py
from py_easy_rest import PYRSanicAppBuilder
from py_easy_rest.service import PYRService
from py_easy_rest_redis_cache import PYRRedisCache


config = {
    "name": "Project Name",
    "schemas": [{
        "name": "Mock",
        "slug": "mock",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "integer"},
        },
        "required": ["name"],
    }]
}

cache = PYRRedisCache("redis://localhost")

service = PYRService(api_config_mock, cache=cache)
sanic_app = PYRSanicAppBuilder.build(api_config_mock, service)

sanic_app.run(
    host='0.0.0.0',
    port=8000,
    debug=True,
)

```
