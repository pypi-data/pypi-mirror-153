# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import collibra_catalog
from collibra_catalog.models.refresh_jdbc_schema_request import RefreshJdbcSchemaRequest  # noqa: E501
from collibra_catalog.rest import ApiException

class TestRefreshJdbcSchemaRequest(unittest.TestCase):
    """RefreshJdbcSchemaRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RefreshJdbcSchemaRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = collibra_catalog.models.refresh_jdbc_schema_request.RefreshJdbcSchemaRequest()  # noqa: E501
        if include_optional :
            return RefreshJdbcSchemaRequest(
                schema_id = '0', 
                jdbc_driver_id = '0', 
                properties = {
                    'key' : '0'
                    }, 
                user = '0', 
                password = [
                    '0'
                    ], 
                jdbc_connection_string = '0', 
                store_credentials = True, 
                override_password = True, 
                cron_expression = '0', 
                cron_time_zone = '0', 
                extract_data_sample = True, 
                execute_profiling = True, 
                detect_advanced_data_types = True, 
                tables_to_skip = [
                    '0'
                    ], 
                job_server = '0'
            )
        else :
            return RefreshJdbcSchemaRequest(
                schema_id = '0',
                jdbc_driver_id = '0',
                properties = {
                    'key' : '0'
                    },
                user = '0',
        )

    def testRefreshJdbcSchemaRequest(self):
        """Test RefreshJdbcSchemaRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
