# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import collibra_catalog
from collibra_catalog.models.column_profile import ColumnProfile  # noqa: E501
from collibra_catalog.rest import ApiException

class TestColumnProfile(unittest.TestCase):
    """ColumnProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ColumnProfile
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = collibra_catalog.models.column_profile.ColumnProfile()  # noqa: E501
        if include_optional :
            return ColumnProfile(
                asset_identifier = collibra_catalog.models.asset_identifier.AssetIdentifier(
                    id = '0', 
                    asset_name = '0', 
                    domain_id = '0', 
                    community_name = '0', 
                    domain_name = '0', ), 
                column_name = '0', 
                technical_data_type = '0', 
                data_type = '0', 
                column_position = 56, 
                counts = collibra_catalog.models.counts.Counts(
                    row_count = 56, 
                    empty_values_count = 56, 
                    distinct_values_count = 56, 
                    mode = '0', ), 
                samples = collibra_catalog.models.samples.Samples(
                    samples = [
                        '0'
                        ], ), 
                statistics = collibra_catalog.models.statistics.Statistics(
                    mean = 1.337, 
                    variance = 1.337, 
                    standard_deviation = 1.337, 
                    minimum = '0', 
                    maximum = '0', 
                    minimum_text_length = 56, 
                    maximum_text_length = 56, ), 
                database_metadata = collibra_catalog.models.database_metadata.DatabaseMetadata(
                    default_value = '0', 
                    number_of_decimal_digits = 56, 
                    char_octet_length = 56, 
                    column_size = 56, 
                    primary_key_name = '0', 
                    is_nullable = True, 
                    is_auto_incremented = True, 
                    is_generated = True, 
                    is_primary_key = True, ), 
                categorical_metadata = collibra_catalog.models.categorical_metadata.CategoricalMetadata(
                    categorical = True, 
                    categories_frequencies = {
                        'key' : 56
                        }, ), 
                quantiles = collibra_catalog.models.quantiles.Quantiles(
                    percentile1 = '0', 
                    percentile5 = '0', 
                    decile1 = '0', 
                    quartile1 = '0', 
                    median = '0', 
                    quartile3 = '0', 
                    decile9 = '0', 
                    percentile95 = '0', 
                    percentile99 = '0', ), 
                distributions = collibra_catalog.models.distributions.Distributions(
                    distribution_density_estimation = [
                        collibra_catalog.models.point.Point(
                            x = 1.337, 
                            y = 1.337, )
                        ], 
                    histogram = [
                        collibra_catalog.models.histogram_bin.HistogramBin(
                            lower_bound = '0', 
                            upper_bound = '0', 
                            frequency = 56, 
                            lower_bound_in_iso_date_format = '0', 
                            upper_bound_in_iso_date_format = '0', )
                        ], )
            )
        else :
            return ColumnProfile(
                asset_identifier = collibra_catalog.models.asset_identifier.AssetIdentifier(
                    id = '0', 
                    asset_name = '0', 
                    domain_id = '0', 
                    community_name = '0', 
                    domain_name = '0', ),
        )

    def testColumnProfile(self):
        """Test ColumnProfile"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
