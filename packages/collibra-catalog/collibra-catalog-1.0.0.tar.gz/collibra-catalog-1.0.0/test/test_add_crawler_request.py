# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import collibra_catalog
from collibra_catalog.models.add_crawler_request import AddCrawlerRequest  # noqa: E501
from collibra_catalog.rest import ApiException

class TestAddCrawlerRequest(unittest.TestCase):
    """AddCrawlerRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AddCrawlerRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = collibra_catalog.models.add_crawler_request.AddCrawlerRequest()  # noqa: E501
        if include_optional :
            return AddCrawlerRequest(
                name = '0', 
                include_paths = [
                    collibra_catalog.models.crawler_include_path_request.CrawlerIncludePathRequest(
                        path = '0', 
                        exclude_patterns = [
                            '0'
                            ], )
                    ], 
                s3_file_system_asset_id = '0', 
                domain_id = '0'
            )
        else :
            return AddCrawlerRequest(
                name = '0',
                include_paths = [
                    collibra_catalog.models.crawler_include_path_request.CrawlerIncludePathRequest(
                        path = '0', 
                        exclude_patterns = [
                            '0'
                            ], )
                    ],
                s3_file_system_asset_id = '0',
                domain_id = '0',
        )

    def testAddCrawlerRequest(self):
        """Test AddCrawlerRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
