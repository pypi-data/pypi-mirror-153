# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_catalog.configuration import Configuration


class CategoricalMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categorical': 'bool',
        'categories_frequencies': 'dict(str, int)'
    }

    attribute_map = {
        'categorical': 'categorical',
        'categories_frequencies': 'categoriesFrequencies'
    }

    def __init__(self, categorical=None, categories_frequencies=None, local_vars_configuration=None):  # noqa: E501
        """CategoricalMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._categorical = None
        self._categories_frequencies = None
        self.discriminator = None

        if categorical is not None:
            self.categorical = categorical
        if categories_frequencies is not None:
            self.categories_frequencies = categories_frequencies

    @property
    def categorical(self):
        """Gets the categorical of this CategoricalMetadata.  # noqa: E501


        :return: The categorical of this CategoricalMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._categorical

    @categorical.setter
    def categorical(self, categorical):
        """Sets the categorical of this CategoricalMetadata.


        :param categorical: The categorical of this CategoricalMetadata.  # noqa: E501
        :type: bool
        """

        self._categorical = categorical

    @property
    def categories_frequencies(self):
        """Gets the categories_frequencies of this CategoricalMetadata.  # noqa: E501


        :return: The categories_frequencies of this CategoricalMetadata.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._categories_frequencies

    @categories_frequencies.setter
    def categories_frequencies(self, categories_frequencies):
        """Sets the categories_frequencies of this CategoricalMetadata.


        :param categories_frequencies: The categories_frequencies of this CategoricalMetadata.  # noqa: E501
        :type: dict(str, int)
        """

        self._categories_frequencies = categories_frequencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoricalMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CategoricalMetadata):
            return True

        return self.to_dict() != other.to_dict()
