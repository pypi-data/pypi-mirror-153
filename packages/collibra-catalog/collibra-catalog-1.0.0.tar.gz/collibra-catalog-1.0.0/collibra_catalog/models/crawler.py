# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_catalog.configuration import Configuration


class Crawler(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crawler_id': 'str',
        'name': 'str',
        'include_paths': 'list[CrawlerIncludePath]',
        's3_file_system_id': 'str',
        'domain_id': 'str'
    }

    attribute_map = {
        'crawler_id': 'crawlerId',
        'name': 'name',
        'include_paths': 'includePaths',
        's3_file_system_id': 's3FileSystemId',
        'domain_id': 'domainId'
    }

    def __init__(self, crawler_id=None, name=None, include_paths=None, s3_file_system_id=None, domain_id=None, local_vars_configuration=None):  # noqa: E501
        """Crawler - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._crawler_id = None
        self._name = None
        self._include_paths = None
        self._s3_file_system_id = None
        self._domain_id = None
        self.discriminator = None

        if crawler_id is not None:
            self.crawler_id = crawler_id
        if name is not None:
            self.name = name
        if include_paths is not None:
            self.include_paths = include_paths
        if s3_file_system_id is not None:
            self.s3_file_system_id = s3_file_system_id
        if domain_id is not None:
            self.domain_id = domain_id

    @property
    def crawler_id(self):
        """Gets the crawler_id of this Crawler.  # noqa: E501


        :return: The crawler_id of this Crawler.  # noqa: E501
        :rtype: str
        """
        return self._crawler_id

    @crawler_id.setter
    def crawler_id(self, crawler_id):
        """Sets the crawler_id of this Crawler.


        :param crawler_id: The crawler_id of this Crawler.  # noqa: E501
        :type: str
        """

        self._crawler_id = crawler_id

    @property
    def name(self):
        """Gets the name of this Crawler.  # noqa: E501


        :return: The name of this Crawler.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Crawler.


        :param name: The name of this Crawler.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def include_paths(self):
        """Gets the include_paths of this Crawler.  # noqa: E501


        :return: The include_paths of this Crawler.  # noqa: E501
        :rtype: list[CrawlerIncludePath]
        """
        return self._include_paths

    @include_paths.setter
    def include_paths(self, include_paths):
        """Sets the include_paths of this Crawler.


        :param include_paths: The include_paths of this Crawler.  # noqa: E501
        :type: list[CrawlerIncludePath]
        """

        self._include_paths = include_paths

    @property
    def s3_file_system_id(self):
        """Gets the s3_file_system_id of this Crawler.  # noqa: E501


        :return: The s3_file_system_id of this Crawler.  # noqa: E501
        :rtype: str
        """
        return self._s3_file_system_id

    @s3_file_system_id.setter
    def s3_file_system_id(self, s3_file_system_id):
        """Sets the s3_file_system_id of this Crawler.


        :param s3_file_system_id: The s3_file_system_id of this Crawler.  # noqa: E501
        :type: str
        """

        self._s3_file_system_id = s3_file_system_id

    @property
    def domain_id(self):
        """Gets the domain_id of this Crawler.  # noqa: E501


        :return: The domain_id of this Crawler.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this Crawler.


        :param domain_id: The domain_id of this Crawler.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Crawler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Crawler):
            return True

        return self.to_dict() != other.to_dict()
