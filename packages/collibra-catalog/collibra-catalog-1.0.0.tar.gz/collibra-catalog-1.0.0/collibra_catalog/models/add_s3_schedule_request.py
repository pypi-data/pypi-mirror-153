# coding: utf-8

"""
    Collibra Catalog API

    The Catalog API offers functionality related to the catalog product.<br/>It is mainly focused on facilitating the ingestion of information into Catalog. The API enables users to more easily connect Catalog to sources that are not necessarily natively supported in the product.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_catalog.configuration import Configuration


class AddS3ScheduleRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        's3_file_system_asset_id': 'str',
        'cron_expression': 'str',
        'cron_time_zone': 'str',
        'cron_json': 'str'
    }

    attribute_map = {
        's3_file_system_asset_id': 's3FileSystemAssetId',
        'cron_expression': 'cronExpression',
        'cron_time_zone': 'cronTimeZone',
        'cron_json': 'cronJson'
    }

    def __init__(self, s3_file_system_asset_id=None, cron_expression=None, cron_time_zone=None, cron_json=None, local_vars_configuration=None):  # noqa: E501
        """AddS3ScheduleRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._s3_file_system_asset_id = None
        self._cron_expression = None
        self._cron_time_zone = None
        self._cron_json = None
        self.discriminator = None

        self.s3_file_system_asset_id = s3_file_system_asset_id
        self.cron_expression = cron_expression
        self.cron_time_zone = cron_time_zone
        if cron_json is not None:
            self.cron_json = cron_json

    @property
    def s3_file_system_asset_id(self):
        """Gets the s3_file_system_asset_id of this AddS3ScheduleRequest.  # noqa: E501


        :return: The s3_file_system_asset_id of this AddS3ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._s3_file_system_asset_id

    @s3_file_system_asset_id.setter
    def s3_file_system_asset_id(self, s3_file_system_asset_id):
        """Sets the s3_file_system_asset_id of this AddS3ScheduleRequest.


        :param s3_file_system_asset_id: The s3_file_system_asset_id of this AddS3ScheduleRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and s3_file_system_asset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `s3_file_system_asset_id`, must not be `None`")  # noqa: E501

        self._s3_file_system_asset_id = s3_file_system_asset_id

    @property
    def cron_expression(self):
        """Gets the cron_expression of this AddS3ScheduleRequest.  # noqa: E501


        :return: The cron_expression of this AddS3ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this AddS3ScheduleRequest.


        :param cron_expression: The cron_expression of this AddS3ScheduleRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cron_expression is None:  # noqa: E501
            raise ValueError("Invalid value for `cron_expression`, must not be `None`")  # noqa: E501

        self._cron_expression = cron_expression

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this AddS3ScheduleRequest.  # noqa: E501


        :return: The cron_time_zone of this AddS3ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this AddS3ScheduleRequest.


        :param cron_time_zone: The cron_time_zone of this AddS3ScheduleRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cron_time_zone is None:  # noqa: E501
            raise ValueError("Invalid value for `cron_time_zone`, must not be `None`")  # noqa: E501

        self._cron_time_zone = cron_time_zone

    @property
    def cron_json(self):
        """Gets the cron_json of this AddS3ScheduleRequest.  # noqa: E501


        :return: The cron_json of this AddS3ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._cron_json

    @cron_json.setter
    def cron_json(self, cron_json):
        """Sets the cron_json of this AddS3ScheduleRequest.


        :param cron_json: The cron_json of this AddS3ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._cron_json = cron_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddS3ScheduleRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddS3ScheduleRequest):
            return True

        return self.to_dict() != other.to_dict()
