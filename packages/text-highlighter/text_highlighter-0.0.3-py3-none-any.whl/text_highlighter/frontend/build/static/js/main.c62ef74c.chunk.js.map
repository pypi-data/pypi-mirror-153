{"version":3,"sources":["TextHighlighter.tsx","index.tsx"],"names":["MyComponent","state","tag","isFocused","render","annotations","props","args","colors","labels","text","theme","style","borderStyling","primaryColor","border","outline","initial","value","setState","length","onChange","e","target","map","label","key","maxWidth","lineHeight","content","updateState","getSpan","span","color","indexOf","callback","Streamlit","setComponentValue","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","TextHighlighter","document","getElementById"],"mappings":"wRAkBMA,E,4MACGC,MAAQ,CAAEC,IAAK,GAAIC,WAAW,G,EAE9BC,OAAS,WAGd,IAAMC,EAAc,EAAKC,MAAMC,KAAX,YACdC,EAAS,EAAKF,MAAMC,KAAX,OACTE,EAAS,EAAKH,MAAMC,KAAX,OACTG,EAAO,EAAKJ,MAAMC,KAAX,KAKLI,EAAU,EAAKL,MAAfK,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBAAgB,EAAKZ,MAAME,UAAYQ,EAAMG,aAAe,QAE/EF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAQlB,OACE,kBAAC,IAAD,CAAOI,QAAS,CAAEC,MAAOb,EAAaH,IAAKO,EAAO,MAC/C,gBAAGR,EAAH,EAAGA,MAAOkB,EAAV,EAAUA,SAAV,OACC,8BACGV,EAAOW,OAAS,GAAK,4BACpBC,SAAU,SAAAC,GAAC,OAAIH,EAAS,CAAEjB,IAAKoB,EAAEC,OAAOL,SACxCA,MAAOjB,EAAMC,KAEZO,EAAOe,KAAI,SAACC,GAAD,OACV,4BAAQC,IAAKD,EAAOP,MAAOO,GACxBA,OAIP,kBAAC,gBAAD,CACEb,MAAO,CACLe,SAAU,IACVC,WAAY,KAEdC,QAASnB,EACTQ,MAAOjB,EAAMiB,MACbG,SAAU,SAACH,GAAD,OAAgB,EAAKY,YAAYZ,EAAOC,IAClDY,QAAS,SAAAC,GAAI,kCACRA,GADQ,IAEX9B,IAAKD,EAAMC,IACX+B,MAAOzB,EAAOC,EAAOyB,QAAQjC,EAAMC,gB,EAUzC4B,YAAc,SAACZ,EAAYiB,GACjCA,EAAS,CAAEjB,UACXkB,IAAUC,kBAAkBnB,I,EAItBoB,SAAW,WACjB,EAAKnB,SAAS,CAAEhB,WAAW,K,EAIrBoC,QAAU,WAChB,EAAKpB,SAAS,CAAEhB,WAAW,K,yBAhFLqC,KAyFXC,cAAwBzC,GCvGvC0C,IAAStC,OACP,kBAACuC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c62ef74c.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { TextAnnotator } from 'react-text-annotate'\nimport { State } from 'react-powerplug'\n\ninterface BaseState {\n  isFocused: boolean,\n  tag: string,\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<BaseState> {\n  public state = { tag: '', isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const annotations = this.props.args[\"annotations\"]\n    const colors = this.props.args[\"colors\"]\n    const labels = this.props.args[\"labels\"]\n    const text = this.props.args[\"text\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"\n        }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    // initial={{ value: [{ start: 18, end: 28, tag: 'PERSON' }], tag: 'PERSON' }}\n    return (\n      <State initial={{ value: annotations, tag: labels[0] }}>\n        {({ state, setState }) => (\n          <span>\n            {labels.length > 1 && <select\n              onChange={e => setState({ tag: e.target.value })}\n              value={state.tag}\n            >\n              {labels.map((label: any) => (\n                <option key={label} value={label}>\n                  {label}\n                </option>\n              ))}\n            </select>}\n            <TextAnnotator\n              style={{\n                maxWidth: 500,\n                lineHeight: 1.5\n              }}\n              content={text}\n              value={state.value}\n              onChange={(value: any) => this.updateState(value, setState)}\n              getSpan={span => ({\n                ...span,\n                tag: state.tag,\n                color: colors[labels.indexOf(state.tag)],\n              })}\n            />\n          </span>\n        )}\n      </State>\n\n    )\n  }\n\n  private updateState = (value: any, callback: any): void => {\n    callback({ value });\n    Streamlit.setComponentValue(value);\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TextHighlighter from \"./TextHighlighter\"\n\nReactDOM.render(\n  <TextHighlighter />,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}