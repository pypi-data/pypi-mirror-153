{"version":3,"sources":["TextHighlighter.tsx","index.tsx"],"names":["MyComponent","state","numClicks","isFocused","render","annotations","props","args","theme","style","borderStyling","primaryColor","border","outline","initial","value","tag","setState","onChange","e","target","maxWidth","lineHeight","content","updateState","getSpan","span","color","backgroundColor","fontSize","height","JSON","stringify","callback","Streamlit","setComponentValue","onClicked","prevState","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","TextHighlighter","document","getElementById"],"mappings":"wRAoBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAEnCC,OAAS,WAGd,IAAMC,EAAc,EAAKC,MAAMC,KAAX,YAKZC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBAAgB,EAAKT,MAAME,UAAYK,EAAMG,aAAe,QAE/EF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAQlB,OACE,kBAAC,IAAD,CAAOI,QAAS,CAAEC,MAAOV,EAAaW,IAAK,YACxC,gBAAGf,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,SAAV,OACC,8BACE,4BACEC,SAAU,SAAAC,GAAC,OAAIF,EAAS,CAAED,IAAKG,EAAEC,OAAOL,SACxCA,MAAOd,EAAMe,KAEb,4BAAQD,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,WAEF,kBAAC,gBAAD,CACEN,MAAO,CACLY,SAAU,IACVC,WAAY,KAEdC,QApDD,eAqDCR,MAAOd,EAAMc,MACbG,SAAU,SAACH,GAAD,OAAgB,EAAKS,YAAYT,EAAOE,IAClDQ,QAAS,SAAAC,GAAI,kCACRA,GADQ,IAEXV,IAAKf,EAAMe,IACXW,MAAO,WAGX,yBAAKlB,MAAO,CAAEmB,gBAAiB,QAASC,SAAU,GAAIP,WAAY,IAAKQ,OAAQ,UAC5EC,KAAKC,UAAU/B,EAAO,KAAM,S,EAQjCuB,YAAc,SAACT,EAAYkB,GACjCA,EAAS,CAAElB,UACXmB,IAAUC,kBAAkBpB,I,EAItBqB,UAAY,WAGlB,EAAKnB,UACH,SAAAoB,GAAS,MAAK,CAAEnC,UAAWmC,EAAUnC,UAAY,MACjD,kBAAMgC,IAAUC,kBAAkB,EAAKlC,MAAMC,e,EAKzCoC,SAAW,WACjB,EAAKrB,SAAS,CAAEd,WAAW,K,EAIrBoC,QAAU,WAChB,EAAKtB,SAAS,CAAEd,WAAW,K,yBAtFLqC,KA+FXC,cAAwBzC,GC/GvC0C,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e98670c6.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { TokenAnnotator, TextAnnotator } from 'react-text-annotate'\nimport { State } from 'react-powerplug'\n\ninterface BaseState {\n  numClicks: number\n  isFocused: boolean\n}\n\nconst TEXT = \"Hello world!\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<BaseState> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const annotations = this.props.args[\"annotations\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"\n        }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    // initial={{ value: [{ start: 18, end: 28, tag: 'PERSON' }], tag: 'PERSON' }}\n    return (\n      <State initial={{ value: annotations, tag: 'PERSON' }}>\n        {({ state, setState }) => (\n          <span>\n            <select\n              onChange={e => setState({ tag: e.target.value })}\n              value={state.tag}\n            >\n              <option value=\"ORG\">ORG</option>\n              <option value=\"PERSON\">PERSON</option>\n            </select>\n            <TextAnnotator\n              style={{\n                maxWidth: 500,\n                lineHeight: 1.5,\n              }}\n              content={TEXT}\n              value={state.value}\n              onChange={(value: any) => this.updateState(value, setState)}\n              getSpan={span => ({\n                ...span,\n                tag: state.tag,\n                color: \"red\",\n              })}\n            />\n            <pre style={{ backgroundColor: 'white', fontSize: 12, lineHeight: 1.2, height: '200px' }}>\n              {JSON.stringify(state, null, 2)}\n            </pre>\n          </span>\n        )}\n      </State>\n    )\n  }\n\n  private updateState = (value: any, callback: any): void => {\n    callback({ value });\n    Streamlit.setComponentValue(value);\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TextHighlighter from \"./TextHighlighter\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextHighlighter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}