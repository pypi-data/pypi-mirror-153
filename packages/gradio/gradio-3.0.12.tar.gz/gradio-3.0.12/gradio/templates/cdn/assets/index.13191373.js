import{S as U,i as q,s as F,d as k,v as I,y as O,h as v,w as K,k as H,b as _,c as y,t as D,e as L,f as p,l as J,a2 as Q,m as W,n as N,g as M,R as V,T as X,I as Y,L as Z,B as x,C as E,D as P,E as j,F as S,K as $,U as ee,V as oe,M as te}from"./index.075cb19a.js";import{g as T}from"./styles.db46e346.js";import{B as z}from"./Block.ade65ad9.js";const C="Users/aliabid/projects/gradio/ui/packages/form/src/Checkbox.svelte";function B(s){let e,o,r,h,l,u,a,m;const f={c:function(){e=v("label"),o=v("input"),h=K(),l=v("span"),u=H(s[1]),o.disabled=s[0],_(o,"type","checkbox"),_(o,"name","test"),_(o,"class",r="gr-check-radio gr-checkbox "+s[3]+" "+s[2]),y(o,C,20,1,650),_(l,"class","ml-2"),y(l,C,27,1,805),_(e,"class","flex items-center text-gray-700 text-sm space-x-2 rounded-lg cursor-pointer dark:bg-transparent "),D(e,"!cursor-not-allowed",s[0]),y(e,C,16,0,496)},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,c){L(i,e,c),p(e,o),p(e,h),p(e,l),p(l,u),a||(m=J(o,"change",s[8],!1,!1,!1),a=!0)},p:function(i,[c]){c&1&&Q(o,"disabled",i[0]),c&12&&r!==(r="gr-check-radio gr-checkbox "+i[3]+" "+i[2])&&_(o,"class",r),c&2&&W(u,i[1]),c&1&&D(e,"!cursor-not-allowed",i[0])},i:N,o:N,d:function(i){i&&M(e),a=!1,m()}};return k("SvelteRegisterBlock",{block:f,id:B.name,type:"component",source:"",ctx:s}),f}function se(s,e,o){let r,h,{$$slots:l={},$$scope:u}=e;I("Checkbox",l,[]);let{value:a}=e,{style:m={}}=e,{disabled:f=!1}=e,{label:d}=e,{show_label:i}=e;const c=O();function b(n){o(5,a=n.target?.checked),c("change",a)}const g=["value","style","disabled","label","show_label"];Object.keys(e).forEach(n=>{!~g.indexOf(n)&&n.slice(0,2)!=="$$"&&n!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${n}'`)});const w=n=>b(n);return s.$$set=n=>{"value"in n&&o(5,a=n.value),"style"in n&&o(6,m=n.style),"disabled"in n&&o(0,f=n.disabled),"label"in n&&o(1,d=n.label),"show_label"in n&&o(7,i=n.show_label)},s.$capture_state=()=>({get_styles:T,createEventDispatcher:O,value:a,style:m,disabled:f,label:d,show_label:i,dispatch:c,handle_change:b,border:h,rounded:r}),s.$inject_state=n=>{"value"in n&&o(5,a=n.value),"style"in n&&o(6,m=n.style),"disabled"in n&&o(0,f=n.disabled),"label"in n&&o(1,d=n.label),"show_label"in n&&o(7,i=n.show_label),"border"in n&&o(2,h=n.border),"rounded"in n&&o(3,r=n.rounded)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),s.$$.update=()=>{s.$$.dirty&64&&o(3,{rounded:r,border:h}=T(m,["rounded","border"]),r,(o(2,h),o(6,m)))},[f,d,h,r,b,a,m,i,w]}class A extends U{constructor(e){super(e),q(this,e,se,B,F,{value:5,style:6,disabled:0,label:1,show_label:7}),k("SvelteRegisterComponent",{component:this,tagName:"Checkbox",options:e,id:B.name});const{ctx:o}=this.$$,r=e.props||{};o[5]===void 0&&!("value"in r)&&console.warn("<Checkbox> was created without expected prop 'value'"),o[1]===void 0&&!("label"in r)&&console.warn("<Checkbox> was created without expected prop 'label'"),o[7]===void 0&&!("show_label"in r)&&console.warn("<Checkbox> was created without expected prop 'show_label'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get disabled(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set disabled(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function G(s){let e,o,r,h,l;const u=[s[8]];let a={};for(let i=0;i<u.length;i+=1)a=X(a,u[i]);e=new V({props:a,$$inline:!0});function m(i){s[9](i)}let f={label:s[3],show_label:s[6],style:s[7],disabled:s[4]==="static"};s[0]!==void 0&&(f.value=s[0]),r=new A({props:f,$$inline:!0}),Y.push(()=>Z(r,"value",m)),r.$on("change",s[10]);const d={c:function(){x(e.$$.fragment),o=K(),x(r.$$.fragment)},m:function(c,b){E(e,c,b),L(c,o,b),E(r,c,b),l=!0},p:function(c,b){const g=b&256?ee(u,[oe(c[8])]):{};e.$set(g);const w={};b&8&&(w.label=c[3]),b&64&&(w.show_label=c[6]),b&128&&(w.style=c[7]),b&16&&(w.disabled=c[4]==="static"),!h&&b&1&&(h=!0,w.value=c[0],te(()=>h=!1)),r.$set(w)},i:function(c){l||(P(e.$$.fragment,c),P(r.$$.fragment,c),l=!0)},o:function(c){j(e.$$.fragment,c),j(r.$$.fragment,c),l=!1},d:function(c){S(e,c),c&&M(o),S(r,c)}};return k("SvelteRegisterBlock",{block:d,id:G.name,type:"slot",source:'(15:0) <Block  {form_position}  {elem_id}  disable={typeof style.container === \\"boolean\\" && !style.container}  {visible} >',ctx:s}),d}function R(s){let e,o;e=new z({props:{form_position:s[5],elem_id:s[1],disable:typeof s[7].container=="boolean"&&!s[7].container,visible:s[2],$$slots:{default:[G]},$$scope:{ctx:s}},$$inline:!0});const r={c:function(){x(e.$$.fragment)},l:function(l){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(l,u){E(e,l,u),o=!0},p:function(l,[u]){const a={};u&32&&(a.form_position=l[5]),u&2&&(a.elem_id=l[1]),u&128&&(a.disable=typeof l[7].container=="boolean"&&!l[7].container),u&4&&(a.visible=l[2]),u&2521&&(a.$$scope={dirty:u,ctx:l}),e.$set(a)},i:function(l){o||(P(e.$$.fragment,l),o=!0)},o:function(l){j(e.$$.fragment,l),o=!1},d:function(l){S(e,l)}};return k("SvelteRegisterBlock",{block:r,id:R.name,type:"component",source:"",ctx:s}),r}function ne(s,e,o){let{$$slots:r={},$$scope:h}=e;I("Checkbox",r,[]);let{elem_id:l=""}=e,{visible:u=!0}=e,{value:a=!1}=e,{label:m="Checkbox"}=e,{mode:f}=e,{form_position:d="single"}=e,{show_label:i}=e,{style:c={}}=e,{loading_status:b}=e;const g=["elem_id","visible","value","label","mode","form_position","show_label","style","loading_status"];Object.keys(e).forEach(t=>{!~g.indexOf(t)&&t.slice(0,2)!=="$$"&&t!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${t}'`)});function w(t){a=t,o(0,a)}function n(t){$.call(this,s,t)}return s.$$set=t=>{"elem_id"in t&&o(1,l=t.elem_id),"visible"in t&&o(2,u=t.visible),"value"in t&&o(0,a=t.value),"label"in t&&o(3,m=t.label),"mode"in t&&o(4,f=t.mode),"form_position"in t&&o(5,d=t.form_position),"show_label"in t&&o(6,i=t.show_label),"style"in t&&o(7,c=t.style),"loading_status"in t&&o(8,b=t.loading_status)},s.$capture_state=()=>({Checkbox:A,Block:z,StatusTracker:V,elem_id:l,visible:u,value:a,label:m,mode:f,form_position:d,show_label:i,style:c,loading_status:b}),s.$inject_state=t=>{"elem_id"in t&&o(1,l=t.elem_id),"visible"in t&&o(2,u=t.visible),"value"in t&&o(0,a=t.value),"label"in t&&o(3,m=t.label),"mode"in t&&o(4,f=t.mode),"form_position"in t&&o(5,d=t.form_position),"show_label"in t&&o(6,i=t.show_label),"style"in t&&o(7,c=t.style),"loading_status"in t&&o(8,b=t.loading_status)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[a,l,u,m,f,d,i,c,b,w,n]}class ce extends U{constructor(e){super(e),q(this,e,ne,R,F,{elem_id:1,visible:2,value:0,label:3,mode:4,form_position:5,show_label:6,style:7,loading_status:8}),k("SvelteRegisterComponent",{component:this,tagName:"Checkbox_1",options:e,id:R.name});const{ctx:o}=this.$$,r=e.props||{};o[4]===void 0&&!("mode"in r)&&console.warn("<Checkbox> was created without expected prop 'mode'"),o[6]===void 0&&!("show_label"in r)&&console.warn("<Checkbox> was created without expected prop 'show_label'"),o[8]===void 0&&!("loading_status"in r)&&console.warn("<Checkbox> was created without expected prop 'loading_status'")}get elem_id(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get mode(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set mode(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get form_position(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set form_position(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get loading_status(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set loading_status(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var ae=ce;const ue=["static","dynamic"];export{ae as Component,ue as modes};
