import{S as B,i as p,s as E,d,Z as D,v as P,h as N,b as h,t as g,c as q,e as k,l as F,_ as K,$ as Q,a0 as U,D as j,E as z,g as S,K as C,P as X,X as v,Q as Z,B as A,C as G,F as H,k as I,m as J}from"./index.51f4f223.js";import{g as y}from"./styles.db46e346.js";const L="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/button/src/Button.svelte";function _(s){let e,n,l,a,i;const c=s[7].default,r=D(c,s,s[6],null),m={c:function(){e=N("button"),r&&r.c(),h(e,"class",n="gr-button gr-button-"+s[3]+" gr-button-"+s[2]+" self-start "+s[4]),h(e,"id",s[0]),g(e,"hidden",s[1]===!1),q(e,L,14,0,307)},l:function(o){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(o,f){k(o,e,f),r&&r.m(e,null),l=!0,a||(i=F(e,"click",s[8],!1,!1,!1),a=!0)},p:function(o,[f]){r&&r.p&&(!l||f&64)&&K(r,c,o,o[6],l?U(c,o[6],f,null):Q(o[6]),null),(!l||f&28&&n!==(n="gr-button gr-button-"+o[3]+" gr-button-"+o[2]+" self-start "+o[4]))&&h(e,"class",n),(!l||f&1)&&h(e,"id",o[0]),f&30&&g(e,"hidden",o[1]===!1)},i:function(o){l||(j(r,o),l=!0)},o:function(o){z(r,o),l=!1},d:function(o){o&&S(e),r&&r.d(o),a=!1,i()}};return d("SvelteRegisterBlock",{block:m,id:_.name,type:"component",source:"",ctx:s}),m}function M(s,e,n){let l,{$$slots:a={},$$scope:i}=e;P("Button",a,["default"]);let{style:c={}}=e,{elem_id:r=""}=e,{visible:m=!0}=e,{variant:u="secondary"}=e,{size:o="lg"}=e;const f=["style","elem_id","visible","variant","size"];Object.keys(e).forEach(t=>{!~f.indexOf(t)&&t.slice(0,2)!=="$$"&&t!=="slot"&&console.warn(`<Button> was created with unknown prop '${t}'`)});function w(t){C.call(this,s,t)}return s.$$set=t=>{"style"in t&&n(5,c=t.style),"elem_id"in t&&n(0,r=t.elem_id),"visible"in t&&n(1,m=t.visible),"variant"in t&&n(2,u=t.variant),"size"in t&&n(3,o=t.size),"$$scope"in t&&n(6,i=t.$$scope)},s.$capture_state=()=>({get_styles:y,style:c,elem_id:r,visible:m,variant:u,size:o,classes:l}),s.$inject_state=t=>{"style"in t&&n(5,c=t.style),"elem_id"in t&&n(0,r=t.elem_id),"visible"in t&&n(1,m=t.visible),"variant"in t&&n(2,u=t.variant),"size"in t&&n(3,o=t.size),"classes"in t&&n(4,l=t.classes)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),s.$$.update=()=>{s.$$.dirty&32&&n(4,{classes:l}=y(c,["border","full_width","rounded","margin"]),l)},[r,m,u,o,l,c,i,a,w]}class R extends B{constructor(e){super(e),p(this,e,M,_,E,{style:5,elem_id:0,visible:1,variant:2,size:3}),d("SvelteRegisterComponent",{component:this,tagName:"Button",options:e,id:_.name})}get style(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get elem_id(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get variant(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set variant(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get size(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set size(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function O(s){let e=s[5](s[3])+"",n;const l={c:function(){n=I(e)},m:function(i,c){k(i,n,c)},p:function(i,c){c&40&&e!==(e=i[5](i[3])+"")&&J(n,e)},d:function(i){i&&S(n)}};return d("SvelteRegisterBlock",{block:l,id:O.name,type:"slot",source:"(10:0) <Button {variant} {elem_id} {visible} {style} on:click>",ctx:s}),l}function b(s){let e,n;e=new R({props:{variant:s[4],elem_id:s[1],visible:s[2],style:s[0],$$slots:{default:[O]},$$scope:{ctx:s}},$$inline:!0}),e.$on("click",s[6]);const l={c:function(){A(e.$$.fragment)},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,c){G(e,i,c),n=!0},p:function(i,[c]){const r={};c&16&&(r.variant=i[4]),c&2&&(r.elem_id=i[1]),c&4&&(r.visible=i[2]),c&1&&(r.style=i[0]),c&168&&(r.$$scope={dirty:c,ctx:i}),e.$set(r)},i:function(i){n||(j(e.$$.fragment,i),n=!0)},o:function(i){z(e.$$.fragment,i),n=!1},d:function(i){H(e,i)}};return d("SvelteRegisterBlock",{block:l,id:b.name,type:"component",source:"",ctx:s}),l}function T(s,e,n){let l;X(v,"_"),Z(s,v,t=>n(5,l=t));let{$$slots:a={},$$scope:i}=e;P("Button",a,[]);let{style:c={}}=e,{elem_id:r=""}=e,{visible:m=!0}=e,{value:u}=e,{variant:o="primary"}=e;const f=["style","elem_id","visible","value","variant"];Object.keys(e).forEach(t=>{!~f.indexOf(t)&&t.slice(0,2)!=="$$"&&t!=="slot"&&console.warn(`<Button> was created with unknown prop '${t}'`)});function w(t){C.call(this,s,t)}return s.$$set=t=>{"style"in t&&n(0,c=t.style),"elem_id"in t&&n(1,r=t.elem_id),"visible"in t&&n(2,m=t.visible),"value"in t&&n(3,u=t.value),"variant"in t&&n(4,o=t.variant)},s.$capture_state=()=>({Button:R,_:v,style:c,elem_id:r,visible:m,value:u,variant:o,$_:l}),s.$inject_state=t=>{"style"in t&&n(0,c=t.style),"elem_id"in t&&n(1,r=t.elem_id),"visible"in t&&n(2,m=t.visible),"value"in t&&n(3,u=t.value),"variant"in t&&n(4,o=t.variant)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[c,r,m,u,o,l,w]}class V extends B{constructor(e){super(e),p(this,e,T,b,E,{style:0,elem_id:1,visible:2,value:3,variant:4}),d("SvelteRegisterComponent",{component:this,tagName:"Button_1",options:e,id:b.name});const{ctx:n}=this.$$,l=e.props||{};n[3]===void 0&&!("value"in l)&&console.warn("<Button> was created without expected prop 'value'")}get style(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get elem_id(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get variant(){throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set variant(e){throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var x=V;const $=["static"];export{x as Component,$ as modes};
