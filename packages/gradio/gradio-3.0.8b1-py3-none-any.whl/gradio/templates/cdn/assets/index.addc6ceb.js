import{S as T,i as U,s as q,d as g,v as F,y as O,h as k,w as I,k as H,b as _,c as v,t as D,e as K,f as p,l as J,a9 as Q,m as W,n as N,g as L,R as M,T as X,I as Y,L as Z,B as C,C as x,D as E,E as P,F as j,K as $,U as ee,V as te,M as oe}from"./index.f70aa7a7.js";import{c as S}from"./styles.d87a390f.js";import{B as V}from"./Block.288f0cd5.js";const y="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/form/src/Checkbox.svelte";function B(s){let e,t,r,h,n,a,u,w;const m={c:function(){e=k("label"),t=k("input"),r=I(),h=k("span"),n=H(s[3]),t.disabled=s[2],_(t,"type","checkbox"),_(t,"name","test"),_(t,"class","gr-check-radio gr-checkbox"),v(t,y,19,1,578),_(h,"class",a="ml-2"+S(s[1])),v(h,y,26,1,695),_(e,"class","flex items-center text-gray-700 text-sm space-x-2 rounded-lg cursor-pointer bg-white dark:bg-transparent"),D(e,"!cursor-not-allowed",s[2]),v(e,y,15,0,416)},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,c){K(i,e,c),p(e,t),t.checked=s[0],p(e,r),p(e,h),p(h,n),u||(w=J(t,"change",s[5]),u=!0)},p:function(i,[c]){c&4&&Q(t,"disabled",i[2]),c&1&&(t.checked=i[0]),c&8&&W(n,i[3]),c&2&&a!==(a="ml-2"+S(i[1]))&&_(h,"class",a),c&4&&D(e,"!cursor-not-allowed",i[2])},i:N,o:N,d:function(i){i&&L(e),u=!1,w()}};return g("SvelteRegisterBlock",{block:m,id:B.name,type:"component",source:"",ctx:s}),m}function se(s,e,t){let{$$slots:r={},$$scope:h}=e;F("Checkbox",r,[]);let{value:n}=e,{style:a={}}=e,{disabled:u=!1}=e,{label:w}=e,{show_label:m}=e;const d=O();function i(){d("change",!n),t(0,n=!n)}const c=["value","style","disabled","label","show_label"];Object.keys(e).forEach(l=>{!~c.indexOf(l)&&l.slice(0,2)!=="$$"&&l!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${l}'`)});function b(){n=this.checked,t(0,n)}return s.$$set=l=>{"value"in l&&t(0,n=l.value),"style"in l&&t(1,a=l.style),"disabled"in l&&t(2,u=l.disabled),"label"in l&&t(3,w=l.label),"show_label"in l&&t(4,m=l.show_label)},s.$capture_state=()=>({create_classes:S,createEventDispatcher:O,value:n,style:a,disabled:u,label:w,show_label:m,dispatch:d,handle_change:i}),s.$inject_state=l=>{"value"in l&&t(0,n=l.value),"style"in l&&t(1,a=l.style),"disabled"in l&&t(2,u=l.disabled),"label"in l&&t(3,w=l.label),"show_label"in l&&t(4,m=l.show_label)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[n,a,u,w,m,b]}class z extends T{constructor(e){super(e),U(this,e,se,B,q,{value:0,style:1,disabled:2,label:3,show_label:4}),g("SvelteRegisterComponent",{component:this,tagName:"Checkbox",options:e,id:B.name});const{ctx:t}=this.$$,r=e.props||{};t[0]===void 0&&!("value"in r)&&console.warn("<Checkbox> was created without expected prop 'value'"),t[3]===void 0&&!("label"in r)&&console.warn("<Checkbox> was created without expected prop 'label'"),t[4]===void 0&&!("show_label"in r)&&console.warn("<Checkbox> was created without expected prop 'show_label'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get disabled(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set disabled(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function A(s){let e,t,r,h,n;const a=[s[8]];let u={};for(let i=0;i<a.length;i+=1)u=X(u,a[i]);e=new M({props:u,$$inline:!0});function w(i){s[9](i)}let m={label:s[3],show_label:s[6],style:s[7],disabled:s[4]==="static"};s[0]!==void 0&&(m.value=s[0]),r=new z({props:m,$$inline:!0}),Y.push(()=>Z(r,"value",w)),r.$on("change",s[10]);const d={c:function(){C(e.$$.fragment),t=I(),C(r.$$.fragment)},m:function(c,b){x(e,c,b),K(c,t,b),x(r,c,b),n=!0},p:function(c,b){const l=b&256?ee(a,[te(c[8])]):{};e.$set(l);const f={};b&8&&(f.label=c[3]),b&64&&(f.show_label=c[6]),b&128&&(f.style=c[7]),b&16&&(f.disabled=c[4]==="static"),!h&&b&1&&(h=!0,f.value=c[0],oe(()=>h=!1)),r.$set(f)},i:function(c){n||(E(e.$$.fragment,c),E(r.$$.fragment,c),n=!0)},o:function(c){P(e.$$.fragment,c),P(r.$$.fragment,c),n=!1},d:function(c){j(e,c),c&&L(t),j(r,c)}};return g("SvelteRegisterBlock",{block:d,id:A.name,type:"slot",source:"(15:0) <Block {form_position} {elem_id} {visible} {style}>",ctx:s}),d}function R(s){let e,t;e=new V({props:{form_position:s[5],elem_id:s[1],visible:s[2],style:s[7],$$slots:{default:[A]},$$scope:{ctx:s}},$$inline:!0});const r={c:function(){C(e.$$.fragment)},l:function(n){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(n,a){x(e,n,a),t=!0},p:function(n,[a]){const u={};a&32&&(u.form_position=n[5]),a&2&&(u.elem_id=n[1]),a&4&&(u.visible=n[2]),a&128&&(u.style=n[7]),a&2521&&(u.$$scope={dirty:a,ctx:n}),e.$set(u)},i:function(n){t||(E(e.$$.fragment,n),t=!0)},o:function(n){P(e.$$.fragment,n),t=!1},d:function(n){j(e,n)}};return g("SvelteRegisterBlock",{block:r,id:R.name,type:"component",source:"",ctx:s}),r}function ne(s,e,t){let{$$slots:r={},$$scope:h}=e;F("Checkbox",r,[]);let{elem_id:n=""}=e,{visible:a=!0}=e,{value:u=!1}=e,{label:w="Checkbox"}=e,{mode:m}=e,{form_position:d="single"}=e,{show_label:i}=e,{style:c={}}=e,{loading_status:b}=e;const l=["elem_id","visible","value","label","mode","form_position","show_label","style","loading_status"];Object.keys(e).forEach(o=>{!~l.indexOf(o)&&o.slice(0,2)!=="$$"&&o!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${o}'`)});function f(o){u=o,t(0,u)}function G(o){$.call(this,s,o)}return s.$$set=o=>{"elem_id"in o&&t(1,n=o.elem_id),"visible"in o&&t(2,a=o.visible),"value"in o&&t(0,u=o.value),"label"in o&&t(3,w=o.label),"mode"in o&&t(4,m=o.mode),"form_position"in o&&t(5,d=o.form_position),"show_label"in o&&t(6,i=o.show_label),"style"in o&&t(7,c=o.style),"loading_status"in o&&t(8,b=o.loading_status)},s.$capture_state=()=>({Checkbox:z,Block:V,StatusTracker:M,elem_id:n,visible:a,value:u,label:w,mode:m,form_position:d,show_label:i,style:c,loading_status:b}),s.$inject_state=o=>{"elem_id"in o&&t(1,n=o.elem_id),"visible"in o&&t(2,a=o.visible),"value"in o&&t(0,u=o.value),"label"in o&&t(3,w=o.label),"mode"in o&&t(4,m=o.mode),"form_position"in o&&t(5,d=o.form_position),"show_label"in o&&t(6,i=o.show_label),"style"in o&&t(7,c=o.style),"loading_status"in o&&t(8,b=o.loading_status)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[u,n,a,w,m,d,i,c,b,f,G]}class ce extends T{constructor(e){super(e),U(this,e,ne,R,q,{elem_id:1,visible:2,value:0,label:3,mode:4,form_position:5,show_label:6,style:7,loading_status:8}),g("SvelteRegisterComponent",{component:this,tagName:"Checkbox_1",options:e,id:R.name});const{ctx:t}=this.$$,r=e.props||{};t[4]===void 0&&!("mode"in r)&&console.warn("<Checkbox> was created without expected prop 'mode'"),t[6]===void 0&&!("show_label"in r)&&console.warn("<Checkbox> was created without expected prop 'show_label'"),t[8]===void 0&&!("loading_status"in r)&&console.warn("<Checkbox> was created without expected prop 'loading_status'")}get elem_id(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get mode(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set mode(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get form_position(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set form_position(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get loading_status(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set loading_status(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var ae=ce;const ue=["static","dynamic"];export{ae as Component,ue as modes};
