import{S as U,i as q,s as F,d as k,v as I,y as O,h as v,w as K,k as H,b as _,c as y,t as D,e as L,f as p,l as J,a2 as Q,m as W,n as N,g as M,R as V,T as X,I as Y,L as Z,B as x,C as E,D as P,E as j,F as S,K as $,U as ee,V as oe,M as te}from"./index.91cf1cec.js";import{g as T}from"./styles.db46e346.js";import{B as z}from"./Block.13c7ad76.js";const C="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/form/src/Checkbox.svelte";function B(s){let e,o,c,h,r,u,a,m;const w={c:function(){e=v("label"),o=v("input"),h=K(),r=v("span"),u=H(s[2]),o.disabled=s[1],_(o,"type","checkbox"),_(o,"name","test"),_(o,"class",c="gr-check-radio gr-checkbox "+s[4]+" "+s[3]),y(o,C,20,1,635),_(r,"class","ml-2"),y(r,C,27,1,771),_(e,"class","flex items-center text-gray-700 text-sm space-x-2 rounded-lg cursor-pointer dark:bg-transparent "),D(e,"!cursor-not-allowed",s[1]),y(e,C,16,0,481)},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,n){L(i,e,n),p(e,o),o.checked=s[0],p(e,h),p(e,r),p(r,u),a||(m=J(o,"change",s[7]),a=!0)},p:function(i,[n]){n&2&&Q(o,"disabled",i[1]),n&24&&c!==(c="gr-check-radio gr-checkbox "+i[4]+" "+i[3])&&_(o,"class",c),n&1&&(o.checked=i[0]),n&4&&W(u,i[2]),n&2&&D(e,"!cursor-not-allowed",i[1])},i:N,o:N,d:function(i){i&&M(e),a=!1,m()}};return k("SvelteRegisterBlock",{block:w,id:B.name,type:"component",source:"",ctx:s}),w}function se(s,e,o){let c,h,{$$slots:r={},$$scope:u}=e;I("Checkbox",r,[]);let{value:a}=e,{style:m={}}=e,{disabled:w=!1}=e,{label:b}=e,{show_label:i}=e;const n=O();function d(){n("change",!a),o(0,a=!a)}const g=["value","style","disabled","label","show_label"];Object.keys(e).forEach(l=>{!~g.indexOf(l)&&l.slice(0,2)!=="$$"&&l!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${l}'`)});function f(){a=this.checked,o(0,a)}return s.$$set=l=>{"value"in l&&o(0,a=l.value),"style"in l&&o(5,m=l.style),"disabled"in l&&o(1,w=l.disabled),"label"in l&&o(2,b=l.label),"show_label"in l&&o(6,i=l.show_label)},s.$capture_state=()=>({get_styles:T,createEventDispatcher:O,value:a,style:m,disabled:w,label:b,show_label:i,dispatch:n,handle_change:d,border:h,rounded:c}),s.$inject_state=l=>{"value"in l&&o(0,a=l.value),"style"in l&&o(5,m=l.style),"disabled"in l&&o(1,w=l.disabled),"label"in l&&o(2,b=l.label),"show_label"in l&&o(6,i=l.show_label),"border"in l&&o(3,h=l.border),"rounded"in l&&o(4,c=l.rounded)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),s.$$.update=()=>{s.$$.dirty&32&&o(4,{rounded:c,border:h}=T(m,["rounded","border"]),c,(o(3,h),o(5,m)))},[a,w,b,h,c,m,i,f]}class A extends U{constructor(e){super(e),q(this,e,se,B,F,{value:0,style:5,disabled:1,label:2,show_label:6}),k("SvelteRegisterComponent",{component:this,tagName:"Checkbox",options:e,id:B.name});const{ctx:o}=this.$$,c=e.props||{};o[0]===void 0&&!("value"in c)&&console.warn("<Checkbox> was created without expected prop 'value'"),o[2]===void 0&&!("label"in c)&&console.warn("<Checkbox> was created without expected prop 'label'"),o[6]===void 0&&!("show_label"in c)&&console.warn("<Checkbox> was created without expected prop 'show_label'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get disabled(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set disabled(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function G(s){let e,o,c,h,r;const u=[s[8]];let a={};for(let i=0;i<u.length;i+=1)a=X(a,u[i]);e=new V({props:a,$$inline:!0});function m(i){s[9](i)}let w={label:s[3],show_label:s[6],style:s[7],disabled:s[4]==="static"};s[0]!==void 0&&(w.value=s[0]),c=new A({props:w,$$inline:!0}),Y.push(()=>Z(c,"value",m)),c.$on("change",s[10]);const b={c:function(){x(e.$$.fragment),o=K(),x(c.$$.fragment)},m:function(n,d){E(e,n,d),L(n,o,d),E(c,n,d),r=!0},p:function(n,d){const g=d&256?ee(u,[oe(n[8])]):{};e.$set(g);const f={};d&8&&(f.label=n[3]),d&64&&(f.show_label=n[6]),d&128&&(f.style=n[7]),d&16&&(f.disabled=n[4]==="static"),!h&&d&1&&(h=!0,f.value=n[0],te(()=>h=!1)),c.$set(f)},i:function(n){r||(P(e.$$.fragment,n),P(c.$$.fragment,n),r=!0)},o:function(n){j(e.$$.fragment,n),j(c.$$.fragment,n),r=!1},d:function(n){S(e,n),n&&M(o),S(c,n)}};return k("SvelteRegisterBlock",{block:b,id:G.name,type:"slot",source:'(15:0) <Block  {form_position}  {elem_id}  disable={typeof style.container === \\"boolean\\" && !style.container}  {visible} >',ctx:s}),b}function R(s){let e,o;e=new z({props:{form_position:s[5],elem_id:s[1],disable:typeof s[7].container=="boolean"&&!s[7].container,visible:s[2],$$slots:{default:[G]},$$scope:{ctx:s}},$$inline:!0});const c={c:function(){x(e.$$.fragment)},l:function(r){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(r,u){E(e,r,u),o=!0},p:function(r,[u]){const a={};u&32&&(a.form_position=r[5]),u&2&&(a.elem_id=r[1]),u&128&&(a.disable=typeof r[7].container=="boolean"&&!r[7].container),u&4&&(a.visible=r[2]),u&2521&&(a.$$scope={dirty:u,ctx:r}),e.$set(a)},i:function(r){o||(P(e.$$.fragment,r),o=!0)},o:function(r){j(e.$$.fragment,r),o=!1},d:function(r){S(e,r)}};return k("SvelteRegisterBlock",{block:c,id:R.name,type:"component",source:"",ctx:s}),c}function ne(s,e,o){let{$$slots:c={},$$scope:h}=e;I("Checkbox",c,[]);let{elem_id:r=""}=e,{visible:u=!0}=e,{value:a=!1}=e,{label:m="Checkbox"}=e,{mode:w}=e,{form_position:b="single"}=e,{show_label:i}=e,{style:n={}}=e,{loading_status:d}=e;const g=["elem_id","visible","value","label","mode","form_position","show_label","style","loading_status"];Object.keys(e).forEach(t=>{!~g.indexOf(t)&&t.slice(0,2)!=="$$"&&t!=="slot"&&console.warn(`<Checkbox> was created with unknown prop '${t}'`)});function f(t){a=t,o(0,a)}function l(t){$.call(this,s,t)}return s.$$set=t=>{"elem_id"in t&&o(1,r=t.elem_id),"visible"in t&&o(2,u=t.visible),"value"in t&&o(0,a=t.value),"label"in t&&o(3,m=t.label),"mode"in t&&o(4,w=t.mode),"form_position"in t&&o(5,b=t.form_position),"show_label"in t&&o(6,i=t.show_label),"style"in t&&o(7,n=t.style),"loading_status"in t&&o(8,d=t.loading_status)},s.$capture_state=()=>({Checkbox:A,Block:z,StatusTracker:V,elem_id:r,visible:u,value:a,label:m,mode:w,form_position:b,show_label:i,style:n,loading_status:d}),s.$inject_state=t=>{"elem_id"in t&&o(1,r=t.elem_id),"visible"in t&&o(2,u=t.visible),"value"in t&&o(0,a=t.value),"label"in t&&o(3,m=t.label),"mode"in t&&o(4,w=t.mode),"form_position"in t&&o(5,b=t.form_position),"show_label"in t&&o(6,i=t.show_label),"style"in t&&o(7,n=t.style),"loading_status"in t&&o(8,d=t.loading_status)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[a,r,u,m,w,b,i,n,d,f,l]}class ce extends U{constructor(e){super(e),q(this,e,ne,R,F,{elem_id:1,visible:2,value:0,label:3,mode:4,form_position:5,show_label:6,style:7,loading_status:8}),k("SvelteRegisterComponent",{component:this,tagName:"Checkbox_1",options:e,id:R.name});const{ctx:o}=this.$$,c=e.props||{};o[4]===void 0&&!("mode"in c)&&console.warn("<Checkbox> was created without expected prop 'mode'"),o[6]===void 0&&!("show_label"in c)&&console.warn("<Checkbox> was created without expected prop 'show_label'"),o[8]===void 0&&!("loading_status"in c)&&console.warn("<Checkbox> was created without expected prop 'loading_status'")}get elem_id(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get mode(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set mode(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get form_position(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set form_position(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get loading_status(){throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set loading_status(e){throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var ae=ce;const ue=["static","dynamic"];export{ae as Component,ue as modes};
