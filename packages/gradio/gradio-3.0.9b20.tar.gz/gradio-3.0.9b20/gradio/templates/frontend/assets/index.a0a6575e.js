import{S as M,i as V,s as z,d as g,o as U,v as A,y as q,h as C,w as N,k as H,b as _,c as G,t as F,e as k,f as y,l as ee,a2 as I,m as J,g as v,B as x,C as P,D as B,E as j,F as S,u as oe,R as Q,T as te,I as se,L as ne,K as ce,U as re,V as ie,M as le}from"./index.91cf1cec.js";import{g as K}from"./styles.db46e346.js";import{B as W}from"./BlockTitle.e2f4871d.js";import{B as X}from"./Block.13c7ad76.js";const E="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/form/src/CheckboxGroup.svelte";function L(s,e,t){const n=s.slice();return n[12]=e[t],n[14]=t,n}function Y(s){let e;const t={c:function(){e=H(s[3])},m:function(a,c){k(a,e,c)},p:function(a,c){c&8&&J(e,a[3])},d:function(a){a&&v(e)}};return g("SvelteRegisterBlock",{block:t,id:Y.name,type:"slot",source:"(28:0) <BlockTitle {show_label}>",ctx:s}),t}function O(s){let e,t,n,a,c,l,f=s[12]+"",u,i,d,h;function r(){return s[10](s[12])}const b={c:function(){e=C("label"),t=C("input"),c=N(),l=C("span"),u=H(f),t.disabled=s[2],t.checked=n=s[0].includes(s[12]),_(t,"type","checkbox"),_(t,"name","test"),_(t,"class",a="gr-check-radio gr-checkbox "+s[7]+" "+s[6]),G(t,E,35,3,1056),_(l,"class","ml-2"),G(l,E,42,6,1258),_(e,"class",i="gr-input-label flex items-center text-gray-700 text-sm space-x-2 border py-1.5 px-3 rounded-lg cursor-pointer bg-white shadow-sm checked:shadow-inner "+s[5]),F(e,"!cursor-not-allowed",s[2]),G(e,E,31,2,824)},m:function(m,p){k(m,e,p),y(e,t),y(e,c),y(e,l),y(l,u),d||(h=ee(t,"change",r,!1,!1,!1),d=!0)},p:function(m,p){s=m,p&4&&I(t,"disabled",s[2]),p&3&&n!==(n=s[0].includes(s[12]))&&I(t,"checked",n),p&192&&a!==(a="gr-check-radio gr-checkbox "+s[7]+" "+s[6])&&_(t,"class",a),p&2&&f!==(f=s[12]+"")&&J(u,f),p&32&&i!==(i="gr-input-label flex items-center text-gray-700 text-sm space-x-2 border py-1.5 px-3 rounded-lg cursor-pointer bg-white shadow-sm checked:shadow-inner "+s[5])&&_(e,"class",i),p&36&&F(e,"!cursor-not-allowed",s[2])},d:function(m){m&&v(e),d=!1,h()}};return g("SvelteRegisterBlock",{block:b,id:O.name,type:"each",source:"(31:1) {#each choices as choice, i}",ctx:s}),b}function T(s){let e,t,n,a;e=new W({props:{show_label:s[4],$$slots:{default:[Y]},$$scope:{ctx:s}},$$inline:!0});let c=s[1];U(c);let l=[];for(let u=0;u<c.length;u+=1)l[u]=O(L(s,c,u));const f={c:function(){x(e.$$.fragment),t=N(),n=C("div");for(let i=0;i<l.length;i+=1)l[i].c();_(n,"class","flex flex-wrap gap-2"),_(n,"data-testid","checkbox-group"),G(n,E,29,0,728)},l:function(i){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(i,d){P(e,i,d),k(i,t,d),k(i,n,d);for(let h=0;h<l.length;h+=1)l[h].m(n,null);a=!0},p:function(i,[d]){const h={};if(d&16&&(h.show_label=i[4]),d&32776&&(h.$$scope={dirty:d,ctx:i}),e.$set(h),d&487){c=i[1],U(c);let r;for(r=0;r<c.length;r+=1){const b=L(i,c,r);l[r]?l[r].p(b,d):(l[r]=O(b),l[r].c(),l[r].m(n,null))}for(;r<l.length;r+=1)l[r].d(1);l.length=c.length}},i:function(i){a||(B(e.$$.fragment,i),a=!0)},o:function(i){j(e.$$.fragment,i),a=!1},d:function(i){S(e,i),i&&v(t),i&&v(n),oe(l,i)}};return g("SvelteRegisterBlock",{block:f,id:T.name,type:"component",source:"",ctx:s}),f}function ae(s,e,t){let n,a,c,{$$slots:l={},$$scope:f}=e;A("CheckboxGroup",l,[]);let{value:u=[]}=e,{style:i={}}=e,{choices:d}=e,{disabled:h=!1}=e,{label:r}=e,{show_label:b}=e;const w=q(),m=o=>{u.includes(o)?u.splice(u.indexOf(o),1):u.push(o),w("change",u),t(0,u)},p=["value","style","choices","disabled","label","show_label"];Object.keys(e).forEach(o=>{!~p.indexOf(o)&&o.slice(0,2)!=="$$"&&o!=="slot"&&console.warn(`<CheckboxGroup> was created with unknown prop '${o}'`)});const R=o=>m(o);return s.$$set=o=>{"value"in o&&t(0,u=o.value),"style"in o&&t(9,i=o.style),"choices"in o&&t(1,d=o.choices),"disabled"in o&&t(2,h=o.disabled),"label"in o&&t(3,r=o.label),"show_label"in o&&t(4,b=o.show_label)},s.$capture_state=()=>({createEventDispatcher:q,BlockTitle:W,get_styles:K,value:u,style:i,choices:d,disabled:h,label:r,show_label:b,dispatch:w,toggleChoice:m,item_container:c,border:a,rounded:n}),s.$inject_state=o=>{"value"in o&&t(0,u=o.value),"style"in o&&t(9,i=o.style),"choices"in o&&t(1,d=o.choices),"disabled"in o&&t(2,h=o.disabled),"label"in o&&t(3,r=o.label),"show_label"in o&&t(4,b=o.show_label),"item_container"in o&&t(5,c=o.item_container),"border"in o&&t(6,a=o.border),"rounded"in o&&t(7,n=o.rounded)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),s.$$.update=()=>{s.$$.dirty&512&&t(7,{rounded:n,border:a,item_container:c}=K(i,["rounded","border","item_container"]),n,(t(6,a),t(9,i)),(t(5,c),t(9,i)))},[u,d,h,r,b,c,a,n,m,i,R]}class Z extends M{constructor(e){super(e),V(this,e,ae,T,z,{value:0,style:9,choices:1,disabled:2,label:3,show_label:4}),g("SvelteRegisterComponent",{component:this,tagName:"CheckboxGroup",options:e,id:T.name});const{ctx:t}=this.$$,n=e.props||{};t[1]===void 0&&!("choices"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'choices'"),t[3]===void 0&&!("label"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'label'"),t[4]===void 0&&!("show_label"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'show_label'")}get value(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get choices(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set choices(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get disabled(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set disabled(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function $(s){let e,t,n,a,c;const l=[s[9]];let f={};for(let h=0;h<l.length;h+=1)f=te(f,l[h]);e=new Q({props:f,$$inline:!0});function u(h){s[10](h)}let i={choices:s[3],label:s[6],style:s[4],show_label:s[8],disabled:s[5]==="static"};s[0]!==void 0&&(i.value=s[0]),n=new Z({props:i,$$inline:!0}),se.push(()=>ne(n,"value",u)),n.$on("change",s[11]);const d={c:function(){x(e.$$.fragment),t=N(),x(n.$$.fragment)},m:function(r,b){P(e,r,b),k(r,t,b),P(n,r,b),c=!0},p:function(r,b){const w=b&512?re(l,[ie(r[9])]):{};e.$set(w);const m={};b&8&&(m.choices=r[3]),b&64&&(m.label=r[6]),b&16&&(m.style=r[4]),b&256&&(m.show_label=r[8]),b&32&&(m.disabled=r[5]==="static"),!a&&b&1&&(a=!0,m.value=r[0],le(()=>a=!1)),n.$set(m)},i:function(r){c||(B(e.$$.fragment,r),B(n.$$.fragment,r),c=!0)},o:function(r){j(e.$$.fragment,r),j(n.$$.fragment,r),c=!1},d:function(r){S(e,r),r&&v(t),S(n,r)}};return g("SvelteRegisterBlock",{block:d,id:$.name,type:"slot",source:'(16:0) <Block  {form_position}  {elem_id}  type=\\"fieldset\\"  disable={typeof style.container === \\"boolean\\" && !style.container}  {visible} >',ctx:s}),d}function D(s){let e,t;e=new X({props:{form_position:s[7],elem_id:s[1],type:"fieldset",disable:typeof s[4].container=="boolean"&&!s[4].container,visible:s[2],$$slots:{default:[$]},$$scope:{ctx:s}},$$inline:!0});const n={c:function(){x(e.$$.fragment)},l:function(c){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(c,l){P(e,c,l),t=!0},p:function(c,[l]){const f={};l&128&&(f.form_position=c[7]),l&2&&(f.elem_id=c[1]),l&16&&(f.disable=typeof c[4].container=="boolean"&&!c[4].container),l&4&&(f.visible=c[2]),l&4985&&(f.$$scope={dirty:l,ctx:c}),e.$set(f)},i:function(c){t||(B(e.$$.fragment,c),t=!0)},o:function(c){j(e.$$.fragment,c),t=!1},d:function(c){S(e,c)}};return g("SvelteRegisterBlock",{block:n,id:D.name,type:"component",source:"",ctx:s}),n}function ue(s,e,t){let{$$slots:n={},$$scope:a}=e;A("CheckboxGroup",n,[]);let{elem_id:c=""}=e,{visible:l=!0}=e,{value:f=[]}=e,{choices:u}=e,{style:i={}}=e,{mode:d}=e,{label:h="Checkbox Group"}=e,{form_position:r="single"}=e,{show_label:b}=e,{loading_status:w}=e;const m=["elem_id","visible","value","choices","style","mode","label","form_position","show_label","loading_status"];Object.keys(e).forEach(o=>{!~m.indexOf(o)&&o.slice(0,2)!=="$$"&&o!=="slot"&&console.warn(`<CheckboxGroup> was created with unknown prop '${o}'`)});function p(o){f=o,t(0,f)}function R(o){ce.call(this,s,o)}return s.$$set=o=>{"elem_id"in o&&t(1,c=o.elem_id),"visible"in o&&t(2,l=o.visible),"value"in o&&t(0,f=o.value),"choices"in o&&t(3,u=o.choices),"style"in o&&t(4,i=o.style),"mode"in o&&t(5,d=o.mode),"label"in o&&t(6,h=o.label),"form_position"in o&&t(7,r=o.form_position),"show_label"in o&&t(8,b=o.show_label),"loading_status"in o&&t(9,w=o.loading_status)},s.$capture_state=()=>({CheckboxGroup:Z,Block:X,StatusTracker:Q,elem_id:c,visible:l,value:f,choices:u,style:i,mode:d,label:h,form_position:r,show_label:b,loading_status:w}),s.$inject_state=o=>{"elem_id"in o&&t(1,c=o.elem_id),"visible"in o&&t(2,l=o.visible),"value"in o&&t(0,f=o.value),"choices"in o&&t(3,u=o.choices),"style"in o&&t(4,i=o.style),"mode"in o&&t(5,d=o.mode),"label"in o&&t(6,h=o.label),"form_position"in o&&t(7,r=o.form_position),"show_label"in o&&t(8,b=o.show_label),"loading_status"in o&&t(9,w=o.loading_status)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[f,c,l,u,i,d,h,r,b,w,p,R]}class he extends M{constructor(e){super(e),V(this,e,ue,D,z,{elem_id:1,visible:2,value:0,choices:3,style:4,mode:5,label:6,form_position:7,show_label:8,loading_status:9}),g("SvelteRegisterComponent",{component:this,tagName:"CheckboxGroup_1",options:e,id:D.name});const{ctx:t}=this.$$,n=e.props||{};t[3]===void 0&&!("choices"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'choices'"),t[5]===void 0&&!("mode"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'mode'"),t[8]===void 0&&!("show_label"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'show_label'"),t[9]===void 0&&!("loading_status"in n)&&console.warn("<CheckboxGroup> was created without expected prop 'loading_status'")}get elem_id(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get visible(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set visible(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get choices(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set choices(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get style(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set style(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get mode(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set mode(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get label(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get form_position(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set form_position(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get show_label(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get loading_status(){throw new Error("<CheckboxGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set loading_status(e){throw new Error("<CheckboxGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var we=he;const pe=["static","dynamic"];export{we as Component,pe as modes};
