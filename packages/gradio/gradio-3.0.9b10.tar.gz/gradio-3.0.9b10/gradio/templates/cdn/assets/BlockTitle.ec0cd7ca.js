import{S as f,i as h,s as m,d as _,Z as d,v as w,h as b,b as p,t as r,c as g,e as v,_ as k,$ as B,a0 as T,D as j,E as y,g as E}from"./index.32048461.js";const S="Users/aliabid/projects/gradio/ui/packages/atoms/src/BlockTitle.svelte";function u(s){let t,n;const c=s[2].default,o=d(c,s,s[1],null),l={c:function(){t=b("span"),o&&o.c(),p(t,"class","text-gray-500 text-[0.855rem] mb-2 block dark:text-gray-200 relative z-40"),r(t,"sr-only",!s[0]),r(t,"h-0",!s[0]),r(t,"!m-0",!s[0]),g(t,S,3,0,59)},l:function(e){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(e,i){v(e,t,i),o&&o.m(t,null),n=!0},p:function(e,[i]){o&&o.p&&(!n||i&2)&&k(o,c,e,e[1],n?T(c,e[1],i,null):B(e[1]),null),i&1&&r(t,"sr-only",!e[0]),i&1&&r(t,"h-0",!e[0]),i&1&&r(t,"!m-0",!e[0])},i:function(e){n||(j(o,e),n=!0)},o:function(e){y(o,e),n=!1},d:function(e){e&&E(t),o&&o.d(e)}};return _("SvelteRegisterBlock",{block:l,id:u.name,type:"component",source:"",ctx:s}),l}function C(s,t,n){let{$$slots:c={},$$scope:o}=t;w("BlockTitle",c,["default"]);let{show_label:l=!0}=t;const a=["show_label"];return Object.keys(t).forEach(e=>{!~a.indexOf(e)&&e.slice(0,2)!=="$$"&&e!=="slot"&&console.warn(`<BlockTitle> was created with unknown prop '${e}'`)}),s.$$set=e=>{"show_label"in e&&n(0,l=e.show_label),"$$scope"in e&&n(1,o=e.$$scope)},s.$capture_state=()=>({show_label:l}),s.$inject_state=e=>{"show_label"in e&&n(0,l=e.show_label)},t&&"$$inject"in t&&s.$inject_state(t.$$inject),[l,o,c]}class O extends f{constructor(t){super(t),h(this,t,C,u,m,{show_label:0}),_("SvelteRegisterComponent",{component:this,tagName:"BlockTitle",options:t,id:u.name})}get show_label(){throw new Error("<BlockTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set show_label(t){throw new Error("<BlockTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}export{O as B};
