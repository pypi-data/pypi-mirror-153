# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.ids_manager.ids_manager_pb2 as ids__manager__pb2


class IdsManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getIdsAlerts = channel.unary_unary(
                '/IdsManager/getIdsAlerts',
                request_serializer=ids__manager__pb2.GetIdsAlertsMsg.SerializeToString,
                response_deserializer=ids__manager__pb2.IdsLogDTO.FromString,
                )
        self.stopIdsMonitor = channel.unary_unary(
                '/IdsManager/stopIdsMonitor',
                request_serializer=ids__manager__pb2.StopIdsMonitorMsg.SerializeToString,
                response_deserializer=ids__manager__pb2.IdsMonitorDTO.FromString,
                )
        self.startIdsMonitor = channel.unary_unary(
                '/IdsManager/startIdsMonitor',
                request_serializer=ids__manager__pb2.StartIdsMonitorMsg.SerializeToString,
                response_deserializer=ids__manager__pb2.IdsMonitorDTO.FromString,
                )
        self.getIdsMonitorStatus = channel.unary_unary(
                '/IdsManager/getIdsMonitorStatus',
                request_serializer=ids__manager__pb2.GetIdsMonitorStatusMsg.SerializeToString,
                response_deserializer=ids__manager__pb2.IdsMonitorDTO.FromString,
                )


class IdsManagerServicer(object):
    """Interface exported by the server
    """

    def getIdsAlerts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startIdsMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getIdsMonitorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdsManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getIdsAlerts': grpc.unary_unary_rpc_method_handler(
                    servicer.getIdsAlerts,
                    request_deserializer=ids__manager__pb2.GetIdsAlertsMsg.FromString,
                    response_serializer=ids__manager__pb2.IdsLogDTO.SerializeToString,
            ),
            'stopIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopIdsMonitor,
                    request_deserializer=ids__manager__pb2.StopIdsMonitorMsg.FromString,
                    response_serializer=ids__manager__pb2.IdsMonitorDTO.SerializeToString,
            ),
            'startIdsMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startIdsMonitor,
                    request_deserializer=ids__manager__pb2.StartIdsMonitorMsg.FromString,
                    response_serializer=ids__manager__pb2.IdsMonitorDTO.SerializeToString,
            ),
            'getIdsMonitorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getIdsMonitorStatus,
                    request_deserializer=ids__manager__pb2.GetIdsMonitorStatusMsg.FromString,
                    response_serializer=ids__manager__pb2.IdsMonitorDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'IdsManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IdsManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getIdsAlerts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IdsManager/getIdsAlerts',
            ids__manager__pb2.GetIdsAlertsMsg.SerializeToString,
            ids__manager__pb2.IdsLogDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IdsManager/stopIdsMonitor',
            ids__manager__pb2.StopIdsMonitorMsg.SerializeToString,
            ids__manager__pb2.IdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startIdsMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IdsManager/startIdsMonitor',
            ids__manager__pb2.StartIdsMonitorMsg.SerializeToString,
            ids__manager__pb2.IdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getIdsMonitorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/IdsManager/getIdsMonitorStatus',
            ids__manager__pb2.GetIdsMonitorStatusMsg.SerializeToString,
            ids__manager__pb2.IdsMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
