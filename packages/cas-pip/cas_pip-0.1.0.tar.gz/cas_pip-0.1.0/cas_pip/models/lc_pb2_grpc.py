# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import lc_pb2 as lc__pb2
from . import schema_pb2 as schema__pb2


class LcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VCNSetArtifacts = channel.unary_unary(
                '/lc.schema.LcService/VCNSetArtifacts',
                request_serializer=lc__pb2.VCNArtifactsRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNArtifactsResponse.FromString,
                )
        self.VCNSearchArtifacts = channel.unary_unary(
                '/lc.schema.LcService/VCNSearchArtifacts',
                request_serializer=lc__pb2.VCNSearchRequest.SerializeToString,
                response_deserializer=lc__pb2.EntryList.FromString,
                )
        self.VCNGetArtifacts = channel.unary_unary(
                '/lc.schema.LcService/VCNGetArtifacts',
                request_serializer=lc__pb2.VCNArtifactsGetRequest.SerializeToString,
                response_deserializer=lc__pb2.EntryList.FromString,
                )
        self.VCNLabelsGet = channel.unary_unary(
                '/lc.schema.LcService/VCNLabelsGet',
                request_serializer=lc__pb2.VCNLabelsGetRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNLabelsGetResponse.FromString,
                )
        self.VCNLabelsSet = channel.unary_unary(
                '/lc.schema.LcService/VCNLabelsSet',
                request_serializer=lc__pb2.VCNLabelsSetRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNLabelsSetResponse.FromString,
                )
        self.VCNLabelsUpdate = channel.unary_unary(
                '/lc.schema.LcService/VCNLabelsUpdate',
                request_serializer=lc__pb2.VCNLabelsUpdateRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNLabelsUpdateResponse.FromString,
                )
        self.VCNGetAttachment = channel.unary_unary(
                '/lc.schema.LcService/VCNGetAttachment',
                request_serializer=lc__pb2.VCNGetAttachmentRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNGetAttachmentResponse.FromString,
                )
        self.VCNGetClientSignature = channel.unary_unary(
                '/lc.schema.LcService/VCNGetClientSignature',
                request_serializer=lc__pb2.VCNGetClientSignatureRequest.SerializeToString,
                response_deserializer=lc__pb2.VCNGetClientSignatureResponse.FromString,
                )
        self.CurrentState = channel.unary_unary(
                '/lc.schema.LcService/CurrentState',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.ImmutableState.FromString,
                )
        self.Health = channel.unary_unary(
                '/lc.schema.LcService/Health',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__pb2.HealthResponse.FromString,
                )
        self.ReportTamper = channel.unary_unary(
                '/lc.schema.LcService/ReportTamper',
                request_serializer=lc__pb2.ReportOptions.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Feats = channel.unary_unary(
                '/lc.schema.LcService/Feats',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=lc__pb2.Features.FromString,
                )
        self.Set = channel.unary_unary(
                '/lc.schema.LcService/Set',
                request_serializer=schema__pb2.SetRequest.SerializeToString,
                response_deserializer=schema__pb2.TxHeader.FromString,
                )
        self.SetMulti = channel.unary_unary(
                '/lc.schema.LcService/SetMulti',
                request_serializer=lc__pb2.SetMultiRequest.SerializeToString,
                response_deserializer=lc__pb2.SetMultiResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/lc.schema.LcService/Get',
                request_serializer=schema__pb2.KeyRequest.SerializeToString,
                response_deserializer=schema__pb2.Entry.FromString,
                )
        self.VerifiableSet = channel.unary_unary(
                '/lc.schema.LcService/VerifiableSet',
                request_serializer=schema__pb2.VerifiableSetRequest.SerializeToString,
                response_deserializer=schema__pb2.VerifiableTx.FromString,
                )
        self.VerifiableGet = channel.unary_unary(
                '/lc.schema.LcService/VerifiableGet',
                request_serializer=schema__pb2.VerifiableGetRequest.SerializeToString,
                response_deserializer=schema__pb2.VerifiableEntry.FromString,
                )
        self.GetAll = channel.unary_unary(
                '/lc.schema.LcService/GetAll',
                request_serializer=schema__pb2.KeyListRequest.SerializeToString,
                response_deserializer=schema__pb2.Entries.FromString,
                )
        self.ExecAll = channel.unary_unary(
                '/lc.schema.LcService/ExecAll',
                request_serializer=schema__pb2.ExecAllRequest.SerializeToString,
                response_deserializer=schema__pb2.TxHeader.FromString,
                )
        self.Scan = channel.unary_unary(
                '/lc.schema.LcService/Scan',
                request_serializer=schema__pb2.ScanRequest.SerializeToString,
                response_deserializer=schema__pb2.Entries.FromString,
                )
        self.History = channel.unary_unary(
                '/lc.schema.LcService/History',
                request_serializer=schema__pb2.HistoryRequest.SerializeToString,
                response_deserializer=schema__pb2.Entries.FromString,
                )
        self.ZAdd = channel.unary_unary(
                '/lc.schema.LcService/ZAdd',
                request_serializer=schema__pb2.ZAddRequest.SerializeToString,
                response_deserializer=schema__pb2.TxHeader.FromString,
                )
        self.VerifiableZAdd = channel.unary_unary(
                '/lc.schema.LcService/VerifiableZAdd',
                request_serializer=schema__pb2.VerifiableZAddRequest.SerializeToString,
                response_deserializer=schema__pb2.VerifiableTx.FromString,
                )
        self.ZScan = channel.unary_unary(
                '/lc.schema.LcService/ZScan',
                request_serializer=schema__pb2.ZScanRequest.SerializeToString,
                response_deserializer=schema__pb2.ZEntries.FromString,
                )
        self.SendData = channel.stream_stream(
                '/lc.schema.LcService/SendData',
                request_serializer=lc__pb2.Data.SerializeToString,
                response_deserializer=lc__pb2.Response.FromString,
                )
        self.VerifiableGetExt = channel.unary_unary(
                '/lc.schema.LcService/VerifiableGetExt',
                request_serializer=schema__pb2.VerifiableGetRequest.SerializeToString,
                response_deserializer=lc__pb2.VerifiableItemExt.FromString,
                )
        self.VerifiableGetExtMulti = channel.unary_unary(
                '/lc.schema.LcService/VerifiableGetExtMulti',
                request_serializer=lc__pb2.VerifiableGetExtMultiRequest.SerializeToString,
                response_deserializer=lc__pb2.VerifiableGetExtMultiResponse.FromString,
                )
        self.ZScanExt = channel.unary_unary(
                '/lc.schema.LcService/ZScanExt',
                request_serializer=schema__pb2.ZScanRequest.SerializeToString,
                response_deserializer=lc__pb2.ZItemExtList.FromString,
                )
        self.HistoryExt = channel.unary_unary(
                '/lc.schema.LcService/HistoryExt',
                request_serializer=schema__pb2.HistoryRequest.SerializeToString,
                response_deserializer=lc__pb2.ItemExtList.FromString,
                )
        self.streamGet = channel.unary_stream(
                '/lc.schema.LcService/streamGet',
                request_serializer=schema__pb2.KeyRequest.SerializeToString,
                response_deserializer=schema__pb2.Chunk.FromString,
                )
        self.streamSet = channel.stream_unary(
                '/lc.schema.LcService/streamSet',
                request_serializer=schema__pb2.Chunk.SerializeToString,
                response_deserializer=schema__pb2.TxHeader.FromString,
                )
        self.streamVerifiableGet = channel.unary_stream(
                '/lc.schema.LcService/streamVerifiableGet',
                request_serializer=schema__pb2.VerifiableGetRequest.SerializeToString,
                response_deserializer=schema__pb2.Chunk.FromString,
                )
        self.streamVerifiableSet = channel.stream_unary(
                '/lc.schema.LcService/streamVerifiableSet',
                request_serializer=schema__pb2.Chunk.SerializeToString,
                response_deserializer=schema__pb2.VerifiableTx.FromString,
                )
        self.streamScan = channel.unary_stream(
                '/lc.schema.LcService/streamScan',
                request_serializer=schema__pb2.ScanRequest.SerializeToString,
                response_deserializer=schema__pb2.Chunk.FromString,
                )
        self.streamZScan = channel.unary_stream(
                '/lc.schema.LcService/streamZScan',
                request_serializer=schema__pb2.ZScanRequest.SerializeToString,
                response_deserializer=schema__pb2.Chunk.FromString,
                )
        self.streamHistory = channel.unary_stream(
                '/lc.schema.LcService/streamHistory',
                request_serializer=schema__pb2.HistoryRequest.SerializeToString,
                response_deserializer=schema__pb2.Chunk.FromString,
                )
        self.streamExecAll = channel.stream_unary(
                '/lc.schema.LcService/streamExecAll',
                request_serializer=schema__pb2.Chunk.SerializeToString,
                response_deserializer=schema__pb2.TxHeader.FromString,
                )


class LcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VCNSetArtifacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNSearchArtifacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNGetArtifacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNLabelsGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNLabelsSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNLabelsUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNGetAttachment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VCNGetClientSignature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CurrentState(self, request, context):
        """mixed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportTamper(self, request, context):
        """ledger compliance extensions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Feats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
        """immudb primitives
        setters and getters
        immudb primitives are deprecated
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMulti(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifiableSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifiableGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAll(self, request, context):
        """batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scan(self, request, context):
        """scanners
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def History(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifiableZAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifiableGetExt(self, request, context):
        """ledger compliance extensions - items extended with additional properties managed by LC backend (date)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifiableGetExtMulti(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZScanExt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HistoryExt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamGet(self, request, context):
        """streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamSet(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamVerifiableGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamVerifiableSet(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamZScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamExecAll(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VCNSetArtifacts': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNSetArtifacts,
                    request_deserializer=lc__pb2.VCNArtifactsRequest.FromString,
                    response_serializer=lc__pb2.VCNArtifactsResponse.SerializeToString,
            ),
            'VCNSearchArtifacts': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNSearchArtifacts,
                    request_deserializer=lc__pb2.VCNSearchRequest.FromString,
                    response_serializer=lc__pb2.EntryList.SerializeToString,
            ),
            'VCNGetArtifacts': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNGetArtifacts,
                    request_deserializer=lc__pb2.VCNArtifactsGetRequest.FromString,
                    response_serializer=lc__pb2.EntryList.SerializeToString,
            ),
            'VCNLabelsGet': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNLabelsGet,
                    request_deserializer=lc__pb2.VCNLabelsGetRequest.FromString,
                    response_serializer=lc__pb2.VCNLabelsGetResponse.SerializeToString,
            ),
            'VCNLabelsSet': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNLabelsSet,
                    request_deserializer=lc__pb2.VCNLabelsSetRequest.FromString,
                    response_serializer=lc__pb2.VCNLabelsSetResponse.SerializeToString,
            ),
            'VCNLabelsUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNLabelsUpdate,
                    request_deserializer=lc__pb2.VCNLabelsUpdateRequest.FromString,
                    response_serializer=lc__pb2.VCNLabelsUpdateResponse.SerializeToString,
            ),
            'VCNGetAttachment': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNGetAttachment,
                    request_deserializer=lc__pb2.VCNGetAttachmentRequest.FromString,
                    response_serializer=lc__pb2.VCNGetAttachmentResponse.SerializeToString,
            ),
            'VCNGetClientSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.VCNGetClientSignature,
                    request_deserializer=lc__pb2.VCNGetClientSignatureRequest.FromString,
                    response_serializer=lc__pb2.VCNGetClientSignatureResponse.SerializeToString,
            ),
            'CurrentState': grpc.unary_unary_rpc_method_handler(
                    servicer.CurrentState,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.ImmutableState.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__pb2.HealthResponse.SerializeToString,
            ),
            'ReportTamper': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportTamper,
                    request_deserializer=lc__pb2.ReportOptions.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Feats': grpc.unary_unary_rpc_method_handler(
                    servicer.Feats,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=lc__pb2.Features.SerializeToString,
            ),
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=schema__pb2.SetRequest.FromString,
                    response_serializer=schema__pb2.TxHeader.SerializeToString,
            ),
            'SetMulti': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMulti,
                    request_deserializer=lc__pb2.SetMultiRequest.FromString,
                    response_serializer=lc__pb2.SetMultiResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=schema__pb2.KeyRequest.FromString,
                    response_serializer=schema__pb2.Entry.SerializeToString,
            ),
            'VerifiableSet': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifiableSet,
                    request_deserializer=schema__pb2.VerifiableSetRequest.FromString,
                    response_serializer=schema__pb2.VerifiableTx.SerializeToString,
            ),
            'VerifiableGet': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifiableGet,
                    request_deserializer=schema__pb2.VerifiableGetRequest.FromString,
                    response_serializer=schema__pb2.VerifiableEntry.SerializeToString,
            ),
            'GetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=schema__pb2.KeyListRequest.FromString,
                    response_serializer=schema__pb2.Entries.SerializeToString,
            ),
            'ExecAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecAll,
                    request_deserializer=schema__pb2.ExecAllRequest.FromString,
                    response_serializer=schema__pb2.TxHeader.SerializeToString,
            ),
            'Scan': grpc.unary_unary_rpc_method_handler(
                    servicer.Scan,
                    request_deserializer=schema__pb2.ScanRequest.FromString,
                    response_serializer=schema__pb2.Entries.SerializeToString,
            ),
            'History': grpc.unary_unary_rpc_method_handler(
                    servicer.History,
                    request_deserializer=schema__pb2.HistoryRequest.FromString,
                    response_serializer=schema__pb2.Entries.SerializeToString,
            ),
            'ZAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.ZAdd,
                    request_deserializer=schema__pb2.ZAddRequest.FromString,
                    response_serializer=schema__pb2.TxHeader.SerializeToString,
            ),
            'VerifiableZAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifiableZAdd,
                    request_deserializer=schema__pb2.VerifiableZAddRequest.FromString,
                    response_serializer=schema__pb2.VerifiableTx.SerializeToString,
            ),
            'ZScan': grpc.unary_unary_rpc_method_handler(
                    servicer.ZScan,
                    request_deserializer=schema__pb2.ZScanRequest.FromString,
                    response_serializer=schema__pb2.ZEntries.SerializeToString,
            ),
            'SendData': grpc.stream_stream_rpc_method_handler(
                    servicer.SendData,
                    request_deserializer=lc__pb2.Data.FromString,
                    response_serializer=lc__pb2.Response.SerializeToString,
            ),
            'VerifiableGetExt': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifiableGetExt,
                    request_deserializer=schema__pb2.VerifiableGetRequest.FromString,
                    response_serializer=lc__pb2.VerifiableItemExt.SerializeToString,
            ),
            'VerifiableGetExtMulti': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifiableGetExtMulti,
                    request_deserializer=lc__pb2.VerifiableGetExtMultiRequest.FromString,
                    response_serializer=lc__pb2.VerifiableGetExtMultiResponse.SerializeToString,
            ),
            'ZScanExt': grpc.unary_unary_rpc_method_handler(
                    servicer.ZScanExt,
                    request_deserializer=schema__pb2.ZScanRequest.FromString,
                    response_serializer=lc__pb2.ZItemExtList.SerializeToString,
            ),
            'HistoryExt': grpc.unary_unary_rpc_method_handler(
                    servicer.HistoryExt,
                    request_deserializer=schema__pb2.HistoryRequest.FromString,
                    response_serializer=lc__pb2.ItemExtList.SerializeToString,
            ),
            'streamGet': grpc.unary_stream_rpc_method_handler(
                    servicer.streamGet,
                    request_deserializer=schema__pb2.KeyRequest.FromString,
                    response_serializer=schema__pb2.Chunk.SerializeToString,
            ),
            'streamSet': grpc.stream_unary_rpc_method_handler(
                    servicer.streamSet,
                    request_deserializer=schema__pb2.Chunk.FromString,
                    response_serializer=schema__pb2.TxHeader.SerializeToString,
            ),
            'streamVerifiableGet': grpc.unary_stream_rpc_method_handler(
                    servicer.streamVerifiableGet,
                    request_deserializer=schema__pb2.VerifiableGetRequest.FromString,
                    response_serializer=schema__pb2.Chunk.SerializeToString,
            ),
            'streamVerifiableSet': grpc.stream_unary_rpc_method_handler(
                    servicer.streamVerifiableSet,
                    request_deserializer=schema__pb2.Chunk.FromString,
                    response_serializer=schema__pb2.VerifiableTx.SerializeToString,
            ),
            'streamScan': grpc.unary_stream_rpc_method_handler(
                    servicer.streamScan,
                    request_deserializer=schema__pb2.ScanRequest.FromString,
                    response_serializer=schema__pb2.Chunk.SerializeToString,
            ),
            'streamZScan': grpc.unary_stream_rpc_method_handler(
                    servicer.streamZScan,
                    request_deserializer=schema__pb2.ZScanRequest.FromString,
                    response_serializer=schema__pb2.Chunk.SerializeToString,
            ),
            'streamHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.streamHistory,
                    request_deserializer=schema__pb2.HistoryRequest.FromString,
                    response_serializer=schema__pb2.Chunk.SerializeToString,
            ),
            'streamExecAll': grpc.stream_unary_rpc_method_handler(
                    servicer.streamExecAll,
                    request_deserializer=schema__pb2.Chunk.FromString,
                    response_serializer=schema__pb2.TxHeader.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lc.schema.LcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VCNSetArtifacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNSetArtifacts',
            lc__pb2.VCNArtifactsRequest.SerializeToString,
            lc__pb2.VCNArtifactsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNSearchArtifacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNSearchArtifacts',
            lc__pb2.VCNSearchRequest.SerializeToString,
            lc__pb2.EntryList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNGetArtifacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNGetArtifacts',
            lc__pb2.VCNArtifactsGetRequest.SerializeToString,
            lc__pb2.EntryList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNLabelsGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNLabelsGet',
            lc__pb2.VCNLabelsGetRequest.SerializeToString,
            lc__pb2.VCNLabelsGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNLabelsSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNLabelsSet',
            lc__pb2.VCNLabelsSetRequest.SerializeToString,
            lc__pb2.VCNLabelsSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNLabelsUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNLabelsUpdate',
            lc__pb2.VCNLabelsUpdateRequest.SerializeToString,
            lc__pb2.VCNLabelsUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNGetAttachment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNGetAttachment',
            lc__pb2.VCNGetAttachmentRequest.SerializeToString,
            lc__pb2.VCNGetAttachmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VCNGetClientSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VCNGetClientSignature',
            lc__pb2.VCNGetClientSignatureRequest.SerializeToString,
            lc__pb2.VCNGetClientSignatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CurrentState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/CurrentState',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.ImmutableState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/Health',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportTamper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/ReportTamper',
            lc__pb2.ReportOptions.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Feats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/Feats',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            lc__pb2.Features.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/Set',
            schema__pb2.SetRequest.SerializeToString,
            schema__pb2.TxHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMulti(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/SetMulti',
            lc__pb2.SetMultiRequest.SerializeToString,
            lc__pb2.SetMultiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/Get',
            schema__pb2.KeyRequest.SerializeToString,
            schema__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifiableSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VerifiableSet',
            schema__pb2.VerifiableSetRequest.SerializeToString,
            schema__pb2.VerifiableTx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifiableGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VerifiableGet',
            schema__pb2.VerifiableGetRequest.SerializeToString,
            schema__pb2.VerifiableEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/GetAll',
            schema__pb2.KeyListRequest.SerializeToString,
            schema__pb2.Entries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/ExecAll',
            schema__pb2.ExecAllRequest.SerializeToString,
            schema__pb2.TxHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/Scan',
            schema__pb2.ScanRequest.SerializeToString,
            schema__pb2.Entries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def History(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/History',
            schema__pb2.HistoryRequest.SerializeToString,
            schema__pb2.Entries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/ZAdd',
            schema__pb2.ZAddRequest.SerializeToString,
            schema__pb2.TxHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifiableZAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VerifiableZAdd',
            schema__pb2.VerifiableZAddRequest.SerializeToString,
            schema__pb2.VerifiableTx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/ZScan',
            schema__pb2.ZScanRequest.SerializeToString,
            schema__pb2.ZEntries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/lc.schema.LcService/SendData',
            lc__pb2.Data.SerializeToString,
            lc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifiableGetExt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VerifiableGetExt',
            schema__pb2.VerifiableGetRequest.SerializeToString,
            lc__pb2.VerifiableItemExt.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifiableGetExtMulti(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/VerifiableGetExtMulti',
            lc__pb2.VerifiableGetExtMultiRequest.SerializeToString,
            lc__pb2.VerifiableGetExtMultiResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZScanExt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/ZScanExt',
            schema__pb2.ZScanRequest.SerializeToString,
            lc__pb2.ZItemExtList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HistoryExt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lc.schema.LcService/HistoryExt',
            schema__pb2.HistoryRequest.SerializeToString,
            lc__pb2.ItemExtList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lc.schema.LcService/streamGet',
            schema__pb2.KeyRequest.SerializeToString,
            schema__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamSet(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/lc.schema.LcService/streamSet',
            schema__pb2.Chunk.SerializeToString,
            schema__pb2.TxHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamVerifiableGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lc.schema.LcService/streamVerifiableGet',
            schema__pb2.VerifiableGetRequest.SerializeToString,
            schema__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamVerifiableSet(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/lc.schema.LcService/streamVerifiableSet',
            schema__pb2.Chunk.SerializeToString,
            schema__pb2.VerifiableTx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lc.schema.LcService/streamScan',
            schema__pb2.ScanRequest.SerializeToString,
            schema__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamZScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lc.schema.LcService/streamZScan',
            schema__pb2.ZScanRequest.SerializeToString,
            schema__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/lc.schema.LcService/streamHistory',
            schema__pb2.HistoryRequest.SerializeToString,
            schema__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamExecAll(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/lc.schema.LcService/streamExecAll',
            schema__pb2.Chunk.SerializeToString,
            schema__pb2.TxHeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
