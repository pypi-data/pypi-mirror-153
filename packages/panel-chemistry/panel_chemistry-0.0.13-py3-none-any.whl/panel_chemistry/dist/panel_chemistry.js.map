{"version":3,"sources":["@@\\panel_chemistry\\dist\\lib\\index.js","@@\\panel_chemistry\\dist\\lib\\bokeh_extensions\\index.js","@@\\panel_chemistry\\dist\\lib\\bokeh_extensions\\jsme_editor.js","@@\\panel_chemistry\\dist\\lib\\bokeh_extensions\\ngl_viewer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const tslib_1 = require(\"tslib\");\r\n    const PanelChemistryExtensions = (0, tslib_1.__importStar)(require(\"1d64c18294\") /* ./bokeh_extensions/ */);\r\n    exports.PanelChemistryExtensions = PanelChemistryExtensions;\r\n    const base_1 = require(\"@bokehjs/base\");\r\n    (0, base_1.register_models)(PanelChemistryExtensions);\r\n}\r\n","/* bokeh_extensions\\index.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    var jsme_editor_1 = require(\"7b93e4c7bc\") /* ./jsme_editor */;\r\n    __esExport(\"JSMEEditor\", jsme_editor_1.JSMEEditor);\r\n    var ngl_viewer_1 = require(\"dfab2fc5c6\") /* ./ngl_viewer */;\r\n    __esExport(\"NGLViewer\", ngl_viewer_1.NGLViewer);\r\n}\r\n","/* bokeh_extensions\\jsme_editor.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    // See https://docs.bokeh.org/en/latest/docs/reference/models/layouts.html\r\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\r\n    const dom_1 = require(\"@bokehjs/core/dom\");\r\n    function uuidv4() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n    const notSubscribed = \"Not Subscribed\";\r\n    function readSDFValue(jsmeElement) {\r\n        var data = jsmeElement.getMultiSDFstack();\r\n        var output = \"No multirecords SDF was pasted into the editor \";\r\n        if (data.length > 0) {\r\n            output = data.join(\"$$$$\\n\") + \"$$$$\\n\";\r\n        }\r\n        return output;\r\n    }\r\n    function setModelValue(model, jsmeElement) {\r\n        console.log(\"setValue - start\", model.value);\r\n        var value = model.value;\r\n        if (model.format === \"smiles\") {\r\n            console.log(\"getting smiles\");\r\n            value = jsmeElement.smiles();\r\n            console.log(\"got smiles\");\r\n        }\r\n        else if (model.format === \"mol\") {\r\n            value = jsmeElement.molFile(false);\r\n        }\r\n        else if (model.format === \"mol3000\") {\r\n            value = jsmeElement.molFile(true);\r\n        }\r\n        else if (model.format === \"sdf\") {\r\n            value = readSDFValue(jsmeElement);\r\n        }\r\n        else {\r\n            value = jsmeElement.jmeFile();\r\n        }\r\n        if (model.value !== value && value !== null) {\r\n            console.log(\"setting value\", value);\r\n            model.value = value;\r\n        }\r\n        console.log(\"setValue - end\", model.value);\r\n    }\r\n    function setModelValues(model, jsmeElement) {\r\n        console.log(\"setValues - start\");\r\n        setModelValue(model, jsmeElement);\r\n        setOtherModelValues(model, jsmeElement);\r\n        console.log(\"setValues - end\");\r\n    }\r\n    function resetOtherModelValues(model, jsmeElement) {\r\n        if (!model.subscriptions.includes(\"jme\")) {\r\n            model.jme = notSubscribed;\r\n        }\r\n        if (!model.subscriptions.includes(\"smiles\")) {\r\n            model.smiles = notSubscribed;\r\n        }\r\n        if (!model.subscriptions.includes(\"mol\")) {\r\n            model.mol = notSubscribed;\r\n        }\r\n        if (!model.subscriptions.includes(\"mol3000\")) {\r\n            model.mol3000 = notSubscribed;\r\n        }\r\n        if (!model.subscriptions.includes(\"sdf\")) {\r\n            model.sdf = notSubscribed;\r\n        }\r\n        setModelValues(model, jsmeElement);\r\n    }\r\n    function cleanValue(value) {\r\n        if (value === null) {\r\n            return \"null\";\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    function setOtherModelValues(model, jsmeElement) {\r\n        console.log(\"setOtherValues - start\");\r\n        if (model.subscriptions.includes(\"jme\")) {\r\n            model.jme = cleanValue(jsmeElement.jmeFile());\r\n        }\r\n        if (model.subscriptions.includes(\"smiles\")) {\r\n            model.smiles = cleanValue(jsmeElement.smiles());\r\n        }\r\n        if (model.subscriptions.includes(\"mol\")) {\r\n            model.mol = cleanValue(jsmeElement.molFile(false));\r\n        }\r\n        if (model.subscriptions.includes(\"mol3000\")) {\r\n            model.mol3000 = cleanValue(jsmeElement.molFile(true));\r\n        }\r\n        if (model.subscriptions.includes(\"sdf\")) {\r\n            model.sdf = cleanValue(readSDFValue(jsmeElement));\r\n        }\r\n        console.log(\"setOtherValues - end\");\r\n    }\r\n    // The view of the Bokeh extension/ HTML element\r\n    // Here you can define how to render the model as well as react to model changes or View events.\r\n    class JSMEEditorView extends html_box_1.HTMLBoxView {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.JSME = window.JSApplet.JSME;\r\n            this.valueChanging = true;\r\n        }\r\n        connect_signals() {\r\n            super.connect_signals();\r\n            this.connect(this.model.properties.value.change, () => {\r\n                console.log(\"value change\", this.model.value);\r\n                if (!this.valueChanging) {\r\n                    if (this.model.value === \"\") {\r\n                        this.jsmeElement.reset();\r\n                    }\r\n                    else {\r\n                        this.jsmeElement.readGenericMolecularInput(this.model.value);\r\n                    }\r\n                }\r\n            });\r\n            this.connect(this.model.properties.format.change, () => {\r\n                console.log(\"format change\", this.model.format);\r\n                setModelValue(this.model, this.jsmeElement);\r\n            });\r\n            this.connect(this.model.properties.subscriptions.change, () => {\r\n                console.log(\"subscriptions change\", this.model.subscriptions);\r\n                resetOtherModelValues(this.model, this.jsmeElement);\r\n            });\r\n            this.connect(this.model.properties.options.change, () => {\r\n                console.log(\"options change\", this.model.options);\r\n                this.setJSMEOptions();\r\n            });\r\n            this.connect(this.model.properties.guicolor.change, () => {\r\n                console.log(\"options change\", this.model.options);\r\n                this.setGUIColor();\r\n            });\r\n        }\r\n        render() {\r\n            console.log(\"render - start\");\r\n            super.render();\r\n            const id = \"jsme-\" + uuidv4();\r\n            const container = (0, dom_1.div)({ class: \"jsme-editor\", id: id });\r\n            this.el.appendChild(container);\r\n            this.jsmeElement = new this.JSME(id, this.getHeight(), this.getWidth(), {\r\n                \"options\": this.model.options.join(\",\"),\r\n                \"guicolor\": this.model.guicolor\r\n            });\r\n            this.jsmeElement.readGenericMolecularInput(this.model.value);\r\n            resetOtherModelValues(this.model, this.jsmeElement);\r\n            setModelValues(this.model, this.jsmeElement);\r\n            const this_ = this;\r\n            function showEvent(event) {\r\n                console.log(\"event\", event);\r\n                this_.valueChanging = true;\r\n                setModelValues(this_.model, this_.jsmeElement);\r\n                this_.valueChanging = false;\r\n            }\r\n            this.jsmeElement.setAfterStructureModifiedCallback(showEvent);\r\n            console.log(\"render - end\");\r\n        }\r\n        setGUIColor() {\r\n            console.log(\"setGUIColor\", this.model.guicolor);\r\n            this.jsmeElement.setUserInterfaceBackgroundColor(this.model.guicolor);\r\n        }\r\n        setJSMEOptions() {\r\n            const options = this.model.options.join(\",\");\r\n            console.log(\"setJSMEOptions\", options);\r\n            this.jsmeElement.options(options);\r\n        }\r\n        getHeight() {\r\n            if ((this.model.sizing_mode === \"stretch_height\" || this.model.sizing_mode === \"stretch_both\") && this.el.style.height) {\r\n                return this.el.style.height;\r\n            }\r\n            else if (this.model.height) {\r\n                return this.model.height.toString() + \"px\";\r\n            }\r\n            else {\r\n                return \"100px\";\r\n            }\r\n        }\r\n        getWidth() {\r\n            if ((this.model.sizing_mode === \"stretch_width\" || this.model.sizing_mode === \"stretch_both\") && this.el.style.width) {\r\n                return this.el.style.width;\r\n            }\r\n            else if (this.model.width) {\r\n                return this.model.width.toString() + \"px\";\r\n            }\r\n            else {\r\n                return \"100px\";\r\n            }\r\n        }\r\n        resizeJSMEElement() {\r\n            this.jsmeElement.setSize(this.getWidth(), this.getHeight());\r\n        }\r\n        after_layout() {\r\n            super.after_layout();\r\n            this.resizeJSMEElement();\r\n        }\r\n    }\r\n    exports.JSMEEditorView = JSMEEditorView;\r\n    JSMEEditorView.__name__ = \"JSMEEditorView\";\r\n    // The Bokeh .ts model corresponding to the Bokeh .py model\r\n    class JSMEEditor extends html_box_1.HTMLBox {\r\n        constructor(attrs) {\r\n            super(attrs);\r\n        }\r\n        static init_JSMEEditor() {\r\n            this.prototype.default_view = JSMEEditorView;\r\n            this.define(({ String, Array }) => ({\r\n                value: [String, \"\"],\r\n                format: [String, \"\"],\r\n                options: [Array(String), []],\r\n                jme: [String, \"\"],\r\n                smiles: [String, \"\"],\r\n                mol: [String, \"\"],\r\n                mol3000: [String, \"\"],\r\n                sdf: [String, \"\"],\r\n                subscriptions: [Array(String), []],\r\n                guicolor: [String, \"#c0c0c0\"],\r\n            }));\r\n        }\r\n    }\r\n    exports.JSMEEditor = JSMEEditor;\r\n    JSMEEditor.__name__ = \"JSMEEditor\";\r\n    JSMEEditor.__module__ = \"panel_chemistry.bokeh_extensions.jsme_editor\";\r\n    JSMEEditor.init_JSMEEditor();\r\n}\r\n","/* bokeh_extensions\\ngl_viewer.js */ function _(require, module, exports, __esModule, __esExport) {\r\n    __esModule();\r\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\r\n    class NGLViewerView extends html_box_1.HTMLBoxView {\r\n        connect_signals() {\r\n            super.connect_signals();\r\n            this.connect(this.model.properties.object.change, this.updateStage);\r\n            this.connect(this.model.properties.extension.change, this.updateStage);\r\n            this.connect(this.model.properties.representation.change, this.updateStage);\r\n            this.connect(this.model.properties.color_scheme.change, this.updateParameters);\r\n            this.connect(this.model.properties.custom_color_scheme.change, this.updateParameters);\r\n            this.connect(this.model.properties.effect.change, this.updateEffect);\r\n            this.connect(this.model.properties.background.change, this.setBackgroundcolor);\r\n        }\r\n        render() {\r\n            super.render();\r\n            this.el.id = \"viewport\";\r\n            const wn = window;\r\n            const ngl = wn.NGL;\r\n            this._stage = new ngl.Stage(this.el);\r\n            this.setBackgroundcolor();\r\n            const stage = this._stage;\r\n            this.updateStage();\r\n            window.addEventListener(\"resize\", function () {\r\n                stage.handleResize();\r\n            }, false);\r\n        }\r\n        setBackgroundcolor() {\r\n            console.log(this.model.background);\r\n            this._stage.setParameters({ backgroundColor: this.model.background });\r\n        }\r\n        after_layout() {\r\n            super.after_layout();\r\n            this._stage.handleResize();\r\n        }\r\n        updateEffect() {\r\n            if (this.model.effect === \"spin\") {\r\n                this._stage.setSpin(true);\r\n            }\r\n            else if (this.model.effect === \"rock\") {\r\n                this._stage.setRock(true);\r\n            }\r\n            else {\r\n                this._stage.setSpin(false);\r\n                this._stage.setRock(false);\r\n            }\r\n        }\r\n        getParameters() {\r\n            if (this.model.color_scheme === \"custom\") {\r\n                var list = this.model.custom_color_scheme;\r\n                var scheme = NGL.ColormakerRegistry.addSelectionScheme(list, \"new scheme\");\r\n                return { color: scheme };\r\n            }\r\n            else {\r\n                return { colorScheme: this.model.color_scheme };\r\n            }\r\n        }\r\n        updateParameters() {\r\n            const parameters = this.getParameters();\r\n            try {\r\n                this._stage.compList[0].reprList[0].setParameters(parameters);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        updateStage() {\r\n            const model = this.model;\r\n            this._stage.removeAllComponents();\r\n            if (model.object === \"\") {\r\n                return;\r\n            }\r\n            const parameters = this.getParameters();\r\n            function finish(o) {\r\n                o.addRepresentation(model.representation, parameters);\r\n                o.autoView();\r\n            }\r\n            if (model.extension !== \"\") {\r\n                this._stage.loadFile(new Blob([model.object], { type: 'text/plain' }), { ext: model.extension }).then(finish);\r\n            }\r\n            else if (model.object.includes(\"://\")) {\r\n                this._stage.loadFile(model.object).then(finish);\r\n            }\r\n            else {\r\n                this._stage.loadFile(\"rcsb://\" + model.object).then(finish);\r\n            }\r\n            // this.updateColor()\r\n            this.updateEffect();\r\n        }\r\n    }\r\n    exports.NGLViewerView = NGLViewerView;\r\n    NGLViewerView.__name__ = \"NGLViewerView\";\r\n    class NGLViewer extends html_box_1.HTMLBox {\r\n        constructor(attrs) {\r\n            super(attrs);\r\n        }\r\n        static init_NGLViewer() {\r\n            this.prototype.default_view = NGLViewerView;\r\n            this.define(({ String, Any }) => ({\r\n                object: [String, \"\"],\r\n                extension: [String, \"\"],\r\n                representation: [String, \"ribbon\"],\r\n                color_scheme: [String, \"chainid\"],\r\n                custom_color_scheme: [Any, \"chainid\"],\r\n                effect: [String, \"\"],\r\n            }));\r\n            this.override({\r\n                height: 400,\r\n                width: 600\r\n            });\r\n        }\r\n    }\r\n    exports.NGLViewer = NGLViewer;\r\n    NGLViewer.__name__ = \"NGLViewer\";\r\n    NGLViewer.__module__ = \"panel_chemistry.bokeh_extensions.ngl_viewer\";\r\n    NGLViewer.init_NGLViewer();\r\n}\r\n"]}