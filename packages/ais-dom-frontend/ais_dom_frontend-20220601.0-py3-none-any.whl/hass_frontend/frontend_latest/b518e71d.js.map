{"version":3,"file":"b518e71d.js","mappings":";;AAkKA;AACA;AACA;AACA;;AAOA;AAEA;AAcA;;AAKA;;;AAOA;;AAIA;AAIA;;;;;;;AAeA;AClNA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;ACGA;AAIA;;;AA+CA;;;AAGA;;;AAQA;;;AAGA;AACA;AACA;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;AAGA;;AAEA;AACA;;;;;;AAMA;AAGA;;AAEA;AACA;;;;AAIA;;;AAKA;;AAEA;AACA;;;AAGA;;;;AAKA;;;AAIA;AAGA;;AAEA;;;;AAnFA;;;;;;;;;;;;;;;;;AA1CA","sources":["webpack://home-assistant-frontend/mwc-list-item-base.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/application_credentials/dialog-add-application-credential.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {html, LitElement} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport type SelectionSource = 'interaction'|'property';\nexport interface RequestSelectedDetail {\n  selected: boolean;\n  source: SelectionSource;\n}\n\nexport interface Layoutable {\n  layout: (updateItems?: boolean) => void;\n  debouncedLayout?: (updateItems?: boolean) => void | undefined;\n}\n\nexport type GraphicType = 'avatar'|'icon'|'medium'|'large'|'control'|null;\n\n/**\n * @fires request-selected {RequestSelectedDetail}\n * @fires list-item-rendered\n */\nexport class ListItemBase extends LitElement {\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @property({type: String}) value = '';\n  @property({type: String, reflect: true}) group: string|null = null;\n  @property({type: Number, reflect: true}) tabindex = -1;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.setAttribute('aria-disabled', 'true');\n    } else {\n      this.setAttribute('aria-disabled', 'false');\n    }\n  })\n  disabled = false;\n  @property({type: Boolean, reflect: true}) twoline = false;\n  @property({type: Boolean, reflect: true}) activated = false;\n  @property({type: String, reflect: true}) graphic: GraphicType = null;\n  @property({type: Boolean}) multipleGraphics = false;\n  @property({type: Boolean}) hasMeta = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    if (value) {\n      this.removeAttribute('aria-checked');\n      this.removeAttribute('mwc-list-item');\n      this.selected = false;\n      this.activated = false;\n      this.tabIndex = -1;\n    } else {\n      this.setAttribute('mwc-list-item', '');\n    }\n  })\n  noninteractive = false;\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: ListItemBase, value: boolean) {\n    const role = this.getAttribute('role');\n    const isAriaSelectable = role === 'gridcell' || role === 'option' ||\n        role === 'row' || role === 'tab';\n\n    if (isAriaSelectable && value) {\n      this.setAttribute('aria-selected', 'true');\n    } else if (isAriaSelectable) {\n      this.setAttribute('aria-selected', 'false');\n    }\n\n    if (this._firstChanged) {\n      this._firstChanged = false;\n      return;\n    }\n\n    if (this._skipPropRequest) {\n      return;\n    }\n\n    this.fireRequestSelected(value, 'property');\n  })\n  selected = false;\n\n  @state() protected shouldRenderRipple = false;\n  @state() _managingList: Layoutable|null = null;\n\n  protected boundOnClick = this.onClick.bind(this);\n  protected _firstChanged = true;\n  protected _skipPropRequest = false;\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n  protected listeners: ({\n    target: Element;\n    eventNames: string[];\n    cb: EventListenerOrEventListenerObject;\n  })[] =\n      [\n        {\n          target: this,\n          eventNames: ['click'],\n          cb:\n              () => {\n                this.onClick();\n              },\n        },\n        {\n          target: this,\n          eventNames: ['mouseenter'],\n          cb: this.rippleHandlers.startHover,\n        },\n        {\n          target: this,\n          eventNames: ['mouseleave'],\n          cb: this.rippleHandlers.endHover,\n        },\n        {\n          target: this,\n          eventNames: ['focus'],\n          cb: this.rippleHandlers.startFocus,\n        },\n        {\n          target: this,\n          eventNames: ['blur'],\n          cb: this.rippleHandlers.endFocus,\n        },\n        {\n          target: this,\n          eventNames: ['mousedown', 'touchstart'],\n          cb:\n              (e: Event) => {\n                const name = e.type;\n                this.onDown(name === 'mousedown' ? 'mouseup' : 'touchend', e);\n              },\n        },\n      ];\n\n  get text() {\n    const textContent = this.textContent;\n\n    return textContent ? textContent.trim() : '';\n  }\n\n  override render() {\n    const text = this.renderText();\n    const graphic = this.graphic ? this.renderGraphic() : html``;\n    const meta = this.hasMeta ? this.renderMeta() : html``;\n\n    return html`\n      ${this.renderRipple()}\n      ${graphic}\n      ${text}\n      ${meta}`;\n  }\n\n  protected renderRipple() {\n    if (this.shouldRenderRipple) {\n      return html`\n      <mwc-ripple\n        .activated=${this.activated}>\n      </mwc-ripple>`;\n    } else if (this.activated) {\n      return html`<div class=\"fake-activated-ripple\"></div>`;\n    } else {\n      return '';\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicClasses = {\n      multi: this.multipleGraphics,\n    };\n\n    return html`\n      <span class=\"mdc-deprecated-list-item__graphic material-icons ${\n        classMap(graphicClasses)}\">\n        <slot name=\"graphic\"></slot>\n      </span>`;\n  }\n\n  protected renderMeta() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__meta material-icons\">\n        <slot name=\"meta\"></slot>\n      </span>`;\n  }\n\n  protected renderText() {\n    const inner = this.twoline ? this.renderTwoline() : this.renderSingleLine();\n    return html`\n      <span class=\"mdc-deprecated-list-item__text\">\n        ${inner}\n      </span>`;\n  }\n\n  protected renderSingleLine() {\n    return html`<slot></slot>`;\n  }\n\n  protected renderTwoline() {\n    return html`\n      <span class=\"mdc-deprecated-list-item__primary-text\">\n        <slot></slot>\n      </span>\n      <span class=\"mdc-deprecated-list-item__secondary-text\">\n        <slot name=\"secondary\"></slot>\n      </span>\n    `;\n  }\n\n  protected onClick() {\n    this.fireRequestSelected(!this.selected, 'interaction');\n  }\n\n  protected onDown(upName: string, evt: Event) {\n    const onUp = () => {\n      window.removeEventListener(upName, onUp);\n      this.rippleHandlers.endPress();\n    };\n\n    window.addEventListener(upName, onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected fireRequestSelected(selected: boolean, source: SelectionSource) {\n    if (this.noninteractive) {\n      return;\n    }\n\n    const customEv = new CustomEvent<RequestSelectedDetail>(\n        'request-selected',\n        {bubbles: true, composed: true, detail: {source, selected}});\n\n    this.dispatchEvent(customEv);\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.noninteractive) {\n      this.setAttribute('mwc-list-item', '');\n    }\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.addEventListener(\n            eventName, listener.cb, {passive: true});\n      }\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      for (const eventName of listener.eventNames) {\n        listener.target.removeEventListener(eventName, listener.cb);\n      }\n    }\n\n    if (this._managingList) {\n      this._managingList.debouncedLayout ?\n          this._managingList.debouncedLayout(true) :\n          this._managingList.layout(true);\n    }\n  }\n\n  // composed flag, event fire through shadow root and up through composed tree\n  protected override firstUpdated() {\n    const ev = new Event('list-item-rendered', {bubbles: true, composed: true});\n    this.dispatchEvent(ev);\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n        margin-inline-end: 40px;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-combo-box\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-textfield\";\nimport {\n  fetchApplicationCredentialsConfig,\n  createApplicationCredential,\n  ApplicationCredential,\n} from \"../../../data/application_credential\";\nimport { domainToName } from \"../../../data/integration\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AddApplicationCredentialDialogParams } from \"./show-dialog-add-application-credential\";\n\ninterface Domain {\n  id: string;\n  name: string;\n}\n\nconst rowRenderer: ComboBoxLitRenderer<Domain> = (item) => html`<mwc-list-item>\n  <span>${item.name}</span>\n</mwc-list-item>`;\n\n@customElement(\"dialog-add-application-credential\")\nexport class DialogAddApplicationCredential extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  // Error message when can't talk to server etc\n  @state() private _error?: string;\n\n  @state() private _params?: AddApplicationCredentialDialogParams;\n\n  @state() private _domain?: string;\n\n  @state() private _name?: string;\n\n  @state() private _clientId?: string;\n\n  @state() private _clientSecret?: string;\n\n  @state() private _domains?: Domain[];\n\n  public showDialog(params: AddApplicationCredentialDialogParams) {\n    this._params = params;\n    this._domain =\n      params.selectedDomain !== undefined ? params.selectedDomain : \"\";\n    this._name = \"\";\n    this._clientId = \"\";\n    this._clientSecret = \"\";\n    this._error = undefined;\n    this._loading = false;\n    this._fetchConfig();\n  }\n\n  private async _fetchConfig() {\n    const config = await fetchApplicationCredentialsConfig(this.hass);\n    this._domains = config.domains.map((domain) => ({\n      id: domain,\n      name: domainToName(this.hass.localize, domain),\n    }));\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._domains) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._abortDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            \"ui.panel.config.application_credentials.editor.caption\"\n          )\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <ha-combo-box\n            name=\"domain\"\n            .hass=${this.hass}\n            .disabled=${!!this._params.selectedDomain}\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.domain\"\n            )}\n            .value=${this._domain}\n            .renderer=${rowRenderer}\n            .items=${this._domains}\n            item-id-path=\"id\"\n            item-value-path=\"id\"\n            item-label-path=\"name\"\n            required\n            @value-changed=${this._handleDomainPicked}\n          ></ha-combo-box>\n          <ha-textfield\n            class=\"name\"\n            name=\"name\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.name\"\n            )}\n            .value=${this._name}\n            required\n            @input=${this._handleValueChanged}\n            error-message=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></ha-textfield>\n          <ha-textfield\n            class=\"clientId\"\n            name=\"clientId\"\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_id\"\n            )}\n            .value=${this._clientId}\n            required\n            @input=${this._handleValueChanged}\n            error-message=${this.hass.localize(\"ui.common.error_required\")}\n            dialogInitialFocus\n          ></ha-textfield>\n          <ha-textfield\n            .label=${this.hass.localize(\n              \"ui.panel.config.application_credentials.editor.client_secret\"\n            )}\n            type=\"password\"\n            name=\"clientSecret\"\n            .value=${this._clientSecret}\n            required\n            @input=${this._handleValueChanged}\n            error-message=${this.hass.localize(\"ui.common.error_required\")}\n          ></ha-textfield>\n        </div>\n        ${this._loading\n          ? html`\n              <div slot=\"primaryAction\" class=\"submit-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${!this._domain ||\n                !this._clientId ||\n                !this._clientSecret}\n                @click=${this._createApplicationCredential}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.application_credentials.editor.create\"\n                )}\n              </mwc-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    this._domains = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private async _handleDomainPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    this._domain = ev.detail.value;\n  }\n\n  private _handleValueChanged(ev: CustomEvent) {\n    this._error = undefined;\n    const name = (ev.target as any).name;\n    const value = (ev.target as any).value;\n    this[`_${name}`] = value;\n  }\n\n  private _abortDialog() {\n    if (this._params && this._params.dialogAbortedCallback) {\n      this._params.dialogAbortedCallback();\n    }\n    this.closeDialog();\n  }\n\n  private async _createApplicationCredential(ev) {\n    ev.preventDefault();\n    if (!this._domain || !this._clientId || !this._clientSecret) {\n      return;\n    }\n\n    this._loading = true;\n    this._error = \"\";\n\n    let applicationCredential: ApplicationCredential;\n    try {\n      applicationCredential = await createApplicationCredential(\n        this.hass,\n        this._domain,\n        this._clientId,\n        this._clientSecret,\n        this._name\n      );\n    } catch (err: any) {\n      this._loading = false;\n      this._error = err.message;\n      return;\n    }\n    this._params!.applicationCredentialAddedCallback(applicationCredential);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-z-index: 10;\n        }\n        .row {\n          display: flex;\n          padding: 8px 0;\n        }\n        ha-combo-box {\n          display: block;\n          margin-bottom: 24px;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-add-application-credential\": DialogAddApplicationCredential;\n  }\n}\n"],"names":[],"sourceRoot":""}