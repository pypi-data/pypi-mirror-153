# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['fluvial_particle']

package_data = \
{'': ['*']}

install_requires = \
['h5py>=3.7.0,<4.0.0', 'vtk>=9.1']

setup_kwargs = {
    'name': 'fluvial-particle',
    'version': '0.0.1',
    'description': 'Lagrangian particle-tracking for fluvial environments.',
    'long_description': "# Fluvial Particle\n\n[![PyPI](https://img.shields.io/pypi/v/fluvial-particle.svg)](https://pypi.org/project/fluvial-particle/)\n[![Status](https://img.shields.io/pypi/status/fluvial-particle.svg)](https://pypi.org/project/fluvial-particle/)\n[![Python Version](https://img.shields.io/pypi/pyversions/fluvial-particle)](https://pypi.org/project/fluvial-particle/)\n[![License](https://img.shields.io/pypi/l/fluvial-particle)](https://creativecommons.org/publicdomain/zero/1.0/legalcode)\n[![Read the Docs](https://img.shields.io/readthedocs/fluvial-particle/latest.svg?label=Read%20the%20Docs)](https://fluvial-particle.readthedocs.io/)\n\n[![Tests](https://code.usgs.gov/wma/nhgf/fluvparticle/badges/main/pipeline.svg)](https://code.usgs.gov/wma/nhgf/fluvparticle/-/commits/main)\n[![Codecov](https://codecov.io/gh/rmcd-mscb/fluvial-particle/branch/main/graph/badge.svg)](https://codecov.io/gh/rmcd-mscb/fluvial-particle)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Features\n\n- TODO\n\n## Requirements\n\nper Cliff Hills setup description: <https://code.usgs.gov/wma/nhgf/pygeoapi-plugin-cookiecutter>\n\nTo set up your development environment do the following.\n\n- fork the reposistory\n\n```{.sourceCode .console}\n# to remind yourself your working on a fork\ngit clone git@code.usgs.gov:<user_id>/fluvparticle.git fluvial-partile-fork\n```\n\nSetup Development Environment\n\n```{.sourceCode .console}\nconda env create -f environment.yml\nconda develop -n {{cookiecutter.project_name}} src\nconda activate {{cookiecutter.project_name}}\npip install -r requirements.dev\n```\n\nIt is important to get [preccommit](https://pre-commit.com/) enabled on\nthe project, to ensure that certain standards are always met on a git\ncommit. With several of these, it might fail if files are changed, but\nit will change them, and trying the commit a second time will actually\nwork.\n\n### Git hook configuration\n\n```{.sourceCode .console}\npre-commit install --install-hooks\n```\n\n### Testing\n\n[Nox](https://nox.thea.codes/) is used for testing everything, with\nseveral sessions built-in. To run the full suite of tests, simply use:\n\n```{.sourceCode .console}\nnox\n```\n\nThe different sessions are:\n\n- `pre-commit` -- validates that the\n  [preccommit](https://pre-commit.com/) checks all come back clean.\n- `safety` -- validates the [Safety](https://github.com/pyupio/safety)\n  of all production dependencies.\n- `mypy` -- validates the type-hints for the application using\n  [mypy](http://mypy-lang.org/).\n- `tests` -- runs all [pytest](https://docs.pytest.org/en/latest/)\n  tests.\n- `typeguard` -- runs all [pytest](https://docs.pytest.org/en/latest/)\n  tests, validates with\n  [Typeguard](https://github.com/agronholm/typeguard).\n- `xdoctest` -- runs any and all documentation examples with\n  [xdoctest](https://github.com/Erotemic/xdoctest).\n- `docs-build` -- builds the full set of generated API docs with\n  [Sphinx](http://www.sphinx-doc.org/).\n\nThese can be run individually with the following command:\n\n```{.sourceCode .console}\nnox -s <session>\n```\n\nReplace `<session>` with the name of the session give above, i.e.:\n\n```{.sourceCode .console}\nnox -s mypy\n```\n\nYou can also simply run [pytest](https://docs.pytest.org/en/latest/)\ntests, by using the command:\n\n```{.sourceCode .console}\npytest tests\n```\n\n### Dependencies\n\nProduction dependencies are duplicated, in both `requirements.txt` and\n`environment.yml` due to how [conda](https://www.anaconda.com) does not\nwork with the `requirements.txt` file. It is necessary for both files to\nbe updated as dependencies are added.\n\nDevelopment dependencies are contained in `requirements.dev`.\n\n### Version Management\n\nThe projects made by this cookiecutter use\n[Bump2version](https://github.com/c4urself/bump2version) for version\nmanagement. The default version that the project starts with is a\ndevelopmental version, `0.0.1-dev0`. In github, this should be\nauto-incremented on each commit to the next dev build number. To manage\nthe version changes yourself, you can use the\n[Bump2version](https://github.com/c4urself/bump2version) command:\n\n```{.sourceCode .console}\nbump2version <part>\n```\n\nWhere `<part>` is one of:\n\n- `major`\n- `minor`\n- `patch`\n- `build`\n\nNote:\n: This makes a `dev` version, which does not write a tag into git. It is just useful for development purposes and not the version that is recommended for a release version. The version string will be formatted as: `<major>.<minor>.<patch>-dev<build>`\n\nTo do a production release, use the command:\n\n```{.sourceCode .console}\nbump2version --tag release\n```\n\nThis will add a tag in the git repository noting the version.\n\nNote:\n: The version string for this will be: `<major>.<minor>.<patch>`\n\n## Utilities\n\n- Packaging and dependency management with\n  [conda](https://www.anaconda.com)\n- Test automation with [Nox](https://nox.thea.codes/)\n- Linting with [preccommit](https://pre-commit.com/) and\n  [Flake8](http://flake8.pycqa.org)\n- Continuous integration with [GitHub\n  Actions](https://github.com/features/actions) or\n  [Travis-CI](https://travis-ci.com)\n- Documentation with [Sphinx](http://www.sphinx-doc.org/) and [Read\n  the Docs](https://readthedocs.org/)\n- Automated uploads to [PyPI](https://pypi.org/) and\n  [TestPyPI](https://test.pypi.org/)\n- Automated release notes with [Release\n  Drafter](https://github.com/release-drafter/release-drafter)\n- Automated dependency updates with\n  [Dependabot](https://dependabot.com/)\n- Code formatting with [Black](https://github.com/psf/black) and\n  [Prettier](https://prettier.io/)\n- Testing with [pytest](https://docs.pytest.org/en/latest/)\n- Code coverage with [Coverageppy](https://coverage.readthedocs.io/)\n- Coverage reporting with [Codecov](https://codecov.io/)\n- Command-line interface with\n  [Click](https://click.palletsprojects.com/)\n- Static type-checking with [mypy](http://mypy-lang.org/)\n- Runtime type-checking with\n  [Typeguard](https://github.com/agronholm/typeguard)\n- Security audit with [Bandit](https://github.com/PyCQA/bandit) and\n  [Safety](https://github.com/pyupio/safety)\n- Check documentation examples with\n  [xdoctest](https://github.com/Erotemic/xdoctest)\n- Generate API documentation with\n  [autodoc](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html)\n  and\n  [napoleon](https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html)\n- Generate command-line reference with\n  [sphinxcclick](https://sphinx-click.readthedocs.io/)\n- Manage project labels with [GitHub\n  Labeler](https://github.com/marketplace/actions/github-labeler)\n- Manage project versions with\n  [Bump2version](https://github.com/c4urself/bump2version)\n- Automatic loading/unloading of [conda](https://www.anaconda.com)\n  environment with [direnv](https://direnv.net/)\n\n## Installation\n\nYou can install _Fluvial_Particle_ via pip from `PyPI_`:\n\n$ pip install fluvial-particle\n\n## Usage\n\nTODO\n\n## Contributing\n\nContributions are very welcome.\nTo learn more, see the `Contributor Guide_`\\.\n\n## License\n\nDistributed under the terms of the `CCO 1.0 license_`, Fluvial Particle is free and open source software.\n\n## Issues\n\nIf you encounter any problems,\nplease `file an issue_` along with a detailed description.\n\n## Credits\n\nThis project was generated from `@hillc-usgs_`'s `Pygeoapi Plugin Cookiecutter_` template.\n\n..\\_@hillc-usgs: <https://github.com/hillc-usgs>\n..\\_Cookiecutter: <https://github.com/audreyr/cookiecutter>\n..\\_CCO 1.0 license: <https://creativecommons.org/publicdomain/zero/1.0/legalcode>\n..\\_PyPI: <https://pypi.org/>\n..\\_Pygeoapi Plugin Cookiecutter: <https://code.usgs.gov/wma/nhgf/pygeoapi-plugin-cookiecutter>\n..\\_file an issue: <https://github.com/rmcd-mscb/fluvial-particle/issues>\n..\\_pip: <https://pip.pypa.io/>\n.. github-only\n..\\_Contributor Guide: CONTRIBUTING.rst\n..\\_Usage: <https://fluvial-particle.readthedocs.io/en/latest/usage.html>\n",
    'author': 'Richard McDonald',
    'author_email': 'rmcd@usgs.gov',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://code.usgs.gov/wma/nhgf/fluvparticle',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
