#!/bin/bash -x

# Change to the source directory
cd ${{SOURCE_DIR}}

# Perform SonarQube analysis
${{SONARQUBE_PATH}}/sonar-scanner ${{SONARQUBE_SCANNER_FLAGS}} -D sonar.sources=${{SOURCE_DIR}} -D sonar.inclusions=**/*.py -D sonar.host.url=${{SONARQUBE_SERVER}} -D sonar.projectKey=${{SONARQUBE_PROJECT}} -D sonar.login=${{SONARQUBE_TOKEN}} -D sonar.working.directory=${{TOOL_ANALYSIS_DIR}}

# Wait for results to be finalized
STATUS_URL=`tail -n 1 ${{TOOL_ANALYSIS_DIR}}/report-task.txt | cut -c11-`
ANALYSIS_SUCCESS=false
for i in {1..20}
do
    # Get the status
    STATUS=`curl -u ${{SONARQUBE_TOKEN}}: $STATUS_URL`

    # Check the contents
    if [[ "$STATUS" == *"\"status\":\"SUCCESS\""* ]]; then
       ANALYSIS_SUCCESS=true
       break
    else
       sleep 30
    fi
done

# Check if the analysis was successful
if ! $ANALYSIS_SUCCESS
then
    exit 1
fi

# Retrieve the results from the SonarQube server
RESULTS_FILE=${{TOOL_ANALYSIS_DIR}}/sonarqube_warnings.json
curl -u ${{SONARQUBE_TOKEN}}: "${{SONARQUBE_SERVER}}/api/projects/export_findings?project=${{SONARQUBE_PROJECT}}&${{SONARQUBE_CURL_FLAGS}}" -o $RESULTS_FILE

# Check the contents of the results file
if grep -q "\"project not found\":\[\]" $RESULTS_FILE; then
    exit 1
fi

# Parse the results
python3 -m scrub.tools.parsers.get_sonarqube_warnings $RESULTS_FILE ${{RAW_RESULTS_DIR}}/sonarqube_raw.scrub ${{SOURCE_DIR}}