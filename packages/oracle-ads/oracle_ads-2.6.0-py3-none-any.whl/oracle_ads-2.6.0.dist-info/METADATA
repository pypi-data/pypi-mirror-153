Metadata-Version: 2.1
Name: oracle-ads
Version: 2.6.0
Summary: Oracle Accelerated Data Science SDK
Home-page: https://docs.oracle.com/en-us/iaas/tools/ads-sdk/latest/index.html
Author: Oracle Data Science
License: Universal Permissive License 1.0
Project-URL: Github, https://github.com/oracle/accelerated-data-science
Project-URL: Documentation, https://docs.oracle.com/en-us/iaas/tools/ads-sdk/latest/index.html
Keywords: Oracle Cloud Infrastructure,OCI,Machine Learning,ML,Artificial Intelligence,AI,Data Science,Cloud,Oracle
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Universal Permissive License (UPL)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.7, <3.10
Description-Content-Type: text/markdown
Requires-Dist: asteval (>=0.9.25)
Requires-Dist: bokeh (>=2.3.0)
Requires-Dist: cerberus (>=1.3.4)
Requires-Dist: cloudpickle (>=1.6.0)
Requires-Dist: datefinder (>=0.7.1)
Requires-Dist: folium (>=0.12.1)
Requires-Dist: fsspec (>=0.8.7)
Requires-Dist: geopandas (>=0.9.0)
Requires-Dist: gitpython (>=3.1.2)
Requires-Dist: graphviz (<0.17)
Requires-Dist: htmllistparse (>=0.6.0)
Requires-Dist: ipython (<8.0,>=7.23.1)
Requires-Dist: jinja2 (>=2.11.2)
Requires-Dist: jsonschema (<4.0)
Requires-Dist: matplotlib (>=3.1.3)
Requires-Dist: numexpr (>=2.7.3)
Requires-Dist: numpy (>=1.19.2)
Requires-Dist: oci (>=2.59.0)
Requires-Dist: ocifs (>=0.1.5)
Requires-Dist: onnx (~=1.10.2)
Requires-Dist: onnxmltools (>=1.10.0)
Requires-Dist: onnxruntime (>=1.10.0)
Requires-Dist: skl2onnx (>=1.10.4)
Requires-Dist: optuna (==2.9.0)
Requires-Dist: pandas (<1.4,>1.2.1)
Requires-Dist: py-cpuinfo (>=7.0.0)
Requires-Dist: python-jsonschema-objects (>=0.3.13)
Requires-Dist: scikit-learn (>=0.23.2)
Requires-Dist: scipy (>=1.5.4)
Requires-Dist: seaborn (>=0.11.0)
Requires-Dist: six (>=1.14.0)
Requires-Dist: sqlalchemy (>=1.4.1)
Requires-Dist: tabulate (>=0.8.9)
Requires-Dist: tqdm (>=4.59.0)
Requires-Dist: psutil (>=5.7.2)
Provides-Extra: all-optional
Requires-Dist: ipywidgets (~=7.6.3) ; extra == 'all-optional'
Requires-Dist: wordcloud (>=1.8.1) ; extra == 'all-optional'
Requires-Dist: torch ; extra == 'all-optional'
Requires-Dist: tensorflow ; extra == 'all-optional'
Requires-Dist: tf2onnx ; extra == 'all-optional'
Requires-Dist: onnx (~=1.10.2) ; extra == 'all-optional'
Requires-Dist: onnxruntime (>=1.10.0) ; extra == 'all-optional'
Requires-Dist: onnxmltools (>=1.10.0) ; extra == 'all-optional'
Requires-Dist: skl2onnx (>=1.10.4) ; extra == 'all-optional'
Requires-Dist: fastavro (>=0.24.2) ; extra == 'all-optional'
Requires-Dist: openpyxl (>=3.0.7) ; extra == 'all-optional'
Requires-Dist: pandavro (>=1.6.0) ; extra == 'all-optional'
Requires-Dist: cx-Oracle (>=8.0) ; extra == 'all-optional'
Requires-Dist: mysql-connector-python ; extra == 'all-optional'
Requires-Dist: ibis-framework[impala] ; extra == 'all-optional'
Requires-Dist: hdfs[kerberos] ; extra == 'all-optional'
Requires-Dist: sqlalchemy ; extra == 'all-optional'
Requires-Dist: conda-pack ; extra == 'all-optional'
Requires-Dist: docker ; extra == 'all-optional'
Requires-Dist: lightgbm ; extra == 'all-optional'
Requires-Dist: nbconvert ; extra == 'all-optional'
Requires-Dist: nbformat ; extra == 'all-optional'
Requires-Dist: oci-cli ; extra == 'all-optional'
Requires-Dist: xgboost ; extra == 'all-optional'
Provides-Extra: bds
Requires-Dist: ibis-framework[impala] ; extra == 'bds'
Requires-Dist: hdfs[kerberos] ; extra == 'bds'
Requires-Dist: sqlalchemy ; extra == 'bds'
Provides-Extra: boosted
Requires-Dist: xgboost ; extra == 'boosted'
Requires-Dist: lightgbm ; extra == 'boosted'
Provides-Extra: complete
Requires-Dist: conda-pack ; extra == 'complete'
Requires-Dist: cx-Oracle (>=8.0) ; extra == 'complete'
Requires-Dist: docker ; extra == 'complete'
Requires-Dist: fastavro (>=0.24.2) ; extra == 'complete'
Requires-Dist: hdfs[kerberos] ; extra == 'complete'
Requires-Dist: ibis-framework[impala] ; extra == 'complete'
Requires-Dist: ipywidgets (~=7.6.3) ; extra == 'complete'
Requires-Dist: lightgbm ; extra == 'complete'
Requires-Dist: mysql-connector-python ; extra == 'complete'
Requires-Dist: nbconvert ; extra == 'complete'
Requires-Dist: nbformat ; extra == 'complete'
Requires-Dist: oci-cli ; extra == 'complete'
Requires-Dist: onnxmltools (>=1.10.0) ; extra == 'complete'
Requires-Dist: onnxruntime (>=1.10.0) ; extra == 'complete'
Requires-Dist: onnx (~=1.10.2) ; extra == 'complete'
Requires-Dist: openpyxl (>=3.0.7) ; extra == 'complete'
Requires-Dist: pandavro (>=1.6.0) ; extra == 'complete'
Requires-Dist: skl2onnx (>=1.10.4) ; extra == 'complete'
Requires-Dist: sqlalchemy ; extra == 'complete'
Requires-Dist: tensorflow ; extra == 'complete'
Requires-Dist: tf2onnx ; extra == 'complete'
Requires-Dist: torch ; extra == 'complete'
Requires-Dist: wordcloud (>=1.8.1) ; extra == 'complete'
Requires-Dist: xgboost ; extra == 'complete'
Provides-Extra: data
Requires-Dist: fastavro (>=0.24.2) ; extra == 'data'
Requires-Dist: openpyxl (>=3.0.7) ; extra == 'data'
Requires-Dist: pandavro (>=1.6.0) ; extra == 'data'
Requires-Dist: cx-Oracle (>=8.0) ; extra == 'data'
Provides-Extra: data_science
Requires-Dist: torch ; extra == 'data_science'
Requires-Dist: tensorflow ; extra == 'data_science'
Requires-Dist: tf2onnx ; extra == 'data_science'
Requires-Dist: onnx (~=1.10.2) ; extra == 'data_science'
Requires-Dist: onnxruntime (>=1.10.0) ; extra == 'data_science'
Requires-Dist: onnxmltools (>=1.10.0) ; extra == 'data_science'
Requires-Dist: skl2onnx (>=1.10.4) ; extra == 'data_science'
Provides-Extra: mysql
Requires-Dist: mysql-connector-python ; extra == 'mysql'
Provides-Extra: notebook
Requires-Dist: ipywidgets (~=7.6.3) ; extra == 'notebook'
Provides-Extra: opctl
Requires-Dist: oci-cli ; extra == 'opctl'
Requires-Dist: docker ; extra == 'opctl'
Requires-Dist: conda-pack ; extra == 'opctl'
Requires-Dist: nbconvert ; extra == 'opctl'
Requires-Dist: nbformat ; extra == 'opctl'
Provides-Extra: text
Requires-Dist: wordcloud (>=1.8.1) ; extra == 'text'

# Oracle Accelerated Data Science SDK (ADS)

[![PyPI](https://img.shields.io/pypi/v/oracle-ads.svg)](https://pypi.org/project/oracle-ads/)

The [Oracle Accelerated Data Science (ADS) SDK](https://docs.oracle.com/en-us/iaas/tools/ads-sdk/latest/index.html) is maintained by the [Oracle Cloud Infrastructure Data Science service](https://docs.oracle.com/en-us/iaas/data-science/using/data-science.htm) team. It speeds up common data science activities by providing tools that automate and/or simplify common data science tasks, along with providing a data scientist friendly pythonic interface to Oracle Cloud Infrastructure (OCI) services, most notably OCI Data Science, Data Flow, Object storage, and the Autonomous Database. ADS gives you an interface to manage the lifecycle of machine learning models, from data acquisition to model evaluation, interpretation, and model deployment.  

With ADS you can:

 - Read datasets from Oracle Object Storage, Oracle RDBMS (ATP/ADW/On-prem), AWS S3 and other sources into `Pandas dataframes`.
 - Easily compute summary statistics on your dataframes and perform data profiling. 
 - Tune models using hyperparameter optimization with the `ADSTuner` tool. 
 - Generate detailed evaluation reports of your model candidates with the `ADSEvaluator` module. 
 - Save machine learning models to the [OCI Data Science Model Catalog](https://docs.oracle.com/en-us/iaas/data-science/using/models-about.htm).
 - Deploy those models as HTTP endpoints with [Model Deployment](https://docs.oracle.com/en-us/iaas/data-science/using/model-dep-about.htm).
 - Launch distributed ETL, data processing, and model training jobs in Spark with [OCI Data Flow](https://docs.oracle.com/en-us/iaas/data-flow/using/home.htm).
 - Train machine learning models in OCI Data Science [Jobs](https://docs.oracle.com/en-us/iaas/data-science/using/jobs-about.htm). 
 - Manage the lifecycle of conda environments through the `ads conda` command line interface (CLI). 

## Installation

You have various options when installing ADS.

### Installing the oracle-ads base package

```bash
  $ python3 -m pip install oracle-ads
```

### Installing extras libraries

To use ADS within a [Notebook Session](https://docs.oracle.com/en-us/iaas/data-science/using/manage-notebook-sessions.htm) of the OCI Data Science service: 

```bash
  $ python3 -m pip install oracle-ads[notebook]
```

For machine learning tasks install

```bash
  $ python3 -m pip install oracle-ads[boosted]
```

To work on text related tasks run

```bash
  $ python3 -m pip install oracle-ads[text]
```

For access to a broad set of data formats (for example, Excel, Avro, etc.) run

```bash
  $ python3 -m pip install oracle-ads[data]
```

**Note**

Multiple extra dependencies can be installed together. For example:

```bash
  $ python3 -m pip install  oracle-ads[notebook,boosted,text]
```

## Documentation

  - [Oracle Accelerated Data Science SDK (ADS) Documentation](https://docs.oracle.com/en-us/iaas/tools/ads-sdk/latest/index.html)
  - [Oracle Cloud Infrastructure Data Science and AI services Examples](https://github.com/oracle/oci-data-science-ai-samples)
  - [Oracle AI & Data Science Blog](https://blogs.oracle.com/ai-and-datascience/)
  - [Oracle Cloud Infrastructure Documentation](https://docs.oracle.com/en-us/iaas/data-science/using/data-science.htm)

## Examples

### Load data from Object Storage

```python
  import ads
  from ads.common.auth import default_signer
  import oci

  ads.set_auth(auth="api_key", oci_config_location=oci.config.DEFAULT_LOCATION, profile="DEFAULT")
  bucket_name = <bucket-name>
  file_name = <file-name>
  namespace = <namespace>
  df = pd.read_csv(f"oci://{bucket_name}@{namespace}/{file_name}", storage_options=default_signer())
```

### Load data from ADB (simple)

```python
  connection_parameters = {
      "user_name": "<username>",
      "password": "<password>",
      "service_name": "<service_name_{high|med|low}>",
      "wallet_location": "/full/path/to/my_wallet.zip",
  }
  import pandas as pd
  import ads

  # simple read of a SQL query into a dataframe with no bind variables
  df = pd.DataFrame.ads.read_sql(
      "SELECT * FROM SH.SALES",
      connection_parameters=connection_parameters,
  )
```

### Load data from ADB (using sql-injection-safe bind variables)

```python
  df = pd.DataFrame.ads.read_sql(
      """
      SELECT
      *
      FROM
      SH.SALES
      WHERE
          ROWNUM <= :max_rows
      """,
      bind_variables={
          max_rows : 100
      },
      connection_parameters=connection_parameters,
  )
```

## Contributing

This project welcomes contributions from the community. Before submitting a pull request, please review our contribution guide [CONTRIBUTING.md](https://github.com/oracle/accelerated-data-science/blob/main/CONTRIBUTING.md).

Find Getting Started instructions for developers in [README-development.md](https://github.com/oracle/accelerated-data-science/blob/main/README-development.md)

## Security

Please consult the security guide [SECURITY.md](https://github.com/oracle/accelerated-data-science/blob/main/SECURITY.md) for our responsible security vulnerability disclosure process.

## License

Copyright (c) 2020, 2022 Oracle and/or its affiliates. Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/

