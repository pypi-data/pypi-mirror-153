# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NoteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'coordinates': 'GeoJsonPointReq',
        'description': 'str',
        'properties': 'object',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'coordinates': 'coordinates',
        'description': 'description',
        'properties': 'properties',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, boundary_id=None, coordinates=None, description=None, properties=None, status=None, title=None, _configuration=None):  # noqa: E501
        """NoteRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boundary_id = None
        self._coordinates = None
        self._description = None
        self._properties = None
        self._status = None
        self._title = None
        self.discriminator = None

        if boundary_id is not None:
            self.boundary_id = boundary_id
        if coordinates is not None:
            self.coordinates = coordinates
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title

    @property
    def boundary_id(self):
        """Gets the boundary_id of this NoteRequest.  # noqa: E501


        :return: The boundary_id of this NoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this NoteRequest.


        :param boundary_id: The boundary_id of this NoteRequest.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def coordinates(self):
        """Gets the coordinates of this NoteRequest.  # noqa: E501


        :return: The coordinates of this NoteRequest.  # noqa: E501
        :rtype: GeoJsonPointReq
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this NoteRequest.


        :param coordinates: The coordinates of this NoteRequest.  # noqa: E501
        :type: GeoJsonPointReq
        """

        self._coordinates = coordinates

    @property
    def description(self):
        """Gets the description of this NoteRequest.  # noqa: E501


        :return: The description of this NoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NoteRequest.


        :param description: The description of this NoteRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this NoteRequest.  # noqa: E501


        :return: The properties of this NoteRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NoteRequest.


        :param properties: The properties of this NoteRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this NoteRequest.  # noqa: E501


        :return: The status of this NoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NoteRequest.


        :param status: The status of this NoteRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this NoteRequest.  # noqa: E501


        :return: The title of this NoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NoteRequest.


        :param title: The title of this NoteRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NoteRequest):
            return True

        return self.to_dict() != other.to_dict()
