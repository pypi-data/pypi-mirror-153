# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CompanyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'allocated_area': 'float',
        'company_id': 'str',
        'company_name': 'str',
        'company_version': 'int',
        'country_code': 'str',
        'description': 'str',
        'district': 'str',
        'email': 'str',
        'end_date_time': 'datetime',
        'historical': 'bool',
        'logo': 'str',
        'phone': 'str',
        'properties': 'object',
        'remaining_area': 'float',
        'start_date_time': 'datetime',
        'state': 'str',
        'status': 'str',
        'subscriptions': 'Subscriptions',
        'website': 'str'
    }

    attribute_map = {
        'address': 'address',
        'allocated_area': 'allocatedArea',
        'company_id': 'companyId',
        'company_name': 'companyName',
        'company_version': 'companyVersion',
        'country_code': 'countryCode',
        'description': 'description',
        'district': 'district',
        'email': 'email',
        'end_date_time': 'endDateTime',
        'historical': 'historical',
        'logo': 'logo',
        'phone': 'phone',
        'properties': 'properties',
        'remaining_area': 'remainingArea',
        'start_date_time': 'startDateTime',
        'state': 'state',
        'status': 'status',
        'subscriptions': 'subscriptions',
        'website': 'website'
    }

    def __init__(self, address=None, allocated_area=None, company_id=None, company_name=None, company_version=None, country_code=None, description=None, district=None, email=None, end_date_time=None, historical=None, logo=None, phone=None, properties=None, remaining_area=None, start_date_time=None, state=None, status=None, subscriptions=None, website=None, _configuration=None):  # noqa: E501
        """CompanyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._allocated_area = None
        self._company_id = None
        self._company_name = None
        self._company_version = None
        self._country_code = None
        self._description = None
        self._district = None
        self._email = None
        self._end_date_time = None
        self._historical = None
        self._logo = None
        self._phone = None
        self._properties = None
        self._remaining_area = None
        self._start_date_time = None
        self._state = None
        self._status = None
        self._subscriptions = None
        self._website = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if allocated_area is not None:
            self.allocated_area = allocated_area
        if company_id is not None:
            self.company_id = company_id
        if company_name is not None:
            self.company_name = company_name
        if company_version is not None:
            self.company_version = company_version
        if country_code is not None:
            self.country_code = country_code
        if description is not None:
            self.description = description
        if district is not None:
            self.district = district
        if email is not None:
            self.email = email
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if historical is not None:
            self.historical = historical
        if logo is not None:
            self.logo = logo
        if phone is not None:
            self.phone = phone
        if properties is not None:
            self.properties = properties
        if remaining_area is not None:
            self.remaining_area = remaining_area
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if website is not None:
            self.website = website

    @property
    def address(self):
        """Gets the address of this CompanyRequest.  # noqa: E501


        :return: The address of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CompanyRequest.


        :param address: The address of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def allocated_area(self):
        """Gets the allocated_area of this CompanyRequest.  # noqa: E501


        :return: The allocated_area of this CompanyRequest.  # noqa: E501
        :rtype: float
        """
        return self._allocated_area

    @allocated_area.setter
    def allocated_area(self, allocated_area):
        """Sets the allocated_area of this CompanyRequest.


        :param allocated_area: The allocated_area of this CompanyRequest.  # noqa: E501
        :type: float
        """

        self._allocated_area = allocated_area

    @property
    def company_id(self):
        """Gets the company_id of this CompanyRequest.  # noqa: E501


        :return: The company_id of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyRequest.


        :param company_id: The company_id of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def company_name(self):
        """Gets the company_name of this CompanyRequest.  # noqa: E501


        :return: The company_name of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyRequest.


        :param company_name: The company_name of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_version(self):
        """Gets the company_version of this CompanyRequest.  # noqa: E501


        :return: The company_version of this CompanyRequest.  # noqa: E501
        :rtype: int
        """
        return self._company_version

    @company_version.setter
    def company_version(self, company_version):
        """Sets the company_version of this CompanyRequest.


        :param company_version: The company_version of this CompanyRequest.  # noqa: E501
        :type: int
        """

        self._company_version = company_version

    @property
    def country_code(self):
        """Gets the country_code of this CompanyRequest.  # noqa: E501


        :return: The country_code of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CompanyRequest.


        :param country_code: The country_code of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this CompanyRequest.  # noqa: E501


        :return: The description of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanyRequest.


        :param description: The description of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def district(self):
        """Gets the district of this CompanyRequest.  # noqa: E501


        :return: The district of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CompanyRequest.


        :param district: The district of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def email(self):
        """Gets the email of this CompanyRequest.  # noqa: E501


        :return: The email of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CompanyRequest.


        :param email: The email of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def end_date_time(self):
        """Gets the end_date_time of this CompanyRequest.  # noqa: E501


        :return: The end_date_time of this CompanyRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this CompanyRequest.


        :param end_date_time: The end_date_time of this CompanyRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def historical(self):
        """Gets the historical of this CompanyRequest.  # noqa: E501


        :return: The historical of this CompanyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._historical

    @historical.setter
    def historical(self, historical):
        """Sets the historical of this CompanyRequest.


        :param historical: The historical of this CompanyRequest.  # noqa: E501
        :type: bool
        """

        self._historical = historical

    @property
    def logo(self):
        """Gets the logo of this CompanyRequest.  # noqa: E501


        :return: The logo of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CompanyRequest.


        :param logo: The logo of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def phone(self):
        """Gets the phone of this CompanyRequest.  # noqa: E501


        :return: The phone of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CompanyRequest.


        :param phone: The phone of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def properties(self):
        """Gets the properties of this CompanyRequest.  # noqa: E501


        :return: The properties of this CompanyRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CompanyRequest.


        :param properties: The properties of this CompanyRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def remaining_area(self):
        """Gets the remaining_area of this CompanyRequest.  # noqa: E501


        :return: The remaining_area of this CompanyRequest.  # noqa: E501
        :rtype: float
        """
        return self._remaining_area

    @remaining_area.setter
    def remaining_area(self, remaining_area):
        """Sets the remaining_area of this CompanyRequest.


        :param remaining_area: The remaining_area of this CompanyRequest.  # noqa: E501
        :type: float
        """

        self._remaining_area = remaining_area

    @property
    def start_date_time(self):
        """Gets the start_date_time of this CompanyRequest.  # noqa: E501


        :return: The start_date_time of this CompanyRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this CompanyRequest.


        :param start_date_time: The start_date_time of this CompanyRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def state(self):
        """Gets the state of this CompanyRequest.  # noqa: E501


        :return: The state of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CompanyRequest.


        :param state: The state of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this CompanyRequest.  # noqa: E501


        :return: The status of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CompanyRequest.


        :param status: The status of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscriptions(self):
        """Gets the subscriptions of this CompanyRequest.  # noqa: E501


        :return: The subscriptions of this CompanyRequest.  # noqa: E501
        :rtype: Subscriptions
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this CompanyRequest.


        :param subscriptions: The subscriptions of this CompanyRequest.  # noqa: E501
        :type: Subscriptions
        """

        self._subscriptions = subscriptions

    @property
    def website(self):
        """Gets the website of this CompanyRequest.  # noqa: E501


        :return: The website of this CompanyRequest.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CompanyRequest.


        :param website: The website of this CompanyRequest.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyRequest):
            return True

        return self.to_dict() != other.to_dict()
