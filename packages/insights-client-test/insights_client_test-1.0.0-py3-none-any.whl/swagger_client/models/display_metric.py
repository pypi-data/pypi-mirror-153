# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DisplayMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chart_type': 'str',
        'display_name': 'str',
        'metric': 'str',
        'params': 'str',
        'title': 'str',
        'type': 'str',
        'xaxis_data': 'str',
        'yaxis_data': 'str'
    }

    attribute_map = {
        'chart_type': 'chartType',
        'display_name': 'displayName',
        'metric': 'metric',
        'params': 'params',
        'title': 'title',
        'type': 'type',
        'xaxis_data': 'xaxisData',
        'yaxis_data': 'yaxisData'
    }

    def __init__(self, chart_type=None, display_name=None, metric=None, params=None, title=None, type=None, xaxis_data=None, yaxis_data=None, _configuration=None):  # noqa: E501
        """DisplayMetric - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chart_type = None
        self._display_name = None
        self._metric = None
        self._params = None
        self._title = None
        self._type = None
        self._xaxis_data = None
        self._yaxis_data = None
        self.discriminator = None

        if chart_type is not None:
            self.chart_type = chart_type
        if display_name is not None:
            self.display_name = display_name
        if metric is not None:
            self.metric = metric
        if params is not None:
            self.params = params
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if xaxis_data is not None:
            self.xaxis_data = xaxis_data
        if yaxis_data is not None:
            self.yaxis_data = yaxis_data

    @property
    def chart_type(self):
        """Gets the chart_type of this DisplayMetric.  # noqa: E501


        :return: The chart_type of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this DisplayMetric.


        :param chart_type: The chart_type of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._chart_type = chart_type

    @property
    def display_name(self):
        """Gets the display_name of this DisplayMetric.  # noqa: E501


        :return: The display_name of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DisplayMetric.


        :param display_name: The display_name of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def metric(self):
        """Gets the metric of this DisplayMetric.  # noqa: E501


        :return: The metric of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this DisplayMetric.


        :param metric: The metric of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def params(self):
        """Gets the params of this DisplayMetric.  # noqa: E501


        :return: The params of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this DisplayMetric.


        :param params: The params of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def title(self):
        """Gets the title of this DisplayMetric.  # noqa: E501


        :return: The title of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DisplayMetric.


        :param title: The title of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this DisplayMetric.  # noqa: E501


        :return: The type of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisplayMetric.


        :param type: The type of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def xaxis_data(self):
        """Gets the xaxis_data of this DisplayMetric.  # noqa: E501


        :return: The xaxis_data of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._xaxis_data

    @xaxis_data.setter
    def xaxis_data(self, xaxis_data):
        """Sets the xaxis_data of this DisplayMetric.


        :param xaxis_data: The xaxis_data of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._xaxis_data = xaxis_data

    @property
    def yaxis_data(self):
        """Gets the yaxis_data of this DisplayMetric.  # noqa: E501


        :return: The yaxis_data of this DisplayMetric.  # noqa: E501
        :rtype: str
        """
        return self._yaxis_data

    @yaxis_data.setter
    def yaxis_data(self, yaxis_data):
        """Sets the yaxis_data of this DisplayMetric.


        :param yaxis_data: The yaxis_data of this DisplayMetric.  # noqa: E501
        :type: str
        """

        self._yaxis_data = yaxis_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisplayMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisplayMetric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DisplayMetric):
            return True

        return self.to_dict() != other.to_dict()
