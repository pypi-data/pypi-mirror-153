# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HarvestProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area': 'Measure',
        'avg_moisture': 'Measure',
        'avg_wet_mass': 'Measure',
        'avg_yeild': 'Measure',
        'product_name': 'str',
        'total_wet_mass': 'Measure',
        'total_yeild': 'Measure'
    }

    attribute_map = {
        'area': 'area',
        'avg_moisture': 'avgMoisture',
        'avg_wet_mass': 'avgWetMass',
        'avg_yeild': 'avgYeild',
        'product_name': 'productName',
        'total_wet_mass': 'totalWetMass',
        'total_yeild': 'totalYeild'
    }

    def __init__(self, area=None, avg_moisture=None, avg_wet_mass=None, avg_yeild=None, product_name=None, total_wet_mass=None, total_yeild=None, _configuration=None):  # noqa: E501
        """HarvestProductDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._area = None
        self._avg_moisture = None
        self._avg_wet_mass = None
        self._avg_yeild = None
        self._product_name = None
        self._total_wet_mass = None
        self._total_yeild = None
        self.discriminator = None

        if area is not None:
            self.area = area
        if avg_moisture is not None:
            self.avg_moisture = avg_moisture
        if avg_wet_mass is not None:
            self.avg_wet_mass = avg_wet_mass
        if avg_yeild is not None:
            self.avg_yeild = avg_yeild
        if product_name is not None:
            self.product_name = product_name
        if total_wet_mass is not None:
            self.total_wet_mass = total_wet_mass
        if total_yeild is not None:
            self.total_yeild = total_yeild

    @property
    def area(self):
        """Gets the area of this HarvestProductDetails.  # noqa: E501


        :return: The area of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this HarvestProductDetails.


        :param area: The area of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._area = area

    @property
    def avg_moisture(self):
        """Gets the avg_moisture of this HarvestProductDetails.  # noqa: E501


        :return: The avg_moisture of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._avg_moisture

    @avg_moisture.setter
    def avg_moisture(self, avg_moisture):
        """Sets the avg_moisture of this HarvestProductDetails.


        :param avg_moisture: The avg_moisture of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._avg_moisture = avg_moisture

    @property
    def avg_wet_mass(self):
        """Gets the avg_wet_mass of this HarvestProductDetails.  # noqa: E501


        :return: The avg_wet_mass of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._avg_wet_mass

    @avg_wet_mass.setter
    def avg_wet_mass(self, avg_wet_mass):
        """Sets the avg_wet_mass of this HarvestProductDetails.


        :param avg_wet_mass: The avg_wet_mass of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._avg_wet_mass = avg_wet_mass

    @property
    def avg_yeild(self):
        """Gets the avg_yeild of this HarvestProductDetails.  # noqa: E501


        :return: The avg_yeild of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._avg_yeild

    @avg_yeild.setter
    def avg_yeild(self, avg_yeild):
        """Sets the avg_yeild of this HarvestProductDetails.


        :param avg_yeild: The avg_yeild of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._avg_yeild = avg_yeild

    @property
    def product_name(self):
        """Gets the product_name of this HarvestProductDetails.  # noqa: E501


        :return: The product_name of this HarvestProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this HarvestProductDetails.


        :param product_name: The product_name of this HarvestProductDetails.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def total_wet_mass(self):
        """Gets the total_wet_mass of this HarvestProductDetails.  # noqa: E501


        :return: The total_wet_mass of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._total_wet_mass

    @total_wet_mass.setter
    def total_wet_mass(self, total_wet_mass):
        """Sets the total_wet_mass of this HarvestProductDetails.


        :param total_wet_mass: The total_wet_mass of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._total_wet_mass = total_wet_mass

    @property
    def total_yeild(self):
        """Gets the total_yeild of this HarvestProductDetails.  # noqa: E501


        :return: The total_yeild of this HarvestProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._total_yeild

    @total_yeild.setter
    def total_yeild(self, total_yeild):
        """Sets the total_yeild of this HarvestProductDetails.


        :param total_yeild: The total_yeild of this HarvestProductDetails.  # noqa: E501
        :type: Measure
        """

        self._total_yeild = total_yeild

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvestProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvestProductDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvestProductDetails):
            return True

        return self.to_dict() != other.to_dict()
