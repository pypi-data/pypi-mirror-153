# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MetricsMasterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'created_date_time': 'datetime',
        'id': 'str',
        'metrics': 'list[DisplayMetric]',
        'modified_date_time': 'datetime',
        'product': 'str',
        'properties': 'object',
        'status': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'created_date_time': 'createdDateTime',
        'id': 'id',
        'metrics': 'metrics',
        'modified_date_time': 'modifiedDateTime',
        'product': 'product',
        'properties': 'properties',
        'status': 'status'
    }

    def __init__(self, company_id=None, created_date_time=None, id=None, metrics=None, modified_date_time=None, product=None, properties=None, status=None, _configuration=None):  # noqa: E501
        """MetricsMasterResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company_id = None
        self._created_date_time = None
        self._id = None
        self._metrics = None
        self._modified_date_time = None
        self._product = None
        self._properties = None
        self._status = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if id is not None:
            self.id = id
        if metrics is not None:
            self.metrics = metrics
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if product is not None:
            self.product = product
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status

    @property
    def company_id(self):
        """Gets the company_id of this MetricsMasterResponse.  # noqa: E501


        :return: The company_id of this MetricsMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this MetricsMasterResponse.


        :param company_id: The company_id of this MetricsMasterResponse.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def created_date_time(self):
        """Gets the created_date_time of this MetricsMasterResponse.  # noqa: E501


        :return: The created_date_time of this MetricsMasterResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this MetricsMasterResponse.


        :param created_date_time: The created_date_time of this MetricsMasterResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def id(self):
        """Gets the id of this MetricsMasterResponse.  # noqa: E501


        :return: The id of this MetricsMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsMasterResponse.


        :param id: The id of this MetricsMasterResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metrics(self):
        """Gets the metrics of this MetricsMasterResponse.  # noqa: E501


        :return: The metrics of this MetricsMasterResponse.  # noqa: E501
        :rtype: list[DisplayMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this MetricsMasterResponse.


        :param metrics: The metrics of this MetricsMasterResponse.  # noqa: E501
        :type: list[DisplayMetric]
        """

        self._metrics = metrics

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this MetricsMasterResponse.  # noqa: E501


        :return: The modified_date_time of this MetricsMasterResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this MetricsMasterResponse.


        :param modified_date_time: The modified_date_time of this MetricsMasterResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def product(self):
        """Gets the product of this MetricsMasterResponse.  # noqa: E501


        :return: The product of this MetricsMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this MetricsMasterResponse.


        :param product: The product of this MetricsMasterResponse.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def properties(self):
        """Gets the properties of this MetricsMasterResponse.  # noqa: E501


        :return: The properties of this MetricsMasterResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MetricsMasterResponse.


        :param properties: The properties of this MetricsMasterResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this MetricsMasterResponse.  # noqa: E501


        :return: The status of this MetricsMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MetricsMasterResponse.


        :param status: The status of this MetricsMasterResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsMasterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsMasterResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsMasterResponse):
            return True

        return self.to_dict() != other.to_dict()
