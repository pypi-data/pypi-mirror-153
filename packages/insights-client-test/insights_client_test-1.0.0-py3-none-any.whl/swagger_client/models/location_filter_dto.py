# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LocationFilterDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_level': 'str',
        'boundary_ids': 'list[str]'
    }

    attribute_map = {
        'admin_level': 'adminLevel',
        'boundary_ids': 'boundaryIds'
    }

    def __init__(self, admin_level=None, boundary_ids=None, _configuration=None):  # noqa: E501
        """LocationFilterDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin_level = None
        self._boundary_ids = None
        self.discriminator = None

        if admin_level is not None:
            self.admin_level = admin_level
        if boundary_ids is not None:
            self.boundary_ids = boundary_ids

    @property
    def admin_level(self):
        """Gets the admin_level of this LocationFilterDTO.  # noqa: E501


        :return: The admin_level of this LocationFilterDTO.  # noqa: E501
        :rtype: str
        """
        return self._admin_level

    @admin_level.setter
    def admin_level(self, admin_level):
        """Sets the admin_level of this LocationFilterDTO.


        :param admin_level: The admin_level of this LocationFilterDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEVEL_1", "LEVEL_2", "LEVEL_3", "LEVEL_4", "LEVEL_5", "LEVEL_6", "LEVEL_7"]  # noqa: E501
        if (self._configuration.client_side_validation and
                admin_level not in allowed_values):
            raise ValueError(
                "Invalid value for `admin_level` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_level, allowed_values)
            )

        self._admin_level = admin_level

    @property
    def boundary_ids(self):
        """Gets the boundary_ids of this LocationFilterDTO.  # noqa: E501


        :return: The boundary_ids of this LocationFilterDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._boundary_ids

    @boundary_ids.setter
    def boundary_ids(self, boundary_ids):
        """Sets the boundary_ids of this LocationFilterDTO.


        :param boundary_ids: The boundary_ids of this LocationFilterDTO.  # noqa: E501
        :type: list[str]
        """

        self._boundary_ids = boundary_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationFilterDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationFilterDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationFilterDTO):
            return True

        return self.to_dict() != other.to_dict()
