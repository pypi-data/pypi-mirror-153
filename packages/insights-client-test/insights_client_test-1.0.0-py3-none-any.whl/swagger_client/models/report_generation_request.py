# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportGenerationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date_time': 'datetime',
        'external_id_list': 'list[str]',
        'location_filter_list': 'list[LocationFilterDTO]',
        'ref_no': 'str',
        'ref_no_list': 'list[str]',
        'report_type': 'str'
    }

    attribute_map = {
        'end_date_time': 'endDateTime',
        'external_id_list': 'externalIdList',
        'location_filter_list': 'locationFilterList',
        'ref_no': 'refNo',
        'ref_no_list': 'refNoList',
        'report_type': 'reportType'
    }

    def __init__(self, end_date_time=None, external_id_list=None, location_filter_list=None, ref_no=None, ref_no_list=None, report_type=None, _configuration=None):  # noqa: E501
        """ReportGenerationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_date_time = None
        self._external_id_list = None
        self._location_filter_list = None
        self._ref_no = None
        self._ref_no_list = None
        self._report_type = None
        self.discriminator = None

        if end_date_time is not None:
            self.end_date_time = end_date_time
        if external_id_list is not None:
            self.external_id_list = external_id_list
        if location_filter_list is not None:
            self.location_filter_list = location_filter_list
        if ref_no is not None:
            self.ref_no = ref_no
        if ref_no_list is not None:
            self.ref_no_list = ref_no_list
        if report_type is not None:
            self.report_type = report_type

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ReportGenerationRequest.  # noqa: E501


        :return: The end_date_time of this ReportGenerationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ReportGenerationRequest.


        :param end_date_time: The end_date_time of this ReportGenerationRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def external_id_list(self):
        """Gets the external_id_list of this ReportGenerationRequest.  # noqa: E501


        :return: The external_id_list of this ReportGenerationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_id_list

    @external_id_list.setter
    def external_id_list(self, external_id_list):
        """Sets the external_id_list of this ReportGenerationRequest.


        :param external_id_list: The external_id_list of this ReportGenerationRequest.  # noqa: E501
        :type: list[str]
        """

        self._external_id_list = external_id_list

    @property
    def location_filter_list(self):
        """Gets the location_filter_list of this ReportGenerationRequest.  # noqa: E501


        :return: The location_filter_list of this ReportGenerationRequest.  # noqa: E501
        :rtype: list[LocationFilterDTO]
        """
        return self._location_filter_list

    @location_filter_list.setter
    def location_filter_list(self, location_filter_list):
        """Sets the location_filter_list of this ReportGenerationRequest.


        :param location_filter_list: The location_filter_list of this ReportGenerationRequest.  # noqa: E501
        :type: list[LocationFilterDTO]
        """

        self._location_filter_list = location_filter_list

    @property
    def ref_no(self):
        """Gets the ref_no of this ReportGenerationRequest.  # noqa: E501


        :return: The ref_no of this ReportGenerationRequest.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this ReportGenerationRequest.


        :param ref_no: The ref_no of this ReportGenerationRequest.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def ref_no_list(self):
        """Gets the ref_no_list of this ReportGenerationRequest.  # noqa: E501


        :return: The ref_no_list of this ReportGenerationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ref_no_list

    @ref_no_list.setter
    def ref_no_list(self, ref_no_list):
        """Sets the ref_no_list of this ReportGenerationRequest.


        :param ref_no_list: The ref_no_list of this ReportGenerationRequest.  # noqa: E501
        :type: list[str]
        """

        self._ref_no_list = ref_no_list

    @property
    def report_type(self):
        """Gets the report_type of this ReportGenerationRequest.  # noqa: E501


        :return: The report_type of this ReportGenerationRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportGenerationRequest.


        :param report_type: The report_type of this ReportGenerationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AGRIWORTHINESS", "BULK_SEASONAL", "MONITORING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                report_type not in allowed_values):
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportGenerationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportGenerationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportGenerationRequest):
            return True

        return self.to_dict() != other.to_dict()
