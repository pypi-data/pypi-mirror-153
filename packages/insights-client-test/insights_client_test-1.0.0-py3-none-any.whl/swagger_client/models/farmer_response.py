# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FarmerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'created_date_time': 'datetime',
        'description': 'str',
        'farmer_id': 'str',
        'fields_info': 'dict(str, FieldInfo)',
        'id': 'str',
        'last_used_time': 'datetime',
        'modified_date_time': 'datetime',
        'name': 'str',
        'operation_types': 'list[str]',
        'properties': 'object',
        'refresh_token': 'str',
        'source': 'str',
        'source_farmer_id': 'str',
        'start_year': 'str',
        'status': 'str',
        'tenant_type': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'created_date_time': 'createdDateTime',
        'description': 'description',
        'farmer_id': 'farmerId',
        'fields_info': 'fieldsInfo',
        'id': 'id',
        'last_used_time': 'lastUsedTime',
        'modified_date_time': 'modifiedDateTime',
        'name': 'name',
        'operation_types': 'operationTypes',
        'properties': 'properties',
        'refresh_token': 'refreshToken',
        'source': 'source',
        'source_farmer_id': 'sourceFarmerId',
        'start_year': 'startYear',
        'status': 'status',
        'tenant_type': 'tenantType'
    }

    def __init__(self, company_id=None, created_date_time=None, description=None, farmer_id=None, fields_info=None, id=None, last_used_time=None, modified_date_time=None, name=None, operation_types=None, properties=None, refresh_token=None, source=None, source_farmer_id=None, start_year=None, status=None, tenant_type=None, _configuration=None):  # noqa: E501
        """FarmerResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company_id = None
        self._created_date_time = None
        self._description = None
        self._farmer_id = None
        self._fields_info = None
        self._id = None
        self._last_used_time = None
        self._modified_date_time = None
        self._name = None
        self._operation_types = None
        self._properties = None
        self._refresh_token = None
        self._source = None
        self._source_farmer_id = None
        self._start_year = None
        self._status = None
        self._tenant_type = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if description is not None:
            self.description = description
        if farmer_id is not None:
            self.farmer_id = farmer_id
        if fields_info is not None:
            self.fields_info = fields_info
        if id is not None:
            self.id = id
        if last_used_time is not None:
            self.last_used_time = last_used_time
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if name is not None:
            self.name = name
        if operation_types is not None:
            self.operation_types = operation_types
        if properties is not None:
            self.properties = properties
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if source is not None:
            self.source = source
        if source_farmer_id is not None:
            self.source_farmer_id = source_farmer_id
        if start_year is not None:
            self.start_year = start_year
        if status is not None:
            self.status = status
        if tenant_type is not None:
            self.tenant_type = tenant_type

    @property
    def company_id(self):
        """Gets the company_id of this FarmerResponse.  # noqa: E501


        :return: The company_id of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this FarmerResponse.


        :param company_id: The company_id of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def created_date_time(self):
        """Gets the created_date_time of this FarmerResponse.  # noqa: E501


        :return: The created_date_time of this FarmerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this FarmerResponse.


        :param created_date_time: The created_date_time of this FarmerResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def description(self):
        """Gets the description of this FarmerResponse.  # noqa: E501


        :return: The description of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FarmerResponse.


        :param description: The description of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def farmer_id(self):
        """Gets the farmer_id of this FarmerResponse.  # noqa: E501


        :return: The farmer_id of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._farmer_id

    @farmer_id.setter
    def farmer_id(self, farmer_id):
        """Sets the farmer_id of this FarmerResponse.


        :param farmer_id: The farmer_id of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._farmer_id = farmer_id

    @property
    def fields_info(self):
        """Gets the fields_info of this FarmerResponse.  # noqa: E501


        :return: The fields_info of this FarmerResponse.  # noqa: E501
        :rtype: dict(str, FieldInfo)
        """
        return self._fields_info

    @fields_info.setter
    def fields_info(self, fields_info):
        """Sets the fields_info of this FarmerResponse.


        :param fields_info: The fields_info of this FarmerResponse.  # noqa: E501
        :type: dict(str, FieldInfo)
        """

        self._fields_info = fields_info

    @property
    def id(self):
        """Gets the id of this FarmerResponse.  # noqa: E501


        :return: The id of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FarmerResponse.


        :param id: The id of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_used_time(self):
        """Gets the last_used_time of this FarmerResponse.  # noqa: E501


        :return: The last_used_time of this FarmerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used_time

    @last_used_time.setter
    def last_used_time(self, last_used_time):
        """Sets the last_used_time of this FarmerResponse.


        :param last_used_time: The last_used_time of this FarmerResponse.  # noqa: E501
        :type: datetime
        """

        self._last_used_time = last_used_time

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this FarmerResponse.  # noqa: E501


        :return: The modified_date_time of this FarmerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this FarmerResponse.


        :param modified_date_time: The modified_date_time of this FarmerResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def name(self):
        """Gets the name of this FarmerResponse.  # noqa: E501


        :return: The name of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FarmerResponse.


        :param name: The name of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operation_types(self):
        """Gets the operation_types of this FarmerResponse.  # noqa: E501


        :return: The operation_types of this FarmerResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._operation_types

    @operation_types.setter
    def operation_types(self, operation_types):
        """Sets the operation_types of this FarmerResponse.


        :param operation_types: The operation_types of this FarmerResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["APPLICATION", "HARVEST", "SEEDING", "TILLAGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(operation_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `operation_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(operation_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._operation_types = operation_types

    @property
    def properties(self):
        """Gets the properties of this FarmerResponse.  # noqa: E501


        :return: The properties of this FarmerResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FarmerResponse.


        :param properties: The properties of this FarmerResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def refresh_token(self):
        """Gets the refresh_token of this FarmerResponse.  # noqa: E501


        :return: The refresh_token of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this FarmerResponse.


        :param refresh_token: The refresh_token of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def source(self):
        """Gets the source of this FarmerResponse.  # noqa: E501


        :return: The source of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FarmerResponse.


        :param source: The source of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_farmer_id(self):
        """Gets the source_farmer_id of this FarmerResponse.  # noqa: E501


        :return: The source_farmer_id of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_farmer_id

    @source_farmer_id.setter
    def source_farmer_id(self, source_farmer_id):
        """Sets the source_farmer_id of this FarmerResponse.


        :param source_farmer_id: The source_farmer_id of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._source_farmer_id = source_farmer_id

    @property
    def start_year(self):
        """Gets the start_year of this FarmerResponse.  # noqa: E501


        :return: The start_year of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this FarmerResponse.


        :param start_year: The start_year of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._start_year = start_year

    @property
    def status(self):
        """Gets the status of this FarmerResponse.  # noqa: E501


        :return: The status of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FarmerResponse.


        :param status: The status of this FarmerResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tenant_type(self):
        """Gets the tenant_type of this FarmerResponse.  # noqa: E501


        :return: The tenant_type of this FarmerResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this FarmerResponse.


        :param tenant_type: The tenant_type of this FarmerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMARTFARM", "SMARTFARM_PLUS", "SMARTRISK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tenant_type not in allowed_values):
            raise ValueError(
                "Invalid value for `tenant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tenant_type, allowed_values)
            )

        self._tenant_type = tenant_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FarmerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FarmerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FarmerResponse):
            return True

        return self.to_dict() != other.to_dict()
