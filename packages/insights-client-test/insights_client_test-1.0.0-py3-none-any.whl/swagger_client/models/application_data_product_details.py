# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ApplicationDataProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_material': 'Measure',
        'is_career': 'bool',
        'product_name': 'str',
        'total_material': 'Measure'
    }

    attribute_map = {
        'avg_material': 'avgMaterial',
        'is_career': 'isCareer',
        'product_name': 'productName',
        'total_material': 'totalMaterial'
    }

    def __init__(self, avg_material=None, is_career=None, product_name=None, total_material=None, _configuration=None):  # noqa: E501
        """ApplicationDataProductDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avg_material = None
        self._is_career = None
        self._product_name = None
        self._total_material = None
        self.discriminator = None

        if avg_material is not None:
            self.avg_material = avg_material
        if is_career is not None:
            self.is_career = is_career
        if product_name is not None:
            self.product_name = product_name
        if total_material is not None:
            self.total_material = total_material

    @property
    def avg_material(self):
        """Gets the avg_material of this ApplicationDataProductDetails.  # noqa: E501


        :return: The avg_material of this ApplicationDataProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._avg_material

    @avg_material.setter
    def avg_material(self, avg_material):
        """Sets the avg_material of this ApplicationDataProductDetails.


        :param avg_material: The avg_material of this ApplicationDataProductDetails.  # noqa: E501
        :type: Measure
        """

        self._avg_material = avg_material

    @property
    def is_career(self):
        """Gets the is_career of this ApplicationDataProductDetails.  # noqa: E501


        :return: The is_career of this ApplicationDataProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_career

    @is_career.setter
    def is_career(self, is_career):
        """Sets the is_career of this ApplicationDataProductDetails.


        :param is_career: The is_career of this ApplicationDataProductDetails.  # noqa: E501
        :type: bool
        """

        self._is_career = is_career

    @property
    def product_name(self):
        """Gets the product_name of this ApplicationDataProductDetails.  # noqa: E501


        :return: The product_name of this ApplicationDataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ApplicationDataProductDetails.


        :param product_name: The product_name of this ApplicationDataProductDetails.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def total_material(self):
        """Gets the total_material of this ApplicationDataProductDetails.  # noqa: E501


        :return: The total_material of this ApplicationDataProductDetails.  # noqa: E501
        :rtype: Measure
        """
        return self._total_material

    @total_material.setter
    def total_material(self, total_material):
        """Sets the total_material of this ApplicationDataProductDetails.


        :param total_material: The total_material of this ApplicationDataProductDetails.  # noqa: E501
        :type: Measure
        """

        self._total_material = total_material

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDataProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDataProductDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationDataProductDetails):
            return True

        return self.to_dict() != other.to_dict()
