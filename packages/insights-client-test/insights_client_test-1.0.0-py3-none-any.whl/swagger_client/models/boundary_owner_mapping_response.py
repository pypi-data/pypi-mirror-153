# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BoundaryOwnerMappingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'boundary_type': 'str',
        'created_date_time': 'datetime',
        'custom_boundaries': 'BoundaryResponse',
        'external_id': 'str',
        'geo_hierarchy': 'list[dict(str, str)]',
        'id': 'str',
        'modified_date_time': 'datetime',
        'monitoring': 'bool',
        'org_id': 'str',
        'parent_id': 'str',
        'plot_count': 'int',
        'properties': 'object',
        'ref_no': 'str',
        'status': 'str',
        'subscribed_metrics': 'dict(str, bool)',
        'system_boundaries': 'BoundaryResponse',
        'tenant_type': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'boundary_type': 'boundaryType',
        'created_date_time': 'createdDateTime',
        'custom_boundaries': 'customBoundaries',
        'external_id': 'externalId',
        'geo_hierarchy': 'geoHierarchy',
        'id': 'id',
        'modified_date_time': 'modifiedDateTime',
        'monitoring': 'monitoring',
        'org_id': 'orgId',
        'parent_id': 'parentId',
        'plot_count': 'plotCount',
        'properties': 'properties',
        'ref_no': 'refNo',
        'status': 'status',
        'subscribed_metrics': 'subscribedMetrics',
        'system_boundaries': 'systemBoundaries',
        'tenant_type': 'tenantType',
        'user_id': 'userId'
    }

    def __init__(self, boundary_id=None, boundary_type=None, created_date_time=None, custom_boundaries=None, external_id=None, geo_hierarchy=None, id=None, modified_date_time=None, monitoring=None, org_id=None, parent_id=None, plot_count=None, properties=None, ref_no=None, status=None, subscribed_metrics=None, system_boundaries=None, tenant_type=None, user_id=None, _configuration=None):  # noqa: E501
        """BoundaryOwnerMappingResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boundary_id = None
        self._boundary_type = None
        self._created_date_time = None
        self._custom_boundaries = None
        self._external_id = None
        self._geo_hierarchy = None
        self._id = None
        self._modified_date_time = None
        self._monitoring = None
        self._org_id = None
        self._parent_id = None
        self._plot_count = None
        self._properties = None
        self._ref_no = None
        self._status = None
        self._subscribed_metrics = None
        self._system_boundaries = None
        self._tenant_type = None
        self._user_id = None
        self.discriminator = None

        if boundary_id is not None:
            self.boundary_id = boundary_id
        if boundary_type is not None:
            self.boundary_type = boundary_type
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if custom_boundaries is not None:
            self.custom_boundaries = custom_boundaries
        if external_id is not None:
            self.external_id = external_id
        if geo_hierarchy is not None:
            self.geo_hierarchy = geo_hierarchy
        if id is not None:
            self.id = id
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if monitoring is not None:
            self.monitoring = monitoring
        if org_id is not None:
            self.org_id = org_id
        if parent_id is not None:
            self.parent_id = parent_id
        if plot_count is not None:
            self.plot_count = plot_count
        if properties is not None:
            self.properties = properties
        if ref_no is not None:
            self.ref_no = ref_no
        if status is not None:
            self.status = status
        if subscribed_metrics is not None:
            self.subscribed_metrics = subscribed_metrics
        if system_boundaries is not None:
            self.system_boundaries = system_boundaries
        if tenant_type is not None:
            self.tenant_type = tenant_type
        if user_id is not None:
            self.user_id = user_id

    @property
    def boundary_id(self):
        """Gets the boundary_id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The boundary_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this BoundaryOwnerMappingResponse.


        :param boundary_id: The boundary_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def boundary_type(self):
        """Gets the boundary_type of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The boundary_type of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._boundary_type

    @boundary_type.setter
    def boundary_type(self, boundary_type):
        """Sets the boundary_type of this BoundaryOwnerMappingResponse.


        :param boundary_type: The boundary_type of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "REGION", "SURVEY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                boundary_type not in allowed_values):
            raise ValueError(
                "Invalid value for `boundary_type` ({0}), must be one of {1}"  # noqa: E501
                .format(boundary_type, allowed_values)
            )

        self._boundary_type = boundary_type

    @property
    def created_date_time(self):
        """Gets the created_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The created_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this BoundaryOwnerMappingResponse.


        :param created_date_time: The created_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def custom_boundaries(self):
        """Gets the custom_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The custom_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: BoundaryResponse
        """
        return self._custom_boundaries

    @custom_boundaries.setter
    def custom_boundaries(self, custom_boundaries):
        """Sets the custom_boundaries of this BoundaryOwnerMappingResponse.


        :param custom_boundaries: The custom_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: BoundaryResponse
        """

        self._custom_boundaries = custom_boundaries

    @property
    def external_id(self):
        """Gets the external_id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The external_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this BoundaryOwnerMappingResponse.


        :param external_id: The external_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def geo_hierarchy(self):
        """Gets the geo_hierarchy of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The geo_hierarchy of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._geo_hierarchy

    @geo_hierarchy.setter
    def geo_hierarchy(self, geo_hierarchy):
        """Sets the geo_hierarchy of this BoundaryOwnerMappingResponse.


        :param geo_hierarchy: The geo_hierarchy of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._geo_hierarchy = geo_hierarchy

    @property
    def id(self):
        """Gets the id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoundaryOwnerMappingResponse.


        :param id: The id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The modified_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this BoundaryOwnerMappingResponse.


        :param modified_date_time: The modified_date_time of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def monitoring(self):
        """Gets the monitoring of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The monitoring of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this BoundaryOwnerMappingResponse.


        :param monitoring: The monitoring of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: bool
        """

        self._monitoring = monitoring

    @property
    def org_id(self):
        """Gets the org_id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The org_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this BoundaryOwnerMappingResponse.


        :param org_id: The org_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parent_id(self):
        """Gets the parent_id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The parent_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BoundaryOwnerMappingResponse.


        :param parent_id: The parent_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def plot_count(self):
        """Gets the plot_count of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The plot_count of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: int
        """
        return self._plot_count

    @plot_count.setter
    def plot_count(self, plot_count):
        """Sets the plot_count of this BoundaryOwnerMappingResponse.


        :param plot_count: The plot_count of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: int
        """

        self._plot_count = plot_count

    @property
    def properties(self):
        """Gets the properties of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The properties of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BoundaryOwnerMappingResponse.


        :param properties: The properties of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def ref_no(self):
        """Gets the ref_no of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The ref_no of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this BoundaryOwnerMappingResponse.


        :param ref_no: The ref_no of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def status(self):
        """Gets the status of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The status of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BoundaryOwnerMappingResponse.


        :param status: The status of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscribed_metrics(self):
        """Gets the subscribed_metrics of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The subscribed_metrics of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._subscribed_metrics

    @subscribed_metrics.setter
    def subscribed_metrics(self, subscribed_metrics):
        """Sets the subscribed_metrics of this BoundaryOwnerMappingResponse.


        :param subscribed_metrics: The subscribed_metrics of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: dict(str, bool)
        """

        self._subscribed_metrics = subscribed_metrics

    @property
    def system_boundaries(self):
        """Gets the system_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The system_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: BoundaryResponse
        """
        return self._system_boundaries

    @system_boundaries.setter
    def system_boundaries(self, system_boundaries):
        """Sets the system_boundaries of this BoundaryOwnerMappingResponse.


        :param system_boundaries: The system_boundaries of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: BoundaryResponse
        """

        self._system_boundaries = system_boundaries

    @property
    def tenant_type(self):
        """Gets the tenant_type of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The tenant_type of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this BoundaryOwnerMappingResponse.


        :param tenant_type: The tenant_type of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMARTFARM", "SMARTFARM_PLUS", "SMARTRISK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tenant_type not in allowed_values):
            raise ValueError(
                "Invalid value for `tenant_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tenant_type, allowed_values)
            )

        self._tenant_type = tenant_type

    @property
    def user_id(self):
        """Gets the user_id of this BoundaryOwnerMappingResponse.  # noqa: E501


        :return: The user_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BoundaryOwnerMappingResponse.


        :param user_id: The user_id of this BoundaryOwnerMappingResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoundaryOwnerMappingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryOwnerMappingResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundaryOwnerMappingResponse):
            return True

        return self.to_dict() != other.to_dict()
