# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SatelliteCatalogueRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'boundary_type': 'str',
        '_date': 'datetime',
        'expire_at': 'datetime',
        'files': 'list[FileDetails]',
        'meta_data': 'dict(str, str)',
        'properties': 'object',
        'source': 'str',
        'status': 'str',
        'storage_prefix': 'str',
        'tags': 'dict(str, str)',
        'type': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'boundary_type': 'boundaryType',
        '_date': 'date',
        'expire_at': 'expireAt',
        'files': 'files',
        'meta_data': 'metaData',
        'properties': 'properties',
        'source': 'source',
        'status': 'status',
        'storage_prefix': 'storagePrefix',
        'tags': 'tags',
        'type': 'type'
    }

    def __init__(self, boundary_id=None, boundary_type=None, _date=None, expire_at=None, files=None, meta_data=None, properties=None, source=None, status=None, storage_prefix=None, tags=None, type=None, _configuration=None):  # noqa: E501
        """SatelliteCatalogueRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boundary_id = None
        self._boundary_type = None
        self.__date = None
        self._expire_at = None
        self._files = None
        self._meta_data = None
        self._properties = None
        self._source = None
        self._status = None
        self._storage_prefix = None
        self._tags = None
        self._type = None
        self.discriminator = None

        if boundary_id is not None:
            self.boundary_id = boundary_id
        if boundary_type is not None:
            self.boundary_type = boundary_type
        if _date is not None:
            self._date = _date
        if expire_at is not None:
            self.expire_at = expire_at
        if files is not None:
            self.files = files
        if meta_data is not None:
            self.meta_data = meta_data
        if properties is not None:
            self.properties = properties
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if storage_prefix is not None:
            self.storage_prefix = storage_prefix
        if tags is not None:
            self.tags = tags
        if type is not None:
            self.type = type

    @property
    def boundary_id(self):
        """Gets the boundary_id of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The boundary_id of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this SatelliteCatalogueRequest.


        :param boundary_id: The boundary_id of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def boundary_type(self):
        """Gets the boundary_type of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The boundary_type of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._boundary_type

    @boundary_type.setter
    def boundary_type(self, boundary_type):
        """Sets the boundary_type of this SatelliteCatalogueRequest.


        :param boundary_type: The boundary_type of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "REGION", "SURVEY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                boundary_type not in allowed_values):
            raise ValueError(
                "Invalid value for `boundary_type` ({0}), must be one of {1}"  # noqa: E501
                .format(boundary_type, allowed_values)
            )

        self._boundary_type = boundary_type

    @property
    def _date(self):
        """Gets the _date of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The _date of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SatelliteCatalogueRequest.


        :param _date: The _date of this SatelliteCatalogueRequest.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def expire_at(self):
        """Gets the expire_at of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The expire_at of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this SatelliteCatalogueRequest.


        :param expire_at: The expire_at of this SatelliteCatalogueRequest.  # noqa: E501
        :type: datetime
        """

        self._expire_at = expire_at

    @property
    def files(self):
        """Gets the files of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The files of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: list[FileDetails]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SatelliteCatalogueRequest.


        :param files: The files of this SatelliteCatalogueRequest.  # noqa: E501
        :type: list[FileDetails]
        """

        self._files = files

    @property
    def meta_data(self):
        """Gets the meta_data of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The meta_data of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this SatelliteCatalogueRequest.


        :param meta_data: The meta_data of this SatelliteCatalogueRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._meta_data = meta_data

    @property
    def properties(self):
        """Gets the properties of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The properties of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SatelliteCatalogueRequest.


        :param properties: The properties of this SatelliteCatalogueRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def source(self):
        """Gets the source of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The source of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SatelliteCatalogueRequest.


        :param source: The source of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["LANDSAT8", "SENTINEL1_GRD", "SENTINEL2_L1C"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The status of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SatelliteCatalogueRequest.


        :param status: The status of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def storage_prefix(self):
        """Gets the storage_prefix of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The storage_prefix of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_prefix

    @storage_prefix.setter
    def storage_prefix(self, storage_prefix):
        """Sets the storage_prefix of this SatelliteCatalogueRequest.


        :param storage_prefix: The storage_prefix of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """

        self._storage_prefix = storage_prefix

    @property
    def tags(self):
        """Gets the tags of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The tags of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SatelliteCatalogueRequest.


        :param tags: The tags of this SatelliteCatalogueRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this SatelliteCatalogueRequest.  # noqa: E501


        :return: The type of this SatelliteCatalogueRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SatelliteCatalogueRequest.


        :param type: The type of this SatelliteCatalogueRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRID", "MOSAIC", "TILE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SatelliteCatalogueRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SatelliteCatalogueRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SatelliteCatalogueRequest):
            return True

        return self.to_dict() != other.to_dict()
