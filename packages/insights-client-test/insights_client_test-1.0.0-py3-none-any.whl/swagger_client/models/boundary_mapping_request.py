# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BoundaryMappingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_boundaries': 'BoundaryRequest',
        'monitoring': 'bool',
        'ref_no': 'str',
        'subscribed_metrics': 'dict(str, bool)',
        'system_boundaries': 'SystemBoundaryRequest'
    }

    attribute_map = {
        'custom_boundaries': 'customBoundaries',
        'monitoring': 'monitoring',
        'ref_no': 'refNo',
        'subscribed_metrics': 'subscribedMetrics',
        'system_boundaries': 'systemBoundaries'
    }

    def __init__(self, custom_boundaries=None, monitoring=None, ref_no=None, subscribed_metrics=None, system_boundaries=None, _configuration=None):  # noqa: E501
        """BoundaryMappingRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_boundaries = None
        self._monitoring = None
        self._ref_no = None
        self._subscribed_metrics = None
        self._system_boundaries = None
        self.discriminator = None

        if custom_boundaries is not None:
            self.custom_boundaries = custom_boundaries
        if monitoring is not None:
            self.monitoring = monitoring
        if ref_no is not None:
            self.ref_no = ref_no
        if subscribed_metrics is not None:
            self.subscribed_metrics = subscribed_metrics
        if system_boundaries is not None:
            self.system_boundaries = system_boundaries

    @property
    def custom_boundaries(self):
        """Gets the custom_boundaries of this BoundaryMappingRequest.  # noqa: E501


        :return: The custom_boundaries of this BoundaryMappingRequest.  # noqa: E501
        :rtype: BoundaryRequest
        """
        return self._custom_boundaries

    @custom_boundaries.setter
    def custom_boundaries(self, custom_boundaries):
        """Sets the custom_boundaries of this BoundaryMappingRequest.


        :param custom_boundaries: The custom_boundaries of this BoundaryMappingRequest.  # noqa: E501
        :type: BoundaryRequest
        """

        self._custom_boundaries = custom_boundaries

    @property
    def monitoring(self):
        """Gets the monitoring of this BoundaryMappingRequest.  # noqa: E501


        :return: The monitoring of this BoundaryMappingRequest.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this BoundaryMappingRequest.


        :param monitoring: The monitoring of this BoundaryMappingRequest.  # noqa: E501
        :type: bool
        """

        self._monitoring = monitoring

    @property
    def ref_no(self):
        """Gets the ref_no of this BoundaryMappingRequest.  # noqa: E501


        :return: The ref_no of this BoundaryMappingRequest.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this BoundaryMappingRequest.


        :param ref_no: The ref_no of this BoundaryMappingRequest.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def subscribed_metrics(self):
        """Gets the subscribed_metrics of this BoundaryMappingRequest.  # noqa: E501


        :return: The subscribed_metrics of this BoundaryMappingRequest.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._subscribed_metrics

    @subscribed_metrics.setter
    def subscribed_metrics(self, subscribed_metrics):
        """Sets the subscribed_metrics of this BoundaryMappingRequest.


        :param subscribed_metrics: The subscribed_metrics of this BoundaryMappingRequest.  # noqa: E501
        :type: dict(str, bool)
        """

        self._subscribed_metrics = subscribed_metrics

    @property
    def system_boundaries(self):
        """Gets the system_boundaries of this BoundaryMappingRequest.  # noqa: E501


        :return: The system_boundaries of this BoundaryMappingRequest.  # noqa: E501
        :rtype: SystemBoundaryRequest
        """
        return self._system_boundaries

    @system_boundaries.setter
    def system_boundaries(self, system_boundaries):
        """Sets the system_boundaries of this BoundaryMappingRequest.


        :param system_boundaries: The system_boundaries of this BoundaryMappingRequest.  # noqa: E501
        :type: SystemBoundaryRequest
        """

        self._system_boundaries = system_boundaries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoundaryMappingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryMappingRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundaryMappingRequest):
            return True

        return self.to_dict() != other.to_dict()
