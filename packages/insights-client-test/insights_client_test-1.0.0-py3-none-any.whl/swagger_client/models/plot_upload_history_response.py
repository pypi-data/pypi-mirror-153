# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PlotUploadHistoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date_time': 'datetime',
        'file_name': 'str',
        'id': 'str',
        'message': 'str',
        'modified_date_time': 'datetime',
        'plot_count': 'int',
        'plot_details': 'list[PlotDetails]',
        'properties': 'object',
        'ref_no': 'str',
        'status': 'str',
        'upload_status': 'bool',
        'upload_type': 'str'
    }

    attribute_map = {
        'created_date_time': 'createdDateTime',
        'file_name': 'fileName',
        'id': 'id',
        'message': 'message',
        'modified_date_time': 'modifiedDateTime',
        'plot_count': 'plotCount',
        'plot_details': 'plotDetails',
        'properties': 'properties',
        'ref_no': 'refNo',
        'status': 'status',
        'upload_status': 'uploadStatus',
        'upload_type': 'uploadType'
    }

    def __init__(self, created_date_time=None, file_name=None, id=None, message=None, modified_date_time=None, plot_count=None, plot_details=None, properties=None, ref_no=None, status=None, upload_status=None, upload_type=None, _configuration=None):  # noqa: E501
        """PlotUploadHistoryResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_date_time = None
        self._file_name = None
        self._id = None
        self._message = None
        self._modified_date_time = None
        self._plot_count = None
        self._plot_details = None
        self._properties = None
        self._ref_no = None
        self._status = None
        self._upload_status = None
        self._upload_type = None
        self.discriminator = None

        if created_date_time is not None:
            self.created_date_time = created_date_time
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if modified_date_time is not None:
            self.modified_date_time = modified_date_time
        if plot_count is not None:
            self.plot_count = plot_count
        if plot_details is not None:
            self.plot_details = plot_details
        if properties is not None:
            self.properties = properties
        if ref_no is not None:
            self.ref_no = ref_no
        if status is not None:
            self.status = status
        if upload_status is not None:
            self.upload_status = upload_status
        if upload_type is not None:
            self.upload_type = upload_type

    @property
    def created_date_time(self):
        """Gets the created_date_time of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The created_date_time of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this PlotUploadHistoryResponse.


        :param created_date_time: The created_date_time of this PlotUploadHistoryResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def file_name(self):
        """Gets the file_name of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The file_name of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PlotUploadHistoryResponse.


        :param file_name: The file_name of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The id of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlotUploadHistoryResponse.


        :param id: The id of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The message of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PlotUploadHistoryResponse.


        :param message: The message of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def modified_date_time(self):
        """Gets the modified_date_time of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The modified_date_time of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date_time

    @modified_date_time.setter
    def modified_date_time(self, modified_date_time):
        """Sets the modified_date_time of this PlotUploadHistoryResponse.


        :param modified_date_time: The modified_date_time of this PlotUploadHistoryResponse.  # noqa: E501
        :type: datetime
        """

        self._modified_date_time = modified_date_time

    @property
    def plot_count(self):
        """Gets the plot_count of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The plot_count of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._plot_count

    @plot_count.setter
    def plot_count(self, plot_count):
        """Sets the plot_count of this PlotUploadHistoryResponse.


        :param plot_count: The plot_count of this PlotUploadHistoryResponse.  # noqa: E501
        :type: int
        """

        self._plot_count = plot_count

    @property
    def plot_details(self):
        """Gets the plot_details of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The plot_details of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: list[PlotDetails]
        """
        return self._plot_details

    @plot_details.setter
    def plot_details(self, plot_details):
        """Sets the plot_details of this PlotUploadHistoryResponse.


        :param plot_details: The plot_details of this PlotUploadHistoryResponse.  # noqa: E501
        :type: list[PlotDetails]
        """

        self._plot_details = plot_details

    @property
    def properties(self):
        """Gets the properties of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The properties of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PlotUploadHistoryResponse.


        :param properties: The properties of this PlotUploadHistoryResponse.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def ref_no(self):
        """Gets the ref_no of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The ref_no of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this PlotUploadHistoryResponse.


        :param ref_no: The ref_no of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def status(self):
        """Gets the status of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The status of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlotUploadHistoryResponse.


        :param status: The status of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def upload_status(self):
        """Gets the upload_status of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The upload_status of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this PlotUploadHistoryResponse.


        :param upload_status: The upload_status of this PlotUploadHistoryResponse.  # noqa: E501
        :type: bool
        """

        self._upload_status = upload_status

    @property
    def upload_type(self):
        """Gets the upload_type of this PlotUploadHistoryResponse.  # noqa: E501


        :return: The upload_type of this PlotUploadHistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this PlotUploadHistoryResponse.


        :param upload_type: The upload_type of this PlotUploadHistoryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOUNDARY_FILE", "BULK_UPLOAD", "DRAW_ON_MAP", "SURVEY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                upload_type not in allowed_values):
            raise ValueError(
                "Invalid value for `upload_type` ({0}), must be one of {1}"  # noqa: E501
                .format(upload_type, allowed_values)
            )

        self._upload_type = upload_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlotUploadHistoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotUploadHistoryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlotUploadHistoryResponse):
            return True

        return self.to_dict() != other.to_dict()
