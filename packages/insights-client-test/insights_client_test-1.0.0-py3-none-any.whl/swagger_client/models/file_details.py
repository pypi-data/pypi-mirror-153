# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FileDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'band': 'str',
        'band_name': 'str',
        'ext': 'str',
        'name': 'str',
        'res': 'str'
    }

    attribute_map = {
        'band': 'band',
        'band_name': 'bandName',
        'ext': 'ext',
        'name': 'name',
        'res': 'res'
    }

    def __init__(self, band=None, band_name=None, ext=None, name=None, res=None, _configuration=None):  # noqa: E501
        """FileDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._band = None
        self._band_name = None
        self._ext = None
        self._name = None
        self._res = None
        self.discriminator = None

        if band is not None:
            self.band = band
        if band_name is not None:
            self.band_name = band_name
        if ext is not None:
            self.ext = ext
        if name is not None:
            self.name = name
        if res is not None:
            self.res = res

    @property
    def band(self):
        """Gets the band of this FileDetails.  # noqa: E501


        :return: The band of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this FileDetails.


        :param band: The band of this FileDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["ARVI", "B01", "B02", "B03", "B04", "B05", "B06", "B07", "B08", "B09", "B10", "B11", "B12", "B8A", "CHI_RE", "CMK", "DH", "DV", "EVI", "LAI2", "LSWI", "NDRE", "NDVI", "SAVI", "SH", "SV", "TCI"]  # noqa: E501
        if (self._configuration.client_side_validation and
                band not in allowed_values):
            raise ValueError(
                "Invalid value for `band` ({0}), must be one of {1}"  # noqa: E501
                .format(band, allowed_values)
            )

        self._band = band

    @property
    def band_name(self):
        """Gets the band_name of this FileDetails.  # noqa: E501


        :return: The band_name of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._band_name

    @band_name.setter
    def band_name(self, band_name):
        """Sets the band_name of this FileDetails.


        :param band_name: The band_name of this FileDetails.  # noqa: E501
        :type: str
        """

        self._band_name = band_name

    @property
    def ext(self):
        """Gets the ext of this FileDetails.  # noqa: E501


        :return: The ext of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this FileDetails.


        :param ext: The ext of this FileDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["CSV", "TIF"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ext not in allowed_values):
            raise ValueError(
                "Invalid value for `ext` ({0}), must be one of {1}"  # noqa: E501
                .format(ext, allowed_values)
            )

        self._ext = ext

    @property
    def name(self):
        """Gets the name of this FileDetails.  # noqa: E501


        :return: The name of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileDetails.


        :param name: The name of this FileDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def res(self):
        """Gets the res of this FileDetails.  # noqa: E501


        :return: The res of this FileDetails.  # noqa: E501
        :rtype: str
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this FileDetails.


        :param res: The res of this FileDetails.  # noqa: E501
        :type: str
        """

        self._res = res

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileDetails):
            return True

        return self.to_dict() != other.to_dict()
