# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NotificationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boundary_id': 'str',
        'boundary_type': 'str',
        'count': 'int',
        'file_name': 'str',
        'message': 'str',
        'properties': 'object',
        'raster_id': 'str',
        'read_date_time': 'datetime',
        'ref_no': 'str',
        'status': 'str',
        'survey_no': 'str',
        'village_id': 'str'
    }

    attribute_map = {
        'boundary_id': 'boundaryId',
        'boundary_type': 'boundaryType',
        'count': 'count',
        'file_name': 'fileName',
        'message': 'message',
        'properties': 'properties',
        'raster_id': 'rasterId',
        'read_date_time': 'readDateTime',
        'ref_no': 'refNo',
        'status': 'status',
        'survey_no': 'surveyNo',
        'village_id': 'villageId'
    }

    def __init__(self, boundary_id=None, boundary_type=None, count=None, file_name=None, message=None, properties=None, raster_id=None, read_date_time=None, ref_no=None, status=None, survey_no=None, village_id=None, _configuration=None):  # noqa: E501
        """NotificationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boundary_id = None
        self._boundary_type = None
        self._count = None
        self._file_name = None
        self._message = None
        self._properties = None
        self._raster_id = None
        self._read_date_time = None
        self._ref_no = None
        self._status = None
        self._survey_no = None
        self._village_id = None
        self.discriminator = None

        if boundary_id is not None:
            self.boundary_id = boundary_id
        if boundary_type is not None:
            self.boundary_type = boundary_type
        if count is not None:
            self.count = count
        if file_name is not None:
            self.file_name = file_name
        if message is not None:
            self.message = message
        if properties is not None:
            self.properties = properties
        if raster_id is not None:
            self.raster_id = raster_id
        if read_date_time is not None:
            self.read_date_time = read_date_time
        if ref_no is not None:
            self.ref_no = ref_no
        if status is not None:
            self.status = status
        if survey_no is not None:
            self.survey_no = survey_no
        if village_id is not None:
            self.village_id = village_id

    @property
    def boundary_id(self):
        """Gets the boundary_id of this NotificationRequest.  # noqa: E501


        :return: The boundary_id of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this NotificationRequest.


        :param boundary_id: The boundary_id of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def boundary_type(self):
        """Gets the boundary_type of this NotificationRequest.  # noqa: E501


        :return: The boundary_type of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._boundary_type

    @boundary_type.setter
    def boundary_type(self, boundary_type):
        """Sets the boundary_type of this NotificationRequest.


        :param boundary_type: The boundary_type of this NotificationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "REGION", "SURVEY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                boundary_type not in allowed_values):
            raise ValueError(
                "Invalid value for `boundary_type` ({0}), must be one of {1}"  # noqa: E501
                .format(boundary_type, allowed_values)
            )

        self._boundary_type = boundary_type

    @property
    def count(self):
        """Gets the count of this NotificationRequest.  # noqa: E501


        :return: The count of this NotificationRequest.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NotificationRequest.


        :param count: The count of this NotificationRequest.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def file_name(self):
        """Gets the file_name of this NotificationRequest.  # noqa: E501


        :return: The file_name of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this NotificationRequest.


        :param file_name: The file_name of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def message(self):
        """Gets the message of this NotificationRequest.  # noqa: E501


        :return: The message of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationRequest.


        :param message: The message of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def properties(self):
        """Gets the properties of this NotificationRequest.  # noqa: E501


        :return: The properties of this NotificationRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NotificationRequest.


        :param properties: The properties of this NotificationRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def raster_id(self):
        """Gets the raster_id of this NotificationRequest.  # noqa: E501


        :return: The raster_id of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._raster_id

    @raster_id.setter
    def raster_id(self, raster_id):
        """Sets the raster_id of this NotificationRequest.


        :param raster_id: The raster_id of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._raster_id = raster_id

    @property
    def read_date_time(self):
        """Gets the read_date_time of this NotificationRequest.  # noqa: E501


        :return: The read_date_time of this NotificationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._read_date_time

    @read_date_time.setter
    def read_date_time(self, read_date_time):
        """Sets the read_date_time of this NotificationRequest.


        :param read_date_time: The read_date_time of this NotificationRequest.  # noqa: E501
        :type: datetime
        """

        self._read_date_time = read_date_time

    @property
    def ref_no(self):
        """Gets the ref_no of this NotificationRequest.  # noqa: E501


        :return: The ref_no of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this NotificationRequest.


        :param ref_no: The ref_no of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._ref_no = ref_no

    @property
    def status(self):
        """Gets the status of this NotificationRequest.  # noqa: E501


        :return: The status of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationRequest.


        :param status: The status of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def survey_no(self):
        """Gets the survey_no of this NotificationRequest.  # noqa: E501


        :return: The survey_no of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._survey_no

    @survey_no.setter
    def survey_no(self, survey_no):
        """Sets the survey_no of this NotificationRequest.


        :param survey_no: The survey_no of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._survey_no = survey_no

    @property
    def village_id(self):
        """Gets the village_id of this NotificationRequest.  # noqa: E501


        :return: The village_id of this NotificationRequest.  # noqa: E501
        :rtype: str
        """
        return self._village_id

    @village_id.setter
    def village_id(self, village_id):
        """Sets the village_id of this NotificationRequest.


        :param village_id: The village_id of this NotificationRequest.  # noqa: E501
        :type: str
        """

        self._village_id = village_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationRequest):
            return True

        return self.to_dict() != other.to_dict()
