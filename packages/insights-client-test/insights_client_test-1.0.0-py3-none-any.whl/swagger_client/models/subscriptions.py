# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Subscriptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_location': 'str',
        'features': 'list[str]',
        'indices_list': 'list[str]',
        'models_list': 'list[str]',
        'processing_level': 'str',
        'smart_risk_modules': 'list[str]',
        'subscribed_location': 'dict(str, list[str])'
    }

    attribute_map = {
        'default_location': 'defaultLocation',
        'features': 'features',
        'indices_list': 'indicesList',
        'models_list': 'modelsList',
        'processing_level': 'processingLevel',
        'smart_risk_modules': 'smartRiskModules',
        'subscribed_location': 'subscribedLocation'
    }

    def __init__(self, default_location=None, features=None, indices_list=None, models_list=None, processing_level=None, smart_risk_modules=None, subscribed_location=None, _configuration=None):  # noqa: E501
        """Subscriptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_location = None
        self._features = None
        self._indices_list = None
        self._models_list = None
        self._processing_level = None
        self._smart_risk_modules = None
        self._subscribed_location = None
        self.discriminator = None

        if default_location is not None:
            self.default_location = default_location
        if features is not None:
            self.features = features
        if indices_list is not None:
            self.indices_list = indices_list
        if models_list is not None:
            self.models_list = models_list
        if processing_level is not None:
            self.processing_level = processing_level
        if smart_risk_modules is not None:
            self.smart_risk_modules = smart_risk_modules
        if subscribed_location is not None:
            self.subscribed_location = subscribed_location

    @property
    def default_location(self):
        """Gets the default_location of this Subscriptions.  # noqa: E501


        :return: The default_location of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this Subscriptions.


        :param default_location: The default_location of this Subscriptions.  # noqa: E501
        :type: str
        """

        self._default_location = default_location

    @property
    def features(self):
        """Gets the features of this Subscriptions.  # noqa: E501


        :return: The features of this Subscriptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Subscriptions.


        :param features: The features of this Subscriptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["GDD", "WEATHER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(features).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def indices_list(self):
        """Gets the indices_list of this Subscriptions.  # noqa: E501


        :return: The indices_list of this Subscriptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._indices_list

    @indices_list.setter
    def indices_list(self, indices_list):
        """Sets the indices_list of this Subscriptions.


        :param indices_list: The indices_list of this Subscriptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ARVI", "CHIRE", "EVI", "LAI2", "LSWI", "NDRE", "NDVI", "SAVI"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(indices_list).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `indices_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(indices_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._indices_list = indices_list

    @property
    def models_list(self):
        """Gets the models_list of this Subscriptions.  # noqa: E501


        :return: The models_list of this Subscriptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._models_list

    @models_list.setter
    def models_list(self, models_list):
        """Sets the models_list of this Subscriptions.


        :param models_list: The models_list of this Subscriptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["HEALTH", "YIELD"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(models_list).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `models_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(models_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._models_list = models_list

    @property
    def processing_level(self):
        """Gets the processing_level of this Subscriptions.  # noqa: E501


        :return: The processing_level of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._processing_level

    @processing_level.setter
    def processing_level(self, processing_level):
        """Sets the processing_level of this Subscriptions.


        :param processing_level: The processing_level of this Subscriptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLOT", "TILE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                processing_level not in allowed_values):
            raise ValueError(
                "Invalid value for `processing_level` ({0}), must be one of {1}"  # noqa: E501
                .format(processing_level, allowed_values)
            )

        self._processing_level = processing_level

    @property
    def smart_risk_modules(self):
        """Gets the smart_risk_modules of this Subscriptions.  # noqa: E501


        :return: The smart_risk_modules of this Subscriptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_risk_modules

    @smart_risk_modules.setter
    def smart_risk_modules(self, smart_risk_modules):
        """Sets the smart_risk_modules of this Subscriptions.


        :param smart_risk_modules: The smart_risk_modules of this Subscriptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AGRIWORTHINESS", "MONITORING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(smart_risk_modules).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `smart_risk_modules` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(smart_risk_modules) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._smart_risk_modules = smart_risk_modules

    @property
    def subscribed_location(self):
        """Gets the subscribed_location of this Subscriptions.  # noqa: E501


        :return: The subscribed_location of this Subscriptions.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._subscribed_location

    @subscribed_location.setter
    def subscribed_location(self, subscribed_location):
        """Sets the subscribed_location of this Subscriptions.


        :param subscribed_location: The subscribed_location of this Subscriptions.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._subscribed_location = subscribed_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscriptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscriptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subscriptions):
            return True

        return self.to_dict() != other.to_dict()
