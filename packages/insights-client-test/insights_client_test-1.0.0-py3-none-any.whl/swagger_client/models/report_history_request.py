# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportHistoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_details': 'list[FilterDetails]',
        'message': 'str',
        'plot_details': 'list[PlotDetails]',
        'properties': 'object',
        'report_link': 'str',
        'report_status': 'str',
        'report_type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'filter_details': 'filterDetails',
        'message': 'message',
        'plot_details': 'plotDetails',
        'properties': 'properties',
        'report_link': 'reportLink',
        'report_status': 'reportStatus',
        'report_type': 'reportType',
        'status': 'status'
    }

    def __init__(self, filter_details=None, message=None, plot_details=None, properties=None, report_link=None, report_status=None, report_type=None, status=None, _configuration=None):  # noqa: E501
        """ReportHistoryRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filter_details = None
        self._message = None
        self._plot_details = None
        self._properties = None
        self._report_link = None
        self._report_status = None
        self._report_type = None
        self._status = None
        self.discriminator = None

        if filter_details is not None:
            self.filter_details = filter_details
        if message is not None:
            self.message = message
        if plot_details is not None:
            self.plot_details = plot_details
        if properties is not None:
            self.properties = properties
        if report_link is not None:
            self.report_link = report_link
        if report_status is not None:
            self.report_status = report_status
        if report_type is not None:
            self.report_type = report_type
        if status is not None:
            self.status = status

    @property
    def filter_details(self):
        """Gets the filter_details of this ReportHistoryRequest.  # noqa: E501


        :return: The filter_details of this ReportHistoryRequest.  # noqa: E501
        :rtype: list[FilterDetails]
        """
        return self._filter_details

    @filter_details.setter
    def filter_details(self, filter_details):
        """Sets the filter_details of this ReportHistoryRequest.


        :param filter_details: The filter_details of this ReportHistoryRequest.  # noqa: E501
        :type: list[FilterDetails]
        """

        self._filter_details = filter_details

    @property
    def message(self):
        """Gets the message of this ReportHistoryRequest.  # noqa: E501


        :return: The message of this ReportHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReportHistoryRequest.


        :param message: The message of this ReportHistoryRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def plot_details(self):
        """Gets the plot_details of this ReportHistoryRequest.  # noqa: E501


        :return: The plot_details of this ReportHistoryRequest.  # noqa: E501
        :rtype: list[PlotDetails]
        """
        return self._plot_details

    @plot_details.setter
    def plot_details(self, plot_details):
        """Sets the plot_details of this ReportHistoryRequest.


        :param plot_details: The plot_details of this ReportHistoryRequest.  # noqa: E501
        :type: list[PlotDetails]
        """

        self._plot_details = plot_details

    @property
    def properties(self):
        """Gets the properties of this ReportHistoryRequest.  # noqa: E501


        :return: The properties of this ReportHistoryRequest.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ReportHistoryRequest.


        :param properties: The properties of this ReportHistoryRequest.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def report_link(self):
        """Gets the report_link of this ReportHistoryRequest.  # noqa: E501


        :return: The report_link of this ReportHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_link

    @report_link.setter
    def report_link(self, report_link):
        """Sets the report_link of this ReportHistoryRequest.


        :param report_link: The report_link of this ReportHistoryRequest.  # noqa: E501
        :type: str
        """

        self._report_link = report_link

    @property
    def report_status(self):
        """Gets the report_status of this ReportHistoryRequest.  # noqa: E501


        :return: The report_status of this ReportHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_status

    @report_status.setter
    def report_status(self, report_status):
        """Sets the report_status of this ReportHistoryRequest.


        :param report_status: The report_status of this ReportHistoryRequest.  # noqa: E501
        :type: str
        """

        self._report_status = report_status

    @property
    def report_type(self):
        """Gets the report_type of this ReportHistoryRequest.  # noqa: E501


        :return: The report_type of this ReportHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportHistoryRequest.


        :param report_type: The report_type of this ReportHistoryRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AGRIWORTHINESS", "BULK_SEASONAL", "MONITORING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                report_type not in allowed_values):
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def status(self):
        """Gets the status of this ReportHistoryRequest.  # noqa: E501


        :return: The status of this ReportHistoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportHistoryRequest.


        :param status: The status of this ReportHistoryRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportHistoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportHistoryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportHistoryRequest):
            return True

        return self.to_dict() != other.to_dict()
