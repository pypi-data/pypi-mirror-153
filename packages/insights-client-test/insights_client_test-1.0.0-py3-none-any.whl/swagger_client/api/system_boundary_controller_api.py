# coding: utf-8

"""
    InsightsServices-Dev-QA

    SR Insight Service API Documentation  # noqa: E501

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemBoundaryControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_system_boundary_to_user_using_post(self, request, tenant_type, **kwargs):  # noqa: E501
        """assignSystemBoundaryToUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_system_boundary_to_user_using_post(request, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoundaryMappingRequest request: request (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: list[BoundaryOwnerMappingResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_system_boundary_to_user_using_post_with_http_info(request, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_system_boundary_to_user_using_post_with_http_info(request, tenant_type, **kwargs)  # noqa: E501
            return data

    def assign_system_boundary_to_user_using_post_with_http_info(self, request, tenant_type, **kwargs):  # noqa: E501
        """assignSystemBoundaryToUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_system_boundary_to_user_using_post_with_http_info(request, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoundaryMappingRequest request: request (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: list[BoundaryOwnerMappingResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_system_boundary_to_user_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `assign_system_boundary_to_user_using_post`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `assign_system_boundary_to_user_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BoundaryOwnerMappingResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_assign_system_boundary_to_user_using_post(self, tenant_type, **kwargs):  # noqa: E501
        """bulkAssignSystemBoundaryToUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_assign_system_boundary_to_user_using_post(tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType (required)
        :param file file:
        :param str location_filter:
        :param str org_id: orgId
        :return: PlotUploadHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_assign_system_boundary_to_user_using_post_with_http_info(tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_assign_system_boundary_to_user_using_post_with_http_info(tenant_type, **kwargs)  # noqa: E501
            return data

    def bulk_assign_system_boundary_to_user_using_post_with_http_info(self, tenant_type, **kwargs):  # noqa: E501
        """bulkAssignSystemBoundaryToUser  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_assign_system_boundary_to_user_using_post_with_http_info(tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType (required)
        :param file file:
        :param str location_filter:
        :param str org_id: orgId
        :return: PlotUploadHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_type', 'file', 'location_filter', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_assign_system_boundary_to_user_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `bulk_assign_system_boundary_to_user_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'location_filter' in params:
            form_params.append(('locationFilter', params['location_filter']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/bulk/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PlotUploadHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_batch_using_post16(self, json_list, tenant_type, **kwargs):  # noqa: E501
        """createBatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_batch_using_post16(json_list, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BoundaryRequest] json_list: jsonList (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: list[BoundaryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_batch_using_post16_with_http_info(json_list, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_batch_using_post16_with_http_info(json_list, tenant_type, **kwargs)  # noqa: E501
            return data

    def create_batch_using_post16_with_http_info(self, json_list, tenant_type, **kwargs):  # noqa: E501
        """createBatch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_batch_using_post16_with_http_info(json_list, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BoundaryRequest] json_list: jsonList (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: list[BoundaryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['json_list', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_batch_using_post16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'json_list' is set
        if self.api_client.client_side_validation and ('json_list' not in params or
                                                       params['json_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `json_list` when calling `create_batch_using_post16`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `create_batch_using_post16`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_list' in params:
            body_params = params['json_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BoundaryResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_using_post16(self, json, tenant_type, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post16(json, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoundaryRequest json: json (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_using_post16_with_http_info(json, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_using_post16_with_http_info(json, tenant_type, **kwargs)  # noqa: E501
            return data

    def create_using_post16_with_http_info(self, json, tenant_type, **kwargs):  # noqa: E501
        """create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_using_post16_with_http_info(json, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BoundaryRequest json: json (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['json', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_using_post16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'json' is set
        if self.api_client.client_side_validation and ('json' not in params or
                                                       params['json'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `json` when calling `create_using_post16`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `create_using_post16`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoundaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_using_delete16(self, id, tenant_type, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete16(id, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_using_delete16_with_http_info(id, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_using_delete16_with_http_info(id, tenant_type, **kwargs)  # noqa: E501
            return data

    def delete_using_delete16_with_http_info(self, id, tenant_type, **kwargs):  # noqa: E501
        """delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_using_delete16_with_http_info(id, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_using_delete16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_using_delete16`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `delete_using_delete16`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_using_get16(self, id, tenant_type, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get16(id, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_using_get16_with_http_info(id, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_using_get16_with_http_info(id, tenant_type, **kwargs)  # noqa: E501
            return data

    def get_using_get16_with_http_info(self, id, tenant_type, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_using_get16_with_http_info(id, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_using_get16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_using_get16`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `get_using_get16`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoundaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_using_get16(self, tenant_type, **kwargs):  # noqa: E501
        """listAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_using_get16(tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType (required)
        :param str current_level:
        :param str direction:
        :param str external_id:
        :param str external_id_like:
        :param str geo_hierarchy:
        :param list[str] ids:
        :param datetime max_created_date_time:
        :param datetime max_modified_date_time:
        :param datetime min_created_date_time:
        :param datetime min_modified_date_time:
        :param str name:
        :param str name_like:
        :param str org_id: orgId
        :param int page:
        :param list[str] parent_ids:
        :param list[str] select:
        :param int size:
        :param str sort_by:
        :param list[str] statuses:
        :param str type:
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_using_get16_with_http_info(tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_all_using_get16_with_http_info(tenant_type, **kwargs)  # noqa: E501
            return data

    def list_all_using_get16_with_http_info(self, tenant_type, **kwargs):  # noqa: E501
        """listAll  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_using_get16_with_http_info(tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType (required)
        :param str current_level:
        :param str direction:
        :param str external_id:
        :param str external_id_like:
        :param str geo_hierarchy:
        :param list[str] ids:
        :param datetime max_created_date_time:
        :param datetime max_modified_date_time:
        :param datetime min_created_date_time:
        :param datetime min_modified_date_time:
        :param str name:
        :param str name_like:
        :param str org_id: orgId
        :param int page:
        :param list[str] parent_ids:
        :param list[str] select:
        :param int size:
        :param str sort_by:
        :param list[str] statuses:
        :param str type:
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_type', 'current_level', 'direction', 'external_id', 'external_id_like', 'geo_hierarchy', 'ids', 'max_created_date_time', 'max_modified_date_time', 'min_created_date_time', 'min_modified_date_time', 'name', 'name_like', 'org_id', 'page', 'parent_ids', 'select', 'size', 'sort_by', 'statuses', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_using_get16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `list_all_using_get16`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'current_level' in params:
            query_params.append(('currentLevel', params['current_level']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'external_id_like' in params:
            query_params.append(('externalIdLike', params['external_id_like']))  # noqa: E501
        if 'geo_hierarchy' in params:
            query_params.append(('geoHierarchy', params['geo_hierarchy']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'max_created_date_time' in params:
            query_params.append(('maxCreatedDateTime', params['max_created_date_time']))  # noqa: E501
        if 'max_modified_date_time' in params:
            query_params.append(('maxModifiedDateTime', params['max_modified_date_time']))  # noqa: E501
        if 'min_created_date_time' in params:
            query_params.append(('minCreatedDateTime', params['min_created_date_time']))  # noqa: E501
        if 'min_modified_date_time' in params:
            query_params.append(('minModifiedDateTime', params['min_modified_date_time']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name_like' in params:
            query_params.append(('nameLike', params['name_like']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'parent_ids' in params:
            query_params.append(('parentIds', params['parent_ids']))  # noqa: E501
            collection_formats['parentIds'] = 'multi'  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501
            collection_formats['select'] = 'multi'  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_using_put16(self, id, json, tenant_type, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put16(id, json, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param BoundaryRequest json: json (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_using_put16_with_http_info(id, json, tenant_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_using_put16_with_http_info(id, json, tenant_type, **kwargs)  # noqa: E501
            return data

    def update_using_put16_with_http_info(self, id, json, tenant_type, **kwargs):  # noqa: E501
        """update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_using_put16_with_http_info(id, json, tenant_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param BoundaryRequest json: json (required)
        :param str tenant_type: TenantType (required)
        :param str org_id: orgId
        :return: BoundaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'json', 'tenant_type', 'org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_using_put16" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_using_put16`")  # noqa: E501
        # verify the required parameter 'json' is set
        if self.api_client.client_side_validation and ('json' not in params or
                                                       params['json'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `json` when calling `update_using_put16`")  # noqa: E501
        # verify the required parameter 'tenant_type' is set
        if self.api_client.client_side_validation and ('tenant_type' not in params or
                                                       params['tenant_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_type` when calling `update_using_put16`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'org_id' in params:
            header_params['orgId'] = params['org_id']  # noqa: E501
        if 'tenant_type' in params:
            header_params['TenantType'] = params['tenant_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/boundaries/system/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoundaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
