{"version":3,"file":"lib_index_js.864071ff0d156d2c95ec.js","mappings":";;;;;;;;;;;;;;;;;AAAuE;AAC9B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACA,4BAA4B,mDAAM;AAClC;AACA,2BAA2B,gEAAc,GAAG,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,aAAa;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,+BAA+B;AACzD;AACA;AACA,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab_apod/./lib/index.js"],"sourcesContent":["import { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\n;\n/**\n * Initialization data for the jupyterlab_apod extension.\n */\nconst extension = {\n    id: 'jupyterlab_apod',\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        console.log('JupyterLab extension jupyterlab_apod is activated!');\n        // Create a blank content widget inside of a MainAreaWidget\n        const content = new Widget();\n        content.addClass('my-apodWidget');\n        const widget = new MainAreaWidget({ content });\n        widget.id = 'apod-jupyterlab';\n        widget.title.label = 'Astronomy Picture';\n        widget.title.closable = true;\n        // Add an image element to the content\n        let img = document.createElement('img');\n        content.node.appendChild(img);\n        let summary = document.createElement('p');\n        content.node.appendChild(summary);\n        // Get a random date string in YYYY-MM-DD format\n        function randomDate() {\n            const start = new Date(2010, 1, 1);\n            const end = new Date();\n            const randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n            return randomDate.toISOString().slice(0, 10);\n        }\n        const response = await fetch(`https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=${randomDate()}`);\n        if (!response.ok) {\n            const data = await response.json();\n            if (data.error) {\n                summary.innerText = data.error.message;\n            }\n            else {\n                summary.innerText = response.statusText;\n            }\n        }\n        else {\n            const data = await response.json();\n            if (data.media_type === 'image') {\n                // Populate the image\n                img.src = data.url;\n                img.title = data.title;\n                summary.innerText = data.title;\n                if (data.copyright) {\n                    summary.innerText += ` (Copyright ${data.copyright})`;\n                }\n            }\n            else {\n                summary.innerText = 'Random APOD fetched was not an image.';\n            }\n        }\n        // Add an application command\n        const command = 'apod:open';\n        app.commands.addCommand(command, {\n            label: 'Random Astronomy Picture',\n            execute: () => {\n                if (!widget.isAttached) {\n                    // Attach the widget to the main work area if it's not there\n                    app.shell.add(widget, 'main');\n                }\n                // Activate the widget\n                app.shell.activateById(widget.id);\n            }\n        });\n        // Add the command to the palette.\n        palette.addItem({ command, category: 'Tutorial' });\n    }\n};\nexport default extension;\n"],"names":[],"sourceRoot":""}