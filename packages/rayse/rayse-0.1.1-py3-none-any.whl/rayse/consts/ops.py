from typing import List


class Mat(list):

    def __add__(self, other):
        rows = len(self)
        cols = len(self[0])
        return Mat([[other[i][j] + self[i][j] for i in range(rows)] for j in range(cols)])

    def __mul__(self, other):
        if type(other) is not Mat:
            rows = len(self)
            cols = len(self[0])
            return Mat([[other * self[i][j] for i in range(rows)] for j in range(cols)])

    def __rmul__(self, other):
        if type(other) is not Mat:
            rows = len(self)
            cols = len(self[0])
            return Mat([[other * self[i][j] for i in range(rows)] for j in range(cols)])


def mat(arg: List[List[float]]) -> Mat:
    return Mat(arg)


def eye(dim: int) -> Mat:
    i = [[]]
    if dim == 4:
        i = [[1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]]
    elif dim == 9:
        i = [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]
    return Mat(i)


def sym(dim: int) -> Mat:
    s = [[]]
    if dim == 4:
        s = [[1., 0., 0., 0.],
             [0., 0.5, 0.5, 0.],
             [0., 0.5, 0.5, 0.],
             [0., 0., 0., 1.]]
    elif dim == 9:
        s = [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]
    return Mat(s)


def skw(dim: int) -> Mat:
    a = [[]]
    if dim == 4:
        a = [[0., 0., 0., 0.],
             [0., 0.5, -.5, 0.],
             [0., -.5, 0.5, 0.],
             [0., 0., 0., 0.]]
    elif dim == 9:
        a = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.5, 0.0, -.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, -.5, 0.0, 0.0],
             [0.0, -.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, -.5, 0.0],
             [0.0, 0.0, -.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, -.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
    return Mat(a)


def tr(dim: int) -> Mat:
    t = [[]]
    if dim == 4:
        t = [[1., 0., 0., 1.],
             [0., 0., 0., 0.],
             [0., 0., 0., 0.],
             [1., 0., 0., 1.]]
    elif dim == 9:
        t = [[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]]
    return Mat(t)


def venant(lam: float, mu: float, dim: int) -> List[List[float]]:
    if dim == 2:
        T = [[1., 0., 0., 1.],
             [0., 0., 0., 0.],
             [0., 0., 0., 0.],
             [1., 0., 0., 1.]]
        S = [[1., 0., 0., 0.],
             [0., 0.5, 0.5, 0.],
             [0., 0.5, 0.5, 0.],
             [0., 0., 0., 1.]]
        return Mat([[lam * T[r][c] + 2. * mu * S[r][c] for c in range(4)] for r in range(4)])
    elif dim == 3:
        T = [[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]]
        S = [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]
        return Mat([[lam * T[r][c] + 2. * mu * S[r][c] for c in range(9)] for r in range(9)])


def cosserat(mu_c: float, dim: int) -> List[List[float]]:
    if dim == 2:
        A = [[0., 0., 0., 0.],
             [0., 0.5, -.5, 0.],
             [0., -.5, 0.5, 0.],
             [0., 0., 0., 0.]]
        return Mat([[2. * mu_c * A[r][c] for c in range(4)] for r in range(4)])
    elif dim == 3:
        A = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.5, 0.0, -.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, -.5, 0.0, 0.0],
             [0.0, -.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, -.5, 0.0],
             [0.0, 0.0, -.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, -.5, 0.0, 0.5, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
        return Mat([[2. * mu_c * A[r][c] for c in range(9)] for r in range(9)])
